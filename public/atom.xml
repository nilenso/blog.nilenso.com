<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nilenso Blog]]></title>
  <link href="http://blog.nilenso.com/atom.xml" rel="self"/>
  <link href="http://blog.nilenso.com/"/>
  <updated>2018-07-17T15:59:53+05:30</updated>
  <id>http://blog.nilenso.com/</id>
  <author>
    <name><![CDATA[Nilenso]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Finances in an Employee-Owned Technology Co-operative]]></title>
    <link href="http://blog.nilenso.com/blog/2018/05/23/finances-in-an-employee-owned-technology-co-opera/"/>
    
    <updated>2018-05-23T00:00:00+05:30</updated>
    <id>http://blog.nilenso.com/blog/2018/05/23/finances-in-an-employee-owned-technology-co-opera</id>
    
    <content type="html"><![CDATA[<p>If you are not already familiar with <a href="https://nilenso.com">nilenso</a>, I apologize. This article may not make any sense to you. Requested as an opinion piece in reply to an internal email on salaries, it hinges on a lot of context.</p>


<p>You may find that context interesting.</p>


<ul><li>YourStory: <a href="https://yourstory.com/2017/02/nilenso-sofware-cooperative/">India’s first software co-operative</a></li><li><a href="https://yourstory.com/2017/02/nilenso-sofware-cooperative/">Huh? A Software Cooperative?</a> — an introduction</li><li><a href="https://blog.nilenso.com/blog/2015/06/30/how-to-co-op-salaries-reviews/">How to Co-op: Salaries and Reviews</a></li><li><a href="https://blog.nilenso.com/blog/2016/05/16/i-have-cramps/">“I have cramps.”</a> — introducing our menstrual leave policy</li><li><a href="https://blog.nilenso.com/blog/2017/02/14/nilenso-policies-by-the-people-for-the-people/">nilenso policies</a> — democratic corporate benefits</li><li><a href="https://blog.nilenso.com/blog/2017/04/06/black-mirror-or-a-review-of-the-review-process-at/">nilenso reviews</a> — how do we evaluate one another?</li><li><a href="https://blog.nilenso.com/blog/archives/">blog archive</a> — the rest of the articles we’ve written</li></ul>


<p>The email which spawned this discussion was from a new employee, suggesting that we raise salaries. We discuss such organizational and infrastructural changes on occasion (not often) and an open conversation is welcome.</p>


<p>However, as I’m leaving nilenso in July, it felt worthwhile to capture what would otherwise be a one-time, long-winded email to nilenso’s <em>existing</em> staff and transform that into an article which could capture one founding member’s opinion of what nilenso is, for all future staff — and other fans of Employee-owned Co-operatives—who would care to read it.</p>


<h3>On Salaries</h3>


<p>The original email had a fairly simple 3-part structure.</p>


<p><strong>First: How much can we pay?</strong> …without compromising on organizational goals like maintaining a rainy-day cash buffer and financing experimental new ventures?</p>


<p><strong>Second, a declaration of our rates &amp; salaries.</strong> Highlighted is the delta between the two. Our rates vary a lot from project to project, but for the sake of example, imagine our rates average to $100/hour. (100 is a nice round number.) At $100/hour, our rates were high for Indian software consultancies, but not astronomical. A napkin calculation roughs $100/hour to over $100,000/year in revenue. Historically, very senior people at nilenso made about half this revenue figure as salary.</p>


<blockquote>[F]or people with more experience and established reputation, there is an incentive to break away and start their own business so that they can pocket the difference.</blockquote>


<p>(All quotes are from the aforementioned email.)</p>


<p><strong>Third and last, a spectrum of starting salaries.</strong> These were listed for college grads of reputable Indian universities, such as NIT and IIT. Paymasters near the top included Uber and Goldman Sachs. Near the bottom were Samsung and American Express.</p>


<blockquote>Some of the people I know from college are very good programmers and I’ll have a very hard [time] convincing them to join Nilenso [sic], because the difference between our salaries and the industry “standard” is too large.</blockquote>


<p>….</p>


<blockquote>[M]ost of our clients can pay pretty high salaries. From their perspective it isn’t an unreasonable strategy to hire a bunch of folks from nilenso instead of negotiating our high rates</blockquote>


<p>It is possible this argument doesn’t seem irrational in isolation, so let’s break it down part by part. From hereon out, please automatically prefix any declaration I make with “as of this writing.”</p>


<h3>Part 3: A unicorn pissing contest</h3>


<p>Let’s start from the end, since—tellingly—the actionable question was actually posed first.</p>


<p>There are a number of reasons our clients have not frequently hired our staff away. First, and most strictly, some contracts we sign have a two-way no-hire clause. In these cases, our clients cannot hire our employees and we cannot hire theirs. However, just because the contract does not forbid poaching does not make it a good idea. Our preferred engagement model is a long-term, cooperative and collaborative relationship; if either side starts yanking the other entity’s employees, that’s a great way to either poison the engagement.</p>


<p>In addition to all of this, however, there is sustainability at stake. As global consultancies go, nilenso is very small and very good. The author of the email is our 20th co-op member. Unless a client is very comfortable burning bridges, hiring two of our staff today trims our numbers by a non-trivial 10%. We don’t work with cannibal business owners.</p>


<p>That isn’t to say no one has ever left nilenso this way. If it happens, we simply hope that person takes their decision very seriously. Some of our alumni left to join past clients — and we wished them well.</p>


<p>People do not work at nilenso to get rich.</p>


<p>People work here because they believe in something. As we’ll see, “something” isn’t defined by some manifesto or mission statement. The “something” isn’t likely to be found elsewhere and it’s even less likely to be the same for two different people at nilenso. “Something” probably isn’t a single thing within the mind of a single person. “Something” is fractured and ever-changing. Each fractured shard is at any given time either a hallucination manifesting in action or a miscalculation fading to black.</p>


<p>As complex as The Somethings are, there has thus far been a few consistent threads. One? T<strong>echnical excellence</strong>. A potential client from Vietnam recently asked “<em>what is the ratio of fresh grads you hire to senior developers?</em>” Though it may not appear so on the surface, the idea that “<em>I’ll have a very hard [time] convincing [people I know from college] to join</em>” stems from the very same misconception.</p>


<p>nilenso is not a leveraged consultancy.</p>


<p>The misconception is that nilenso desires to behave as other consultancies by “leveraging”** their weakest employees (read: fresh grads) and charging the highest possible rate by inflating them with as few “senior”** developers as possible. The misconception is not unfounded. Most consultancies operate this way. We do not.</p>


<p>**<em> industry terminology, not mine</em></p>


<p>Convincing college grads to apply to nilenso is not a problem we’d like to solve. We have college grads begging us for internships and offering to work for free.</p>


<p><strong>We do not want to hire college grads.</strong></p>


<p>When our clients hire nilenso, we don’t want them satisfied. <em>We want them elated</em>. With one or two exceptions, our most junior developers always have multiple years of experience. They joined us because they couldn’t find their Something anywhere else in the industry. Not only has a college grad not, by definition, owned her own software in production — she hasn’t had an opportunity to go look for Something yet. <em>Go searching first—and learn to build and deploy software while you’re at it. </em>Maybe she’ll find her Something. If she doesn’t, she can join a company like ours.</p>


<p>We are not Uber or Goldman Sachs. We don’t <a href="https://en.wikipedia.org/wiki/Uber#Sexual_harassment_allegations_and_management_shakeup_(2017)">treat our female colleagues like shit</a>, we don’t have an <a href="https://en.wikipedia.org/wiki/Uber#Workplace_culture">“asshole culture”</a>, we haven’t <a href="https://en.wikipedia.org/wiki/Uber#2014_reviews_by_the_Better_Business_Bureau">received a failing grade from the Better Business Bureau</a>, nor do we have a list of “controversies and legal issues” <a href="https://en.wikipedia.org/wiki/Goldman_Sachs#Controversies_and_legal_issues">as long as your arm</a>.</p>


<p>Some of us have worked for companies like these and we have done everything in our power to <em>prevent</em> nilenso from becoming such a company. We don’t need revenue in the billions to behave this way but racing to compete salaries with such companies does us zero favours in that arena.</p>


<p>There is perhaps no better way for a college kid to learn the value of a company like nilenso than to experience a cesspool like Uber firsthand for a couple years. Not that I recommend the grads start their search there, mind you.</p>


<h3>Part 2: Where is all this magical money coming from?</h3>


<p>In “Part 3”, when I say that nilenso is “very small and very good” I mean that from the bottom of my heart. We are <em>very</em> good. We don’t fantasize about our clients paying us $100/hour — our current clients pay us this because we are <em>worth it</em>. Our first month with every new client is always evaluatory (we even did a 3-month evaluation period once). This is an opportunity for our clients to fire us if they find us too expensive and for us to fire them if we find the relationship isn’t productive.</p>


<p>Why are our developers worth well over $10,000 USD per month?</p>


<p>There is a watermark here. One can calculate the watermark in a number of ways. The first and most obvious is: How many people at nilenso have ever been paid $120,000/year or higher in any country? <strong>Two.</strong> So that probably puts the watermark too high. How many people at nilenso could be paid $120,000/year (roughly 77 lakh rupees) today — specifically in Bangalore? <strong>Three.</strong></p>


<p>These numbers are clearly too low. The entire value of our company does not hinge on two or three people. But these are the only objective numbers we have on this axis. If we wanted to reach for a subjective number, we could say the watermark exists beneath anyone to whom our rates can be actively attributed. I would say these people number <strong>seven</strong>.</p>


<p>Seven of twenty active knowledge workers does not mean we “leverage” (ugh, that word) the other thirteen. Other folks are very close or arguably cross this watermark. But every team has a natural pecking order (a hierarchy drawn in a straight line, whether you draw it with a pen or with your mind) and wherever we assume this watermark to be, our value to our customers is more than the sum of the parts.</p>


<p>The flaw in the “wow, we make so much money!” argument is that no matter where you place this watermark, you must actively acknowledge from where this value is generated: above the watermark. If there is an argument to be made for altering the salary curve to reflect this, that alteration always implies an inflection point <em>at the watermark</em>. People above the watermark should be paid more. People below the watermark should be paid less. Your financial goals as an employee of such a company are dictated by your ability to cross the watermark and stay above it.</p>


<p>That doesn’t sound like a place I’d like to work.</p>


<p>I’m guessing the author of the original email feels the same way. Being our most junior staff member means starting at the very bottom of this curve and a search for the source of a consultancy’s value is always upward-facing. That’s a big hill to climb and it’s a lot more likely that crossing the watermark will involve nilenso growing from 20 to 40 rather than the most junior employee leapfrogging over 10 other people. We grow slowly on purpose — and it’s not to keep junior people at the bottom of the pay scale.</p>


<p>We would rather grow <em>inside</em>. We want our most junior staff to become more senior not by stacking themselves on top of new junior people but by perfecting their execution.</p>


<blockquote>[F]or people with more experience and established reputation, there is an incentive to break away and start their own business so that they can pocket the difference.</blockquote>


<p>No one at nilenso has ever done this. Why not?</p>


<h3>Part 1: Where does all this money go?</h3>


<p>Now we get to the juicy bits. The interesting question is not “how much can we pay?” <em>at all</em>. If someone wants to double her salary she can very easily do so today and nilenso is entirely unequipped to deal with that except to wish her the best with her new job.</p>


<p><strong>People do not work at nilenso to get rich.</strong></p>


<p>People work at nilenso to find… something. Something. What is that Something? To answer this, we must ask: What is nilenso? This is the interesting question.</p>


<p>Nilenso Software LLP is, today, a co-op; nilenso is self-hosted. It is written in a homoiconic language. It is self-referential. It is self-describing. The specification is the paper the specification is written on. And while none of these qualities are the Something we were all after, they are the qualities which equip us to do <em>anything we want</em> with the company. We are uninhibited in finding our Somethings if we never need to beg for VC money, never need to give up control, and never need to grow before we’re ready.</p>


<p>“Anything we want” can include bumping our salaries by 10% or 50%. It can include handing out bonuses. It can include democratically deciding we want to execute across-the-board pay cuts. But these are all pretty boring axes to manipulate the business. You don’t have to work at a co-op (and therefore run it) for very long to realize the the classic definitions of success are mind-numbingly boring… albeit always tempting.</p>


<p>Anything we want? Here is a far more interesting list:</p>


<ul><li>helping parents raise children in the modern world</li><li>protect privacy as a fundamental right</li><li>fuel our office with solar panels</li><li>make the activity of building free software a work of pride, again</li><li>liberate the data sciences with truly open data</li><li>globally redefine what constitutes a “normal workplace”</li><li>what do you want to do? does it take money to do it? (hint: yes)</li></ul>


<p>Every rupee we keep inside nilenso, invest as nilenso, or spend as nilenso pushes us further toward a collective activity, a collective vision. Every rupee we divide and distribute, 5 paise per co-op member, is a step away from a collective vision. The farthest we can go in this direction is to distribute everything: nilenso saves nothing, invests nothing, and builds nothing. Well before that stage, nilenso becomes an Umbrella Consultancy and we are nilenso in name only… another army of contractors with a brand attached and a few rupees saved every month to pay the water bill.</p>


<p>It is entirely valid for the collective vision of nilenso to be “we don’t want to have a collective vision” but once that is decided, there is no going back. If you want to become a software product company (as we attempted with <a href="https://relay-chat.com">Relay</a> and previously attempted with <a href="https://github.com/nilenso/kulu">Kulu</a>), an electric rickshaw taxi service (a business model we have seriously considered), or a cafe (a business model we have jokingly considered)… you can’t. You get to go back to Square One, where we were when we incorporated nilenso in 2013. But you get to go back with no money and no way to compete on salaries but to rebuild a vision from scratch.</p>


<p>Good luck. It wasn’t easy the first time.</p>


<h3>Epilogue</h3>


<p>There is no easy way to think about the future regarding corporate or personal finances and arrive at novel conclusions. Follow Steve Jobs’ advice, drop enough acid, and you may. But you are still unlikely to execute based on these conclusions when you are sober on Monday. Such contemplations demand an entire suite of thought exercises. This is my favourite:</p>


<p>Flip the <em>Five Whys</em> exercise around and you have the <em>And Then What?</em> exercise.</p>


<p>Once you are rich, then what? Once you have solved the original problem, then what? Once you have solved an entire category of problems, then what? Once you have taught others to do it, then what?</p>


<p>And then what?</p>


<p>And then what?</p>


<p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a18a2976f0d7" width="1" height="1"><div class="author">
  <img src="http://nilenso.com/images/people/steven-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deobald">Steven Deobald</a> - check out <a href="https://medium.com/@deobald?source=rss-f6b24d2dc678------2">Stories by Steven Deobald on Medium</a></i>
  </span>
</div></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Designing for Open Source Software]]></title>
    <link href="http://blog.nilenso.com/blog/2018/04/09/designing-for-open-source-software/"/>
    
    <updated>2018-04-09T00:00:00+05:30</updated>
    <id>http://blog.nilenso.com/blog/2018/04/09/designing-for-open-source-software</id>
    
    <content type="html"><![CDATA[<h4>Mattermost → Relay</h4>


<p>When you hear the words “open source” attached to a product, what image comes to mind? Do you imagine an office full of designers obsessing over every little pixel? Or do you imagine an army of alpha-nerds piecing together a slap-dash knockoff of some proprietary software?</p>


<p>We all believe open source software is badly designed because, historically, it was. (#NotAllOpenSourceSoftware)</p>


<p>Thirty years ago, in 1988, the very concept of a license or design language for software was far beyond the average person. A decade later, everything was still awful. Software barely worked. Your PC definitely had a virus on it. HTML had a &lt;blink&gt; tag. Installing Linux required weeks of patience and belief in oneself — the kind of conviction I would need to train for a marathon. If there is one canonical failure we can promote as the poster child of this dark era, it is OpenOffice. Or StarOffice or LibreOffice or Apache OpenOffice or OOo or AOO or whatever name you might know it by. When the very <em>name</em> of the product is this broken it’s unlikely to succeed as a brand.</p>


<p>Fast forward ten more years. As of 2008, Firefox was eating Microsoft’s lunch. Firefox was open source, fast, and standards-compliant. It was easy to like Firefox. But we didn’t like Firefox. We <strong>loved</strong> Firefox. Firefox had a brand before it was Firefox. A brand isn’t a snappy name and a cute logo. Your product is your brand and your product is dictated by its design.</p>


<p><figure><img alt="" src="https://cdn-images-1.medium.com/max/400/1*Mbzpzkw4uraKcHuYgVnp_g.png" /><figcaption>Image from <a href="http://www.lowter.com/blogs/2008/6/21/firefox-3">Lowter</a></figcaption></figure><p>In 2018, user expectations demand that design asymptotically approach perfection: your product better be open, compatible, clean, fast, and powerful. When nilenso first made the move <a href="https://medium.com/@deobald/we-created-relay-by-escaping-slack-aedf0579a65f">from Slack to Mattermost</a>, we kept all of this in mind. From our very first deployment of Mattermost it felt <em>whole</em>. We chose Mattermost because it was so very close to the design we wanted, we knew we could help bring it the rest of the way.</p><h3>The beginning</h3><p>The design problems that currently exist with Mattermost aren’t just visual but interaction and experience related. One of the first issues we took up was adding infinite scroll to the channel history. We couldn’t fathom why users should manually click to load every page of history. <a href="https://github.com/mattermost/mattermost-webapp/pull/941">So we fixed it</a>!</p><p>In the not-too-distant future we will add all the little nuanced details which transform Relay into software you absolutely <strong>love</strong>. At the moment, however, our aim is to solve the obvious problems our users have with the Mattermost/Relay experience. Like infinite scroll, these are the problems that left our early users shouting at us “ugh… how have you not fixed this yet?!”</p><p>Such problems stem from the pains caused by inconsistencies and visual discrepancies which hamper usability. It is surprising to many how quickly these seemingly small issues amount to death by a thousand papercuts. It is equally surprising how quickly software becomes a joy to use once you get the basics right.</p><p>We’ll start with the basics — icons and fonts — and then move on to the specifics of how we redesigned Mattermost as Relay, piece by piece.</p><h3>Icons</h3><p><a href="https://medium.com/@deobald/we-created-relay-by-escaping-slack-aedf0579a65f">When we moved from Slack to Mattermost</a> the difference in icons used was stark. All icons used in Mattermost were inconsistent with respect to weights. They were standing out of the interface rather than blending in.</p><p>After further digging, we realised that Mattermost uses the free version of <a href="https://fontawesome.com/icons">Font Awesome</a>. Don’t get me wrong, I love the guys at Font Awesome; I even backed their kickstarter. But not all icons being available in the free weights (regular &amp; solid) is quite a bummer.</p><p>We had three rules for selecting an icon set:</p><ul><li>Icons <strong>must</strong> be open source</li><li>Icons need to be extensive</li><li>Icons need to be available in different styles (line and solid)</li></ul><blockquote>Allow me to interrupt with an aside. Technically, it is <em>possible</em> for us to build commercial artefacts into the Relay client by keeping them out of the source tree, even though Relay is AGPL3-licensed (as a derivative of the <a href="https://github.com/mattermost/mattermost-webapp">mattermost-webapp</a>). Why, then, do we feel it is essential that the icons be open source? Relay lives at the intersection of <a href="https://www.fsf.org/about/what-is-free-software">the principles of Free Software</a> and <a href="https://opensource.org/licenses/AGPL-3.0">the license which governs it</a>. Relay stands on the shoulders of giants — not only the Mattermost source code but Linux, GoLang, React, and hundreds of other projects. Here, between the spirit and the letter of Open Philosophies, exists a great deal of nuance. Cutting through this nuance is a root concept, however: “share alike.” If we take something from the free/open software community, what we return to that community should afford the next recipient the same freedoms we had. If we tweak Relay’s design until it is absolutely perfect but that involves changes which Mattermost cannot absorb upstream, we have failed them and every other project we have built ourselves upon. Thus, our icons must have an open license. — Steven Deobald</blockquote><p>Thanks Steve. Keeping the above mentioned points in mind, there were three icon sets that made the final round of discussion:</p><ul><li><a href="https://vmware.github.io/clarity/icons/icon-sets">Clarity icons</a></li><li><a href="https://feathericons.com/">Feather icons</a></li><li><a href="https://useiconic.com/open">Iconic icons</a></li></ul><p>We chose the Clarity icon set because of styles, consistency, and the icons being part of a design language system. Clarity is an open source design system created and maintained by the good folks at VMware. Since VMware has a dedicated team pushing continuous updates there is little fear the icon set will be abandoned or go stale.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*8YedTvLmvirplj0sFZ8_EA.png" /></figure><h3>Font</h3><p>Our font selection followed the same rules:</p><ul><li>Fonts <strong>must</strong> be open source</li><li>Fonts should be available in multiple weights</li></ul><p>…along with these additions:</p><ul><li>Fonts with large x-height for easy readability</li><li>Fonts with thick Regular weight so fonts will be crisp</li></ul><p>We stress so much on font weights because Relay is, first and foremost, a messaging tool. In Relay, you spend most of your time reading and we want this experience to be as enjoyable as possible. Relay also has complete Markdown support and weights help establish hierarchy both within the app and within the messages themselves.</p><p>We had a few contenders which satisfied these requirements. PT Sans, Lato, and Noto Sans all have an enjoyable reading experience but after a lot of trial and error we chose Fira Sans.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zKRXBmPhm29XOuEAIu-V1Q.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*cFZx7FuOzEfaRXvzkL9-3w.png" /></figure><p>Fira Sans is an incredible font. It has a healthy variety of weights and the compressed nature of the font holds the messaging interface together while keeping it crisp.</p><blockquote>Did you know that Fira Sans was built on top of Erik Spiekermann’s commercial font FF Meta? And that Spiekermann was commissioned by the Mozilla Foundation! <a href="http://typographica.org/typeface-reviews/fira-sans/">Read the whole story here</a></blockquote><h3>How Mattermost became Relay</h3><p>Implementing the design basics improved the existing experience. But to make those changes truly delightful we need to fine-tune every aspect of the app. We have started with three major sections:</p><ol><li>Left sidebar</li><li>Channel header</li><li>Main messaging interface</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Nxo6ha36AGdYC5yTbPM-4g.png" /><figcaption>Present Mattermost interface</figcaption></figure><h4>1. Left sidebar</h4><p>The sidebar’s Team section allows users to switch between teams within organisations that they’re a part of. The current Mattermost implementation truncates the team name and adds a byline. The problem with this is that it does not add any value since hovering over the team opens a tooltip with the team name anyway. We removed the byline and the truncated text.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*9SkvIpcpCoZcPqK_aQyg3w.png" /></figure><p>The sidebar’s Channel section felt mashed together. There is a clear hierarchy intended, which includes channel headers such as “Favorite Channels” and a distinction between active and inactive channels. We brought this hierarchy to the surface. Active channels have a heavy weight and inactive channels fade away with a lower opacity, despite the <em>increased</em> crispness of Fira Sans.</p><p>Grouped channels now have tighter spacing and groups themselves have larger spacing, allowing group titles to have a smaller font. All together, this makes the hierarchy obvious even at a glance.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*hiZL-Z9BvrCqgQmi1KZL3w.png" /></figure><h4>2. Channel header</h4><p>In the channel header we cleaned up the icons. Here are the issues we encountered with the icons:</p><ul><li>Most icons weren’t of the same weight</li><li>Some icons were of a different size</li><li>Some icons had some positioning overrides to align them</li></ul><p>The old icons for the channel header stood out, drawing attention away from the main chat area. We wanted them instead to blend into the design — unobtrusive but still obvious. To do this we removed the borders and switched the icon set to Clarity.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*JPH74EFnVALhnJT40VyJEQ.png" /></figure><p>In addition to icons, we fixed the CSS for the header and right sidebar, getting rid of all funny margins and relative positioning. We also added consistent heights, paddings, and sizes for each of the icons. These fixes don’t just add polish to the UI; once merged, they will also ensure it is easier for anyone in the community, including us, to customise Mattermost.</p><h4>3. Messaging interface</h4><p>The messaging interface is where users spend the most time. The messaging interface is also where Mattermost has most of its design inconsistencies, which are most glaring in the basics: alignment, spacing between posts, font size, and other elements on the interface such as the reply box.</p><p>After we moved to Fira Sans we bumped up the font size, made sure the headings and names are bolded to establish hierarchy, and fixed alignment and spacing issues to deliver a crisper and more enjoyable reading experience.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*fHEbMdPuBuTKZTOBIFOrLg.png" /></figure><h3>Themes</h3><p>Accessibility matters. We have light-sensitive coworkers and we’re sure you do, too. That’s why Relay comes with light and dark themes out of the box.</p><p>There are many Relay/Mattermost-compatible themes available already but we will pour all our energy into these two. They already make Relay beautiful and with every <a href="https://en.wikipedia.org/wiki/Kaizen">kaizen</a> they will only get better.</p><p>Of course, we don’t restrict you to these two themes. Relay also comes with community themes and Relay’s entire colour scheme is fully customisable… not just the sidebar (<em>cough</em> Slack <em>cough</em>). We are working to make Relay <a href="https://trello.com/c/rAjOFRmw">100% customisable through CSS</a> so users have complete control over every aspect of the UI, if they want.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Xi8y7fGywOWfNpZPAYbxPA.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*RSYA2D6Mbd-RgxbbYPcANQ.png" /></figure><h3>Putting it all together</h3><p>By following a consistent design language for icons, font, and themes we ensure all our “pieces” are whole unto themselves. Putting them back together, the application itself becomes whole.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*w6L79VGBNKJy4pKu-qhK1A.png" /></figure><p>Mattermost has published a <a href="https://github.com/mattermost/mattermost-server/issues/8350">design challenge</a> that encourages designers from all over the world to improve Mattermost (and, hence, Relay) readability and usability. <a href="https://github.com/mattermost/mattermost-webapp/pull/971">Our redesign addresses this challenge</a>.</p><p><a href="https://relay-chat.com/signup">Sign up</a>, try the redesign, and tell us what you think!</p><p>Along with visual design changes, Relay also aims to significantly improve its user experience. Our <a href="https://trello.com/b/OaHPWOAi">public Trello board</a> contains our plan for Relay’s future.</p><h3>Future</h3><p>“Design” is the <a href="https://medium.com/@baditaflorin/inside-the-top-1000-tags-on-medium-com-part-1-a1ff96356639">8th most popular tag on Medium</a>. “Open Source” is ranked 290. Source code licenses will never be sexy for the same reason your city’s water utility company will never be. The water supply is inherently a part of your city’s design. Similarly, your freedom as a user is designed into software you buy. Your ownership of a product is but one more limb in the tree of design.</p><blockquote>Open source software needs good design because good design respects you, the user.</blockquote><blockquote>❤</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*g6rztkAO4PgkBPPYG0A91w.png" /><figcaption>Illustration by <a href="https://www.instagram.com/basementtaco/">Shrishti Ambani</a></figcaption></figure><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=65ea40616c5a" width="1" height="1"><hr><p><a href="https://medium.com/the-relay/designing-for-open-source-software-65ea40616c5a">Designing for Open Source Software</a> was originally published in <a href="https://medium.com/the-relay">The Relay</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p><div class="author">
  <img src="https://nilenso.com/images/people/varun-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/">Varun Pai</a> - check out <a href="https://medium.com/@irrational_pai?source=rss-3a83e65683fa------2">Stories by Varun Pai on Medium</a></i>
  </span>
</div></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Designing for open source software]]></title>
    <link href="http://blog.nilenso.com/blog/2018/03/21/designing-for-open-source-software/"/>
    
    <updated>2018-03-21T00:00:00+05:30</updated>
    <id>http://blog.nilenso.com/blog/2018/03/21/designing-for-open-source-software</id>
    
    <content type="html"><![CDATA[<h4>We all believe open source software is badly designed because, historically, it was.</h4>


<h4>Mattermost → Relay</h4>


<p>When you hear the words “open source” attached to a product, what image comes to mind? Do you imagine an office full of designers obsessing over every little pixel? Or do you imagine an army of alpha-nerds piecing together a slap-dash knockoff of some proprietary software?</p>


<p>We all believe open source software is badly designed because, historically, it was. (#NotAllOpenSourceSoftware)</p>


<p>Thirty years ago, in 1988, the very concept of a license or design language for software was far beyond the average person. A decade later, everything was still awful. Software barely worked. Your PC definitely had a virus on it. HTML had a &lt;blink&gt; tag. Installing Linux required weeks of patience and belief in oneself — the kind of conviction I would need to train for a marathon. If there is one canonical failure we can promote as the poster child of this dark era, it is OpenOffice. Or StarOffice or LibreOffice or Apache OpenOffice or OOo or AOO or whatever name you might know it by. When the very <em>name</em> of the product is this broken it’s unlikely to succeed as a brand.</p>


<p>Fast forward ten more years. As of 2008, Firefox was eating Microsoft’s lunch. Firefox was open source, fast, and standards-compliant. It was easy to like Firefox. But we didn’t like Firefox. We <strong>loved</strong> Firefox. Firefox had a brand before it was Firefox. A brand isn’t a snappy name and a cute logo. Your product is your brand and your product is dictated by its design.</p>


<p><figure><img alt="" src="https://cdn-images-1.medium.com/max/400/1*Mbzpzkw4uraKcHuYgVnp_g.png" /><figcaption>Image from <a href="http://www.lowter.com/blogs/2008/6/21/firefox-3">Lowter</a></figcaption></figure><p>In 2018, user expectations demand that design asymptotically approach perfection: your product better be open, compatible, clean, fast, and powerful. When nilenso first made the move <a href="https://medium.com/@deobald/we-created-relay-by-escaping-slack-aedf0579a65f">from Slack to Mattermost</a>, we kept all of this in mind. From our very first deployment of Mattermost it felt <em>whole</em>. We chose Mattermost because it was so very close to the design we wanted, we knew we could help bring it the rest of the way.</p><h3>The beginning</h3><p>The design problems that currently exist with Mattermost aren’t just visual but interaction and experience related. One of the first issues we took up was adding infinite scroll to the channel history. We couldn’t fathom why users should manually click to load every page of history. <a href="https://github.com/mattermost/mattermost-webapp/pull/941">So we fixed it</a>!</p><p>In the not-too-distant future we will add all the little nuanced details which transform Relay into software you absolutely <strong>love</strong>. At the moment, however, our aim is to solve the obvious problems our users have with the Mattermost/Relay experience. Like infinite scroll, these are the problems that left our early users shouting at us “ugh… how have you not fixed this yet?!”</p><p>Such problems stem from the pains caused by inconsistencies and visual discrepancies which hamper usability. It is surprising to many how quickly these seemingly small issues amount to death by a thousand papercuts. It is equally surprising how quickly software becomes a joy to use once you get the basics right.</p><p>We’ll start with the basics — icons and fonts — and then move on to the specifics of how we redesigned Mattermost as Relay, piece by piece.</p><h3>Icons</h3><p><a href="https://medium.com/@deobald/we-created-relay-by-escaping-slack-aedf0579a65f">When we moved from Slack to Mattermost</a> the difference in icons used was stark. All icons used in Mattermost were inconsistent with respect to weights. They were standing out of the interface rather than blending in.</p><p>After further digging, we realised that Mattermost uses the free version of <a href="https://fontawesome.com/icons">Font Awesome</a>. Don’t get me wrong, I love the guys at Font Awesome; I even backed their kickstarter. But not all icons being available in the free weights (regular &amp; solid) is quite a bummer.</p><p>We had three rules for selecting an icon set:</p><ul><li>Icons <strong>must</strong> be open source</li><li>Icons need to be extensive</li><li>Icons need to be available in different styles (line and solid)</li></ul><blockquote>Allow me to interrupt with an aside. Technically, it is <em>possible</em> for us to build commercial artefacts into the Relay client by keeping them out of the source tree, even though Relay is AGPL3-licensed (as a derivative of the <a href="https://github.com/mattermost/mattermost-webapp">mattermost-webapp</a>). Why, then, do we feel it is essential that the icons be open source? Relay lives at the intersection of <a href="https://www.fsf.org/about/what-is-free-software">the principles of Free Software</a> and <a href="https://opensource.org/licenses/AGPL-3.0">the license which governs it</a>. Relay stands on the shoulders of giants — not only the Mattermost source code but Linux, GoLang, React, and hundreds of other projects. Here, between the spirit and the letter of Open Philosophies, exists a great deal of nuance. Cutting through this nuance is a root concept, however: “share alike.” If we take something from the free/open software community, what we return to that community should afford the next recipient the same freedoms we had. If we tweak Relay’s design until it is absolutely perfect but that involves changes which Mattermost cannot absorb upstream, we have failed them and every other project we have built ourselves upon. Thus, our icons must have an open license. — Steven Deobald</blockquote><p>Thanks Steve. Keeping the above mentioned points in mind, there were three icon sets that made the final round of discussion:</p><ul><li><a href="https://vmware.github.io/clarity/icons/icon-sets">Clarity icons</a></li><li><a href="https://feathericons.com/">Feather icons</a></li><li><a href="https://useiconic.com/open">Iconic icons</a></li></ul><p>We chose the Clarity icon set because of styles, consistency, and the icons being part of a design language system. Clarity is an open source design system created and maintained by the good folks at VMware. Since VMware has a dedicated team pushing continuous updates there is little fear the icon set will be abandoned or go stale.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*8YedTvLmvirplj0sFZ8_EA.png" /></figure><h3>Font</h3><p>Our font selection followed the same rules:</p><ul><li>Fonts <strong>must</strong> be open source</li><li>Fonts should be available in multiple weights</li></ul><p>…along with these additions:</p><ul><li>Fonts with large x-height for easy readability</li><li>Fonts with thick Regular weight so fonts will be crisp</li></ul><p>We stress so much on font weights because Relay is, first and foremost, a messaging tool. In Relay, you spend most of your time reading and we want this experience to be as enjoyable as possible. Relay also has complete Markdown support and weights help establish hierarchy both within the app and within the messages themselves.</p><p>We had a few contenders which satisfied these requirements. PT Sans, Lato, and Noto Sans all have an enjoyable reading experience but after a lot of trial and error we chose Fira Sans.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zKRXBmPhm29XOuEAIu-V1Q.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*cFZx7FuOzEfaRXvzkL9-3w.png" /></figure><p>Fira Sans is an incredible font. It has a healthy variety of weights and the compressed nature of the font holds the messaging interface together while keeping it crisp.</p><blockquote>Did you know that Fira Sans was built on top of Erik Spiekermann’s commercial font FF Meta? And that Spiekermann was commissioned by the Mozilla Foundation! <a href="http://typographica.org/typeface-reviews/fira-sans/">Read the whole story here</a></blockquote><h3>How Mattermost became Relay</h3><p>Implementing the design basics improved the existing experience. But to make those changes truly delightful we need to fine-tune every aspect of the app. We have started with three major sections:</p><ol><li>Left sidebar</li><li>Channel header</li><li>Main messaging interface</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Nxo6ha36AGdYC5yTbPM-4g.png" /><figcaption>Present Mattermost interface</figcaption></figure><h4><strong>1. Left sidebar</strong></h4><p>The sidebar’s Team section allows users to switch between teams within organisations that they’re a part of. The current Mattermost implementation truncates the team name and adds a byline. The problem with this is that it does not add any value since hovering over the team opens a tooltip with the team name anyway. We removed the byline and the truncated text.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*9SkvIpcpCoZcPqK_aQyg3w.png" /></figure><p>The sidebar’s Channel section felt mashed together. There is a clear hierarchy intended, which includes channel headers such as “Favorite Channels” and a distinction between active and inactive channels. We brought this hierarchy to the surface. Active channels have a heavy weight and inactive channels fade away with a lower opacity, despite the <em>increased</em> crispness of Fira Sans.</p><p>Grouped channels now have tighter spacing and groups themselves have larger spacing, allowing group titles to have a smaller font. All together, this makes the hierarchy obvious even at a glance.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*hiZL-Z9BvrCqgQmi1KZL3w.png" /></figure><h4><strong>2. Channel header</strong></h4><p>In the channel header we cleaned up the icons. Here are the issues we encountered with the icons:</p><ul><li>Most icons weren’t of the same weight</li><li>Some icons were of a different size</li><li>Some icons had some positioning overrides to align them</li></ul><p>The old icons for the channel header stood out, drawing attention away from the main chat area. We wanted them instead to blend into the design—unobtrusive but still obvious. To do this we removed the borders and switched the icon set to Clarity.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*JPH74EFnVALhnJT40VyJEQ.png" /></figure><p>In addition to icons, we fixed the CSS for the header and right sidebar, getting rid of all funny margins and relative positioning. We also added consistent heights, paddings, and sizes for each of the icons. These fixes don’t just add polish to the UI; once merged, they will also ensure it is easier for anyone in the community, including us, to customise Mattermost.</p><h4><strong>3. Messaging interface</strong></h4><p>The messaging interface is where users spend the most time. The messaging interface is also where Mattermost has most of its design inconsistencies, which are most glaring in the basics: alignment, spacing between posts, font size, and other elements on the interface such as the reply box.</p><p>After we moved to Fira Sans we bumped up the font size, made sure the headings and names are bolded to establish hierarchy, and fixed alignment and spacing issues to deliver a crisper and more enjoyable reading experience.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*fHEbMdPuBuTKZTOBIFOrLg.png" /></figure><h3><strong>Themes</strong></h3><p>Accessibility matters. We have light-sensitive coworkers and we’re sure you do, too. That’s why Relay comes with light and dark themes out of the box.</p><p>There are many Relay/Mattermost-compatible themes available already but we will pour all our energy into these two. They already make Relay beautiful and with every <a href="https://en.wikipedia.org/wiki/Kaizen">kaizen</a> they will only get better.</p><p>Of course, we don’t restrict you to these two themes. Relay also comes with community themes and Relay’s entire colour scheme is fully customisable… not just the sidebar (<em>cough</em> Slack <em>cough</em>). We are working to make Relay <a href="https://trello.com/c/rAjOFRmw">100% customisable through CSS</a> so users have complete control over every aspect of the UI, if they want.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Xi8y7fGywOWfNpZPAYbxPA.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*RSYA2D6Mbd-RgxbbYPcANQ.png" /></figure><h3>Putting it all together</h3><p>By following a consistent design language for icons, font, and themes we ensure all our “pieces” are whole unto themselves. Putting them back together, the application itself becomes whole.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*w6L79VGBNKJy4pKu-qhK1A.png" /></figure><p>Mattermost has published a <a href="https://github.com/mattermost/mattermost-server/issues/8350">design challenge</a> that encourages designers from all over the world to improve Mattermost (and, hence, Relay) readability and usability. <a href="https://github.com/mattermost/mattermost-webapp/pull/971">Our redesign addresses this challenge</a>.</p><p><a href="https://relay-chat.com/signup">Sign up</a>, try the redesign, and tell us what you think!</p><p>Along with visual design changes, Relay also aims to significantly improve its user experience. Our <a href="https://trello.com/b/OaHPWOAi">public Trello board</a> contains our plan for Relay’s future.</p><h3><strong>Future</strong></h3><p>“Design” is the <a href="https://medium.com/@baditaflorin/inside-the-top-1000-tags-on-medium-com-part-1-a1ff96356639">8th most popular tag on Medium</a>. “Open Source” is ranked 290. Source code licenses will never be sexy for the same reason your city’s water utility company will never be. The water supply is inherently a part of your city’s design. Similarly, your freedom as a user is designed into software you buy. Your ownership of a product is but one more limb in the tree of design.</p><blockquote>Open source software needs good design because good design respects you, the user.</blockquote><blockquote>❤</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*g6rztkAO4PgkBPPYG0A91w.png" /><figcaption>Illustration by <a href="https://www.instagram.com/basementtaco/">Shrishti Ambani</a></figcaption></figure><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fupscri.be%2F50d69a%3Fas_embed%3Dtrue&amp;dntp=1&amp;url=https%3A%2F%2Fupscri.be%2F50d69a%2F&amp;image=https%3A%2F%2Fucarecdn.com%2F6e8986c7-e64a-4116-9afb-fd71a476f0a9%2F&amp;key=d04bfffea46d4aeda930ec88cc64b87c&amp;type=text%2Fhtml&amp;schema=upscri" width="800" height="400" frameborder="0" scrolling="no"><a href="https://medium.com/media/05d5fd32eda31cbd1b83287606744532/href"><a href="https://medium.com/media/05d5fd32eda31cbd1b83287606744532/href">https://medium.com/media/05d5fd32eda31cbd1b83287606744532/href</a></a></iframe><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e19dfb68c708" width="1" height="1"><hr><p><a href="https://uxdesign.cc/mattermost-relay-e19dfb68c708">Designing for open source software</a> was originally published in <a href="https://uxdesign.cc">UX Collective</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p><div class="author">
  <img src="https://nilenso.com/images/people/varun-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/">Varun Pai</a> - check out <a href="https://medium.com/@irrational_pai?source=rss-3a83e65683fa------2">Stories by Varun Pai on Medium</a></i>
  </span>
</div></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Writing a Simple REST Web Service in PureScript - Part 2]]></title>
    <link href="http://blog.nilenso.com/blog/2017/10/01/writing-a-simple-rest-web-service-in-purescript-p/"/>
    
    <updated>2017-10-01T00:00:00-04:00</updated>
    <id>http://blog.nilenso.com/blog/2017/10/01/writing-a-simple-rest-web-service-in-purescript-p</id>
    
    <content type="html"><![CDATA[<div class="ert">
21 minute read
</div>


<p>To recap, in the <a href="https://abhinavsarkar.net/posts/ps-simple-rest-service/">first</a> part of this two-part tutorial, we built a simple JSON <a href="https://en.wikipedia.org/wiki/REST" target="_blank" rel="noopener">REST</a> web service in <a href="http://purescript.org" target="_blank" rel="noopener">PureScript</a> to create, update, get, list and delete users, backed by a Postgres database. In this part we’ll work on the rest of the requirements:</p>


<ol type="1">
<li>validation of API requests.</li>
<li>reading the server and database configs from environment variables.</li>
<li>logging HTTP requests and debugging info.</li>
</ol>


<!--more-->


<p><nav id="toc" class="right-toc"><h3>Contents</h3><ol><li><a href="#bugs">Bugs!</a></li><li><a href="#validation">Validation</a></li><li><a href="#configuration">Configuration</a></li><li><a href="#logging">Logging</a></li><li><a href="#conclusion">Conclusion</a></li></ol></nav></p>

<p>But first,</p>


<h2 id="bugs">Bugs!<a href="#bugs" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>


<p>What happens if we hit a URL on our server which does not exist? Let’s fire up the server and test it:</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">pulp</span> --watch run</code></pre></div>


<pre class="http"><code>$ http GET http://localhost:4000/v1/random
HTTP/1.1 404 Not Found
Connection: keep-alive
Content-Length: 148
Content-Security-Policy: default-src 'self'
Content-Type: text/html; charset=utf-8
Date: Sat, 30 Sep 2017 08:23:20 GMT
X-Content-Type-Options: nosniff
X-Powered-By: Express

&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Error&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;pre&gt;Cannot GET /v1/random&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>


<p>We get back a default HTML response with a 404 status from <a href="https://expressjs.com" target="_blank" rel="noopener">Express</a>. Since we are writing a JSON API, we should return a JSON response in this case too. We add the following code in the <code>src/SimpleService/Server.purs</code> file to add a catch-all route and send a 404 status with a JSON error message:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- previous code</span>
<span class="kw">import </span><span class="dt">Data.Either</span> (fromRight)
<span class="kw">import </span><span class="dt">Data.String.Regex</span> (<span class="dt">Regex</span>, regex) <span class="kw">as</span> <span class="dt">Re</span>
<span class="kw">import </span><span class="dt">Data.String.Regex.Flags</span> (noFlags) <span class="kw">as</span> <span class="dt">Re</span>
<span class="kw">import </span><span class="dt">Node.Express.App</span> (<span class="dt">App</span>, all, delete, get, http, listenHttp, post, useExternal)
<span class="kw">import </span><span class="dt">Node.Express.Response</span> (sendJson, setStatus)
<span class="kw">import </span><span class="dt">Partial.Unsafe</span> (unsafePartial)
<span class="co">-- previous code</span>

<span class="ot">allRoutePattern ::</span> <span class="dt">Re.Regex</span>
allRoutePattern <span class="fu">=</span> unsafePartial <span class="fu">$</span> fromRight <span class="fu">$</span> Re.regex <span class="st">&quot;/.*&quot;</span> Re.noFlags

<span class="ot">app ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
app pool <span class="fu">=</span> <span class="kw">do</span>
  useExternal jsonBodyParser

  get <span class="st">&quot;/v1/user/:id&quot;</span>    <span class="fu">$</span> getUser pool
  delete <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> deleteUser pool
  post <span class="st">&quot;/v1/users&quot;</span>      <span class="fu">$</span> createUser pool
  patch <span class="st">&quot;/v1/user/:id&quot;</span>  <span class="fu">$</span> updateUser pool
  get <span class="st">&quot;/v1/users&quot;</span>       <span class="fu">$</span> listUsers pool

  all allRoutePattern <span class="kw">do</span>
    setStatus <span class="dv">404</span>
    sendJson {error<span class="fu">:</span> <span class="st">&quot;Route not found&quot;</span>}
  <span class="kw">where</span>
    patch <span class="fu">=</span> http (<span class="dt">CustomMethod</span> <span class="st">&quot;patch&quot;</span>)</code></pre></div>


<p><code>allRoutePattern</code> matches all routes because it uses a <code>&quot;/.*&quot;</code> <a href="https://en.wikipedia.org/wiki/Regular_expression" target="_blank" rel="noopener">regular expression</a>. We place it as the last route to match all the otherwise unrouted requests. Let’s see what is the result:</p>


<pre class="http"><code>$ http GET http://localhost:4000/v1/random
HTTP/1.1 404 Not Found
Connection: keep-alive
Content-Length: 27
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 08:46:46 GMT
ETag: W/&quot;1b-772e0u4nrE48ogbR0KmKfSvrHUE&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;Route not found&quot;
}</code></pre>


<p>Now we get a nicely formatted JSON response.</p>


<p>Another scenario is when our application throws some uncaught error. To simulate this, we shut down our postgres database and hit the server for listing users:</p>


<pre class="http"><code>$ http GET http://localhost:4000/v1/users
HTTP/1.1 500 Internal Server Error
Connection: keep-alive
Content-Length: 372
Content-Security-Policy: default-src 'self'
Content-Type: text/html; charset=utf-8
Date: Sat, 30 Sep 2017 08:53:40 GMT
X-Content-Type-Options: nosniff
X-Powered-By: Express

&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Error&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;pre&gt;Error: connect ECONNREFUSED 127.0.0.1:5432&lt;br&gt; &amp;nbsp; &amp;nbsp;at Object._errnoException (util.js:1026:11)&lt;br&gt; &amp;nbsp; &amp;nbsp;at _exceptionWithHostPort (util.js:1049:20)&lt;br&gt; &amp;nbsp; &amp;nbsp;at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1174:14)&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>


<p>We get another default HTML response from Express with a 500 status. Again, in this case we’d like to return a JSON response. We add the following code to the <code>src/SimpleService/Server.purs</code> file:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- previous code</span>
<span class="kw">import </span><span class="dt">Control.Monad.Eff.Exception</span> (message)
<span class="kw">import </span><span class="dt">Node.Express.App</span> (<span class="dt">App</span>, all, delete, get, http, listenHttp, post, useExternal, useOnError)
<span class="co">-- previous code</span>

<span class="ot">app ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
app pool <span class="fu">=</span> <span class="kw">do</span>
  <span class="co">-- previous code</span>
  useOnError \err <span class="ot">-&gt;</span> <span class="kw">do</span>
    setStatus <span class="dv">500</span>
    sendJson {error<span class="fu">:</span> message err}
  <span class="kw">where</span>
    patch <span class="fu">=</span> http (<span class="dt">CustomMethod</span> <span class="st">&quot;patch&quot;</span>)</code></pre></div>


<p>We add the <code>useOnError</code> handler which comes with <a href="https://pursuit.purescript.org/packages/purescript-express" target="_blank" rel="noopener"><code>purescript-express</code></a> to return the error message as a JSON response. Back on the command-line:</p>


<pre class="http"><code>$ http GET http://localhost:4000/v1/users
HTTP/1.1 500 Internal Server Error
Connection: keep-alive
Content-Length: 47
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 09:01:37 GMT
ETag: W/&quot;2f-cJuIW6961YCpo9TWDSZ9VWHLGHE&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;connect ECONNREFUSED 127.0.0.1:5432&quot;
}</code></pre>


<p>It works! Bugs are fixed now. We proceed to add next features.</p>


<h2 id="validation">Validation<a href="#validation" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>


<p>Let’s recall the code to update a user from the <code>src/SimpleService/Handler.purs</code> file:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">updateUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
updateUser pool <span class="fu">=</span> getRouteParam <span class="st">&quot;id&quot;</span> <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { error<span class="fu">:</span> <span class="st">&quot;User ID is required&quot;</span> }
  <span class="dt">Just</span> sUserId <span class="ot">-&gt;</span> <span class="kw">case</span> fromString sUserId <span class="kw">of</span>
    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { error<span class="fu">:</span> <span class="st">&quot;User ID must be positive: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }
    <span class="dt">Just</span> userId <span class="ot">-&gt;</span> getBody <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
      <span class="dt">Left</span> errs <span class="ot">-&gt;</span> respond <span class="dv">422</span> { error<span class="fu">:</span> intercalate <span class="st">&quot;, &quot;</span> <span class="fu">$</span> map renderForeignError errs}
      <span class="dt">Right</span> (<span class="dt">UserPatch</span> userPatch) <span class="ot">-&gt;</span> <span class="kw">case</span> unNullOrUndefined userPatch<span class="fu">.</span>name <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respondNoContent <span class="dv">204</span>
        <span class="dt">Just</span> userName <span class="ot">-&gt;</span> <span class="kw">if</span> userName <span class="fu">==</span> <span class="st">&quot;&quot;</span>
          <span class="kw">then</span> respond <span class="dv">422</span> { error<span class="fu">:</span> <span class="st">&quot;User name must not be empty&quot;</span> }
          <span class="kw">else</span> <span class="kw">do</span>
            savedUser <span class="ot">&lt;-</span> liftAff <span class="fu">$</span> PG.withConnection pool \conn <span class="ot">-&gt;</span> PG.withTransaction conn <span class="kw">do</span>
              P.findUser conn userId <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> pure <span class="dt">Nothing</span>
                <span class="dt">Just</span> (<span class="dt">User</span> user) <span class="ot">-&gt;</span> <span class="kw">do</span>
                  <span class="kw">let</span> user' <span class="fu">=</span> <span class="dt">User</span> (user { name <span class="fu">=</span> userName })
                  P.updateUser conn user'
                  pure <span class="fu">$</span> <span class="dt">Just</span> user'
            <span class="kw">case</span> savedUser <span class="kw">of</span>
              <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">404</span> { error<span class="fu">:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }
              <span class="dt">Just</span> user <span class="ot">-&gt;</span> respond <span class="dv">200</span> (encode user)</code></pre></div>


<p>As we can see, the actual request handling logic is obfuscated by the request validation logic for the user id and the user name patch parameters. We also notice that we are using three constructs for validation here: <code>Maybe</code>, <code>Either</code> and <code>if-then-else</code>. However, we can use just <code>Either</code> to subsume all these cases as it can “carry” a failure as well as a success case. <code>Either</code> also comes with a nice monad transformer <a href="https://pursuit.purescript.org/packages/purescript-transformers/3.4.0/docs/Control.Monad.Except.Trans#t:ExceptT" target="_blank" rel="noopener"><code>ExceptT</code></a> which provides the <code>do</code> syntax for failure propagation. So we choose <code>ExceptT</code> as the base construct for our validation framework and write functions to upgrade <code>Maybe</code> and <code>if-then-else</code> to it. We add the following code to the <code>src/SimpleService/Validation.purs</code> file:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">SimpleService.Validation</span>
  (<span class="kw">module</span> <span class="dt">MoreExports</span>, <span class="kw">module</span> <span class="dt">SimpleService.Validation</span>) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Prelude</span>

<span class="kw">import </span><span class="dt">Control.Monad.Except</span> (<span class="dt">ExceptT</span>, except, runExceptT)
<span class="kw">import </span><span class="dt">Data.Either</span> (<span class="dt">Either</span>(..))
<span class="kw">import </span><span class="dt">Data.Maybe</span> (<span class="dt">Maybe</span>(..))
<span class="kw">import </span><span class="dt">Node.Express.Handler</span> (<span class="dt">HandlerM</span>, <span class="dt">Handler</span>)
<span class="kw">import </span><span class="dt">Node.Express.Response</span> (sendJson, setStatus)
<span class="kw">import </span><span class="dt">Node.Express.Types</span> (<span class="dt">EXPRESS</span>)
<span class="kw">import </span><span class="dt">Control.Monad.Except</span> (except) <span class="kw">as</span> <span class="dt">MoreExports</span>

<span class="kw">type</span> <span class="dt">Validation</span> eff a <span class="fu">=</span> <span class="dt">ExceptT</span> <span class="dt">String</span> (<span class="dt">HandlerM</span> (<span class="ot">express ::</span> <span class="dt">EXPRESS</span> <span class="fu">|</span> eff)) a

<span class="ot">exceptMaybe ::</span> forall e m a<span class="fu">.</span> <span class="dt">Applicative</span> m <span class="ot">=&gt;</span> e <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">ExceptT</span> e m a
exceptMaybe e a <span class="fu">=</span> except <span class="fu">$</span> <span class="kw">case</span> a <span class="kw">of</span>
  <span class="dt">Just</span> x  <span class="ot">-&gt;</span> <span class="dt">Right</span> x
  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Left</span> e

<span class="ot">exceptCond ::</span> forall e m a<span class="fu">.</span> <span class="dt">Applicative</span> m <span class="ot">=&gt;</span> e <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Boolean</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">ExceptT</span> e m a
exceptCond e cond a <span class="fu">=</span> except <span class="fu">$</span> <span class="kw">if</span> cond a <span class="kw">then</span> <span class="dt">Right</span> a <span class="kw">else</span> <span class="dt">Left</span> e

<span class="ot">withValidation ::</span> forall eff a<span class="fu">.</span> <span class="dt">Validation</span> eff a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Handler</span> eff) <span class="ot">-&gt;</span> <span class="dt">Handler</span> eff
withValidation action handler <span class="fu">=</span> runExceptT action <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
  <span class="dt">Left</span> err <span class="ot">-&gt;</span> <span class="kw">do</span>
    setStatus <span class="dv">422</span>
    sendJson {error<span class="fu">:</span> err}
  <span class="dt">Right</span> x  <span class="ot">-&gt;</span> handler x</code></pre></div>


<p>We re-export <code>except</code> from the <code>Control.Monad.Except</code> module. We also add a <code>withValidation</code> function which runs an <code>ExceptT</code> based validation and either returns an error response with a 422 status in case of a failed validation or runs the given action with the valid value in case of a successful validation.</p>


<p>Using these functions, we now write <code>updateUser</code> in the <code>src/SimpleService/Handler.purs</code> file as:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- previous code</span>
<span class="kw">import </span><span class="dt">Control.Monad.Trans.Class</span> (lift)
<span class="kw">import </span><span class="dt">Data.Bifunctor</span> (lmap)
<span class="kw">import </span><span class="dt">Data.Foreign</span> (<span class="dt">ForeignError</span>, renderForeignError)
<span class="kw">import </span><span class="dt">Data.List.NonEmpty</span> (toList)
<span class="kw">import </span><span class="dt">Data.List.Types</span> (<span class="dt">NonEmptyList</span>)
<span class="kw">import </span><span class="dt">Data.Tuple</span> (<span class="dt">Tuple</span>(..))
<span class="kw">import </span><span class="dt">SimpleService.Validation</span> <span class="kw">as</span> <span class="dt">V</span>
<span class="co">-- previous code</span>

<span class="ot">renderForeignErrors ::</span> forall a<span class="fu">.</span> <span class="dt">Either</span> (<span class="dt">NonEmptyList</span> <span class="dt">ForeignError</span>) a <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">String</span> a
renderForeignErrors <span class="fu">=</span> lmap (toList <span class="fu">&gt;&gt;&gt;</span> map renderForeignError <span class="fu">&gt;&gt;&gt;</span> intercalate <span class="st">&quot;, &quot;</span>)

<span class="ot">updateUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
updateUser pool <span class="fu">=</span> V.withValidation (<span class="dt">Tuple</span> <span class="fu">&lt;$&gt;</span> getUserId <span class="fu">&lt;*&gt;</span> getUserPatch)
                                   \(<span class="dt">Tuple</span> userId (<span class="dt">UserPatch</span> userPatch)) <span class="ot">-&gt;</span>
    <span class="kw">case</span> unNullOrUndefined userPatch<span class="fu">.</span>name <span class="kw">of</span>
      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respondNoContent <span class="dv">204</span>
      <span class="dt">Just</span> uName <span class="ot">-&gt;</span> V.withValidation (getUserName uName) \userName <span class="ot">-&gt;</span> <span class="kw">do</span>
        savedUser <span class="ot">&lt;-</span> liftAff <span class="fu">$</span> PG.withConnection pool \conn <span class="ot">-&gt;</span> PG.withTransaction conn <span class="kw">do</span>
          P.findUser conn userId <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
            <span class="dt">Nothing</span> <span class="ot">-&gt;</span> pure <span class="dt">Nothing</span>
            <span class="dt">Just</span> (<span class="dt">User</span> user) <span class="ot">-&gt;</span> <span class="kw">do</span>
              <span class="kw">let</span> user' <span class="fu">=</span> <span class="dt">User</span> (user { name <span class="fu">=</span> userName })
              P.updateUser conn user'
              pure <span class="fu">$</span> <span class="dt">Just</span> user'
        <span class="kw">case</span> savedUser <span class="kw">of</span>
          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">404</span> { error<span class="fu">:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> show userId }
          <span class="dt">Just</span> user <span class="ot">-&gt;</span> respond <span class="dv">200</span> (encode user)
  <span class="kw">where</span>
    getUserId <span class="fu">=</span> lift (getRouteParam <span class="st">&quot;id&quot;</span>)
      <span class="fu">&gt;&gt;=</span> V.exceptMaybe <span class="st">&quot;User ID is required&quot;</span>
      <span class="fu">&gt;&gt;=</span> fromString <span class="fu">&gt;&gt;&gt;</span> V.exceptMaybe <span class="st">&quot;User ID must be positive&quot;</span>

    getUserPatch <span class="fu">=</span> lift getBody <span class="fu">&gt;&gt;=</span> V.except <span class="fu">&lt;&lt;&lt;</span> renderForeignErrors

    getUserName <span class="fu">=</span> V.exceptCond <span class="st">&quot;User name must not be empty&quot;</span> (_ <span class="fu">==</span> <span class="st">&quot;&quot;</span>)</code></pre></div>


<p>The validation logic has been extracted out in separate functions now which are composed using <a href="https://pursuit.purescript.org/packages/purescript-prelude/3.0.0/docs/Control.Applicative#t:Applicative" target="_blank" rel="noopener">Applicative</a>. The validation steps are composed using the <code>ExceptT</code> monad. We are now free to express the core logic of the function clearly. We rewrite the <code>src/SimpleService/Handler.purs</code> file using the validations:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">SimpleService.Handler</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Prelude</span>

<span class="kw">import </span><span class="dt">Control.Monad.Aff.Class</span> (liftAff)
<span class="kw">import </span><span class="dt">Control.Monad.Trans.Class</span> (lift)
<span class="kw">import </span><span class="dt">Data.Bifunctor</span> (lmap)
<span class="kw">import </span><span class="dt">Data.Either</span> (<span class="dt">Either</span>)
<span class="kw">import </span><span class="dt">Data.Foldable</span> (intercalate)
<span class="kw">import </span><span class="dt">Data.Foreign</span> (<span class="dt">ForeignError</span>, renderForeignError)
<span class="kw">import </span><span class="dt">Data.Foreign.Class</span> (encode)
<span class="kw">import </span><span class="dt">Data.Foreign.NullOrUndefined</span> (unNullOrUndefined)
<span class="kw">import </span><span class="dt">Data.Int</span> (fromString)
<span class="kw">import </span><span class="dt">Data.List.NonEmpty</span> (toList)
<span class="kw">import </span><span class="dt">Data.List.Types</span> (<span class="dt">NonEmptyList</span>)
<span class="kw">import </span><span class="dt">Data.Maybe</span> (<span class="dt">Maybe</span>(..))
<span class="kw">import </span><span class="dt">Data.Tuple</span> (<span class="dt">Tuple</span>(..))
<span class="kw">import </span><span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span>
<span class="kw">import </span><span class="dt">Node.Express.Handler</span> (<span class="dt">Handler</span>)
<span class="kw">import </span><span class="dt">Node.Express.Request</span> (getBody, getRouteParam)
<span class="kw">import </span><span class="dt">Node.Express.Response</span> (end, sendJson, setStatus)
<span class="kw">import </span><span class="dt">SimpleService.Persistence</span> <span class="kw">as</span> <span class="dt">P</span>
<span class="kw">import </span><span class="dt">SimpleService.Validation</span> <span class="kw">as</span> <span class="dt">V</span>
<span class="kw">import </span><span class="dt">SimpleService.Types</span>

<span class="ot">getUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
getUser pool <span class="fu">=</span> V.withValidation getUserId \userId <span class="ot">-&gt;</span>
  liftAff (PG.withConnection pool <span class="fu">$</span> flip P.findUser userId) <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">404</span> { error<span class="fu">:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> show userId }
    <span class="dt">Just</span> user <span class="ot">-&gt;</span> respond <span class="dv">200</span> (encode user)

<span class="ot">deleteUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
deleteUser pool <span class="fu">=</span> V.withValidation getUserId \userId <span class="ot">-&gt;</span> <span class="kw">do</span>
  found <span class="ot">&lt;-</span> liftAff <span class="fu">$</span> PG.withConnection pool \conn <span class="ot">-&gt;</span> PG.withTransaction conn <span class="kw">do</span>
    P.findUser conn userId <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> pure false
      <span class="dt">Just</span> _  <span class="ot">-&gt;</span> <span class="kw">do</span>
        P.deleteUser conn userId
        pure true
  <span class="kw">if</span> found
    <span class="kw">then</span> respondNoContent <span class="dv">204</span>
    <span class="kw">else</span> respond <span class="dv">404</span> { error<span class="fu">:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> show userId }

<span class="ot">createUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
createUser pool <span class="fu">=</span> V.withValidation getUser \user<span class="fu">@</span>(<span class="dt">User</span> _) <span class="ot">-&gt;</span> <span class="kw">do</span>
  liftAff (PG.withConnection pool <span class="fu">$</span> flip P.insertUser user)
  respondNoContent <span class="dv">201</span>
  <span class="kw">where</span>
    getUser <span class="fu">=</span> lift getBody
      <span class="fu">&gt;&gt;=</span> V.except <span class="fu">&lt;&lt;&lt;</span> renderForeignErrors
      <span class="fu">&gt;&gt;=</span> V.exceptCond <span class="st">&quot;User ID must be positive&quot;</span> (\(<span class="dt">User</span> user) <span class="ot">-&gt;</span> user<span class="fu">.</span>id <span class="fu">&gt;</span> <span class="dv">0</span>)
      <span class="fu">&gt;&gt;=</span> V.exceptCond <span class="st">&quot;User name must not be empty&quot;</span> (\(<span class="dt">User</span> user) <span class="ot">-&gt;</span> user<span class="fu">.</span>name <span class="fu">/=</span> <span class="st">&quot;&quot;</span>)

<span class="ot">updateUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
updateUser pool <span class="fu">=</span> V.withValidation (<span class="dt">Tuple</span> <span class="fu">&lt;$&gt;</span> getUserId <span class="fu">&lt;*&gt;</span> getUserPatch)
                                   \(<span class="dt">Tuple</span> userId (<span class="dt">UserPatch</span> userPatch)) <span class="ot">-&gt;</span>
    <span class="kw">case</span> unNullOrUndefined userPatch<span class="fu">.</span>name <span class="kw">of</span>
      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respondNoContent <span class="dv">204</span>
      <span class="dt">Just</span> uName <span class="ot">-&gt;</span> V.withValidation (getUserName uName) \userName <span class="ot">-&gt;</span> <span class="kw">do</span>
        savedUser <span class="ot">&lt;-</span> liftAff <span class="fu">$</span> PG.withConnection pool \conn <span class="ot">-&gt;</span> PG.withTransaction conn <span class="kw">do</span>
          P.findUser conn userId <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
            <span class="dt">Nothing</span> <span class="ot">-&gt;</span> pure <span class="dt">Nothing</span>
            <span class="dt">Just</span> (<span class="dt">User</span> user) <span class="ot">-&gt;</span> <span class="kw">do</span>
              <span class="kw">let</span> user' <span class="fu">=</span> <span class="dt">User</span> (user { name <span class="fu">=</span> userName })
              P.updateUser conn user'
              pure <span class="fu">$</span> <span class="dt">Just</span> user'
        <span class="kw">case</span> savedUser <span class="kw">of</span>
          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">404</span> { error<span class="fu">:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> show userId }
          <span class="dt">Just</span> user <span class="ot">-&gt;</span> respond <span class="dv">200</span> (encode user)
  <span class="kw">where</span>
    getUserPatch <span class="fu">=</span> lift getBody <span class="fu">&gt;&gt;=</span> V.except <span class="fu">&lt;&lt;&lt;</span> renderForeignErrors
    getUserName <span class="fu">=</span> V.exceptCond <span class="st">&quot;User name must not be empty&quot;</span> (_ <span class="fu">/=</span> <span class="st">&quot;&quot;</span>)

<span class="ot">listUsers ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
listUsers pool <span class="fu">=</span> liftAff (PG.withConnection pool P.listUsers) <span class="fu">&gt;&gt;=</span> encode <span class="fu">&gt;&gt;&gt;</span> respond <span class="dv">200</span>

<span class="ot">getUserId ::</span> forall eff<span class="fu">.</span> <span class="dt">V.Validation</span> eff <span class="dt">Int</span>
getUserId <span class="fu">=</span> lift (getRouteParam <span class="st">&quot;id&quot;</span>)
  <span class="fu">&gt;&gt;=</span> V.exceptMaybe <span class="st">&quot;User ID is required&quot;</span>
  <span class="fu">&gt;&gt;=</span> fromString <span class="fu">&gt;&gt;&gt;</span> V.exceptMaybe <span class="st">&quot;User ID must be an integer&quot;</span>
  <span class="fu">&gt;&gt;=</span> V.exceptCond <span class="st">&quot;User ID must be positive&quot;</span> (_ <span class="fu">&gt;</span> <span class="dv">0</span>)

<span class="ot">renderForeignErrors ::</span> forall a<span class="fu">.</span> <span class="dt">Either</span> (<span class="dt">NonEmptyList</span> <span class="dt">ForeignError</span>) a <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">String</span> a
renderForeignErrors <span class="fu">=</span> lmap (toList <span class="fu">&gt;&gt;&gt;</span> map renderForeignError <span class="fu">&gt;&gt;&gt;</span> intercalate <span class="st">&quot;, &quot;</span>)

<span class="ot">respond ::</span> forall eff a<span class="fu">.</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Handler</span> eff
respond status body <span class="fu">=</span> <span class="kw">do</span>
  setStatus status
  sendJson body

<span class="ot">respondNoContent ::</span> forall eff<span class="fu">.</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> eff
respondNoContent status <span class="fu">=</span> <span class="kw">do</span>
  setStatus status
  end</code></pre></div>


<p>The code is much cleaner now. Let’s try out a few test cases:</p>


<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=3 name=roger
HTTP/1.1 201 Created
Connection: keep-alive
Content-Length: 0
Date: Sat, 30 Sep 2017 12:13:37 GMT
X-Powered-By: Express</code></pre>


<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=3
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 102
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 12:13:50 GMT
ETag: W/&quot;66-/c4cfoquQZGwtDBUzHjJydJAHJ0&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;Error at array index 0: (ErrorAtProperty \&quot;name\&quot; (TypeMismatch \&quot;String\&quot; \&quot;Undefined\&quot;))&quot;
}</code></pre>


<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=3 name=&quot;&quot;
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 39
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 12:14:02 GMT
ETag: W/&quot;27-JQsh12xu/rEFdWy8REF4NMtBUB4&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User name must not be empty&quot;
}</code></pre>


<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=0 name=roger
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 36
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 12:14:14 GMT
ETag: W/&quot;24-Pvt1L4eGilBmVtaOGHlSReJ413E&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User ID must be positive&quot;
}</code></pre>


<pre class="http"><code>$ http GET http://localhost:4000/v1/user/3
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 23
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 12:14:28 GMT
ETag: W/&quot;17-1scpiB1FT9DBu9s4I1gNWSjH2go&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 3,
    &quot;name&quot;: &quot;roger&quot;
}</code></pre>


<pre class="http"><code>$ http GET http://localhost:4000/v1/user/asdf
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 38
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 12:14:40 GMT
ETag: W/&quot;26-//tvORl1gGDUMwgSaqbEpJhuadI&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User ID must be an integer&quot;
}</code></pre>


<pre class="http"><code>$ http GET http://localhost:4000/v1/user/-1
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 36
Content-Type: application/json; charset=utf-8
Date: Sat, 30 Sep 2017 12:14:45 GMT
ETag: W/&quot;24-Pvt1L4eGilBmVtaOGHlSReJ413E&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User ID must be positive&quot;
}</code></pre>


<p>It works as expected.</p>


<h2 id="configuration">Configuration<a href="#configuration" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>


<p>Right now our application configuration resides in the <code>main</code> function:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> runServer port databaseConfig
  <span class="kw">where</span>
    port <span class="fu">=</span> <span class="dv">4000</span>
    databaseConfig <span class="fu">=</span> { user<span class="fu">:</span> <span class="st">&quot;abhinav&quot;</span>
                     , password<span class="fu">:</span> <span class="st">&quot;&quot;</span>
                     , host<span class="fu">:</span> <span class="st">&quot;localhost&quot;</span>
                     , port<span class="fu">:</span> <span class="dv">5432</span>
                     , database<span class="fu">:</span> <span class="st">&quot;simple_service&quot;</span>
                     , max<span class="fu">:</span> <span class="dv">10</span>
                     , idleTimeoutMillis<span class="fu">:</span> <span class="dv">1000</span>
                     }</code></pre></div>


<p>We are going to extract it out of the code and read it from the environment variables using the <a href="https://pursuit.purescript.org/packages/purescript-config" target="_blank" rel="noopener"><code>purescript-config</code></a> package. First, we install the required packages using <a href="http://bower.io" target="_blank" rel="noopener">bower</a>.</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">bower</span> install --save purescript-node-process purescript-config</code></pre></div>


<p>Now, we write the following code in the <code>src/SimpleService/Config.purs</code> file:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">SimpleService.Config</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Data.Config</span>
<span class="kw">import </span><span class="dt">Prelude</span>

<span class="kw">import </span><span class="dt">Control.Monad.Eff</span> (<span class="dt">Eff</span>)
<span class="kw">import </span><span class="dt">Data.Config.Node</span> (fromEnv)
<span class="kw">import </span><span class="dt">Data.Either</span> (<span class="dt">Either</span>)
<span class="kw">import </span><span class="dt">Data.Set</span> (<span class="dt">Set</span>)
<span class="kw">import </span><span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span>
<span class="kw">import </span><span class="dt">Node.Process</span> (<span class="dt">PROCESS</span>)

<span class="kw">type</span> <span class="dt">ServerConfig</span> <span class="fu">=</span>
  {<span class="ot"> port           ::</span> <span class="dt">Int</span>
  ,<span class="ot"> databaseConfig ::</span> <span class="dt">PG.PoolConfiguration</span>
  }

<span class="ot">databaseConfig ::</span> <span class="dt">Config</span> {<span class="ot">name ::</span> <span class="dt">String</span>} <span class="dt">PG.PoolConfiguration</span>
databaseConfig <span class="fu">=</span>
  { user<span class="fu">:</span> _, password<span class="fu">:</span> _, host<span class="fu">:</span> _, port<span class="fu">:</span> _, database<span class="fu">:</span> _, max<span class="fu">:</span> _, idleTimeoutMillis<span class="fu">:</span> _ }
  <span class="fu">&lt;$&gt;</span> string {name<span class="fu">:</span> <span class="st">&quot;user&quot;</span>}
  <span class="fu">&lt;*&gt;</span> string {name<span class="fu">:</span> <span class="st">&quot;password&quot;</span>}
  <span class="fu">&lt;*&gt;</span> string {name<span class="fu">:</span> <span class="st">&quot;host&quot;</span>}
  <span class="fu">&lt;*&gt;</span> int    {name<span class="fu">:</span> <span class="st">&quot;port&quot;</span>}
  <span class="fu">&lt;*&gt;</span> string {name<span class="fu">:</span> <span class="st">&quot;database&quot;</span>}
  <span class="fu">&lt;*&gt;</span> int    {name<span class="fu">:</span> <span class="st">&quot;pool_size&quot;</span>}
  <span class="fu">&lt;*&gt;</span> int    {name<span class="fu">:</span> <span class="st">&quot;idle_conn_timeout_millis&quot;</span>}

<span class="ot">portConfig ::</span> <span class="dt">Config</span> {<span class="ot">name ::</span> <span class="dt">String</span>} <span class="dt">Int</span>
portConfig <span class="fu">=</span> int {name<span class="fu">:</span> <span class="st">&quot;port&quot;</span>}

<span class="ot">serverConfig ::</span> <span class="dt">Config</span> {<span class="ot">name ::</span> <span class="dt">String</span>} <span class="dt">ServerConfig</span>
serverConfig <span class="fu">=</span>
  { port<span class="fu">:</span> _, databaseConfig<span class="fu">:</span> _}
  <span class="fu">&lt;$&gt;</span> portConfig
  <span class="fu">&lt;*&gt;</span> prefix {name<span class="fu">:</span> <span class="st">&quot;db&quot;</span>} databaseConfig

<span class="ot">readServerConfig ::</span> forall eff<span class="fu">.</span>
                    <span class="dt">Eff</span> (<span class="ot">process ::</span> <span class="dt">PROCESS</span> <span class="fu">|</span> eff) (<span class="dt">Either</span> (<span class="dt">Set</span> <span class="dt">String</span>) <span class="dt">ServerConfig</span>)
readServerConfig <span class="fu">=</span> fromEnv <span class="st">&quot;SS&quot;</span> serverConfig</code></pre></div>


<p>We use the applicative DSL provided in <code>Data.Config</code> module to build a description of our configuration. This description contains the keys and types of the configuration, for consumption by various interpreters. Then we use the <code>fromEnv</code> interpreter to read the config from the environment variables derived from the <code>name</code> fields in the records in the description in the <code>readServerConfig</code> function. We also write a bash script to set those environment variables in the development environment in the <code>setenv.sh</code> file:</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="bu">export</span> <span class="va">SS_PORT=</span>4000
<span class="bu">export</span> <span class="va">SS_DB_USER=</span><span class="st">&quot;abhinav&quot;</span>
<span class="bu">export</span> <span class="va">SS_DB_PASSWORD=</span><span class="st">&quot;&quot;</span>
<span class="bu">export</span> <span class="va">SS_DB_HOST=</span><span class="st">&quot;localhost&quot;</span>
<span class="bu">export</span> <span class="va">SS_DB_PORT=</span>5432
<span class="bu">export</span> <span class="va">SS_DB_DATABASE=</span><span class="st">&quot;simple_service&quot;</span>
<span class="bu">export</span> <span class="va">SS_DB_POOL_SIZE=</span>10
<span class="bu">export</span> <span class="va">SS_DB_IDLE_CONN_TIMEOUT_MILLIS=</span>1000</code></pre></div>


<p>Now we rewrite our <code>src/Main.purs</code> file to use the <code>readServerConfig</code> function:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Prelude</span>

<span class="kw">import </span><span class="dt">Control.Monad.Eff</span> (<span class="dt">Eff</span>)
<span class="kw">import </span><span class="dt">Control.Monad.Eff.Console</span> (<span class="dt">CONSOLE</span>, log)
<span class="kw">import </span><span class="dt">Data.Either</span> (<span class="dt">Either</span>(..))
<span class="kw">import </span><span class="dt">Data.Set</span> (toUnfoldable)
<span class="kw">import </span><span class="dt">Data.String</span> (joinWith)
<span class="kw">import </span><span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span>
<span class="kw">import </span><span class="dt">Node.Express.Types</span> (<span class="dt">EXPRESS</span>)
<span class="kw">import </span><span class="dt">Node.Process</span> (<span class="dt">PROCESS</span>)
<span class="kw">import </span><span class="dt">Node.Process</span> <span class="kw">as</span> <span class="dt">Process</span>
<span class="kw">import </span><span class="dt">SimpleService.Config</span> (readServerConfig)
<span class="kw">import </span><span class="dt">SimpleService.Server</span> (runServer)

<span class="ot">main ::</span> forall eff<span class="fu">.</span> <span class="dt">Eff</span> (<span class="ot"> console ::</span> <span class="dt">CONSOLE</span>
                        ,<span class="ot"> express ::</span> <span class="dt">EXPRESS</span>
                        ,<span class="ot"> postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span>
                        ,<span class="ot"> process ::</span> <span class="dt">PROCESS</span>
                        <span class="fu">|</span> eff ) <span class="dt">Unit</span>
main <span class="fu">=</span> readServerConfig <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
  <span class="dt">Left</span> missingKeys <span class="ot">-&gt;</span> <span class="kw">do</span>
    log <span class="fu">$</span> <span class="st">&quot;Unable to start. Missing Env keys: &quot;</span> <span class="fu">&lt;&gt;</span> joinWith <span class="st">&quot;, &quot;</span> (toUnfoldable missingKeys)
    Process.exit <span class="dv">1</span>
  <span class="dt">Right</span> { port, databaseConfig } <span class="ot">-&gt;</span> runServer port databaseConfig</code></pre></div>


<p>If <code>readServerConfig</code> fails, we print the missing keys to the console and exit the process. Else we run the server with the read config.</p>


<p>To test this, we stop the server we ran in the beginning, source the config, and run it again:</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">pulp</span> --watch run
<span class="ex">*</span> Building project in /Users/abhinav/ps-simple-rest-service
<span class="ex">*</span> Build successful.
<span class="ex">Server</span> listening on :4000
^<span class="ex">C</span>
$ <span class="bu">source</span> setenv.sh
$ <span class="ex">pulp</span> --watch run
<span class="ex">*</span> Building project in /Users/abhinav/ps-simple-rest-service
<span class="ex">*</span> Build successful.
<span class="ex">Server</span> listening on :4000</code></pre></div>


<p>It works! We test the failure case by opening another terminal which does not have the environment variables set:</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">pulp</span> run
<span class="ex">*</span> Building project in /Users/abhinav/ps-simple-rest-service
<span class="ex">*</span> Build successful.
<span class="ex">Unable</span> to start. Missing Env keys: SS_DB_DATABASE, SS_DB_HOST, SS_DB_IDLE_CONN_TIMEOUT_MILLIS, SS_DB_PASSWORD, SS_DB_POOL_SIZE, SS_DB_PORT, SS_DB_USER, SS_PORT
<span class="ex">*</span> ERROR: Subcommand terminated with exit code 1</code></pre></div>


<p>Up next, we add logging to our application.</p>


<h2 id="logging">Logging<a href="#logging" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>


<p>For logging, we use the <a href="https://pursuit.purescript.org/packages/purescript-logging" target="_blank" rel="noopener"><code>purescript-logging</code></a> package. We write a logger which logs to <code>stdout</code>; in the <code>src/SimpleService/Logger.purs</code> file:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">SimpleService.Logger</span>
  ( debug
  , info
  , warn
  , error
  ) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Prelude</span>

<span class="kw">import </span><span class="dt">Control.Logger</span> <span class="kw">as</span> <span class="dt">L</span>
<span class="kw">import </span><span class="dt">Control.Monad.Eff.Class</span> (class <span class="dt">MonadEff</span>, liftEff)
<span class="kw">import </span><span class="dt">Control.Monad.Eff.Console</span> <span class="kw">as</span> <span class="dt">C</span>
<span class="kw">import </span><span class="dt">Control.Monad.Eff.Now</span> (<span class="dt">NOW</span>, now)
<span class="kw">import </span><span class="dt">Data.DateTime.Instant</span> (toDateTime)
<span class="kw">import </span><span class="dt">Data.Either</span> (fromRight)
<span class="kw">import </span><span class="dt">Data.Formatter.DateTime</span> (<span class="dt">Formatter</span>, format, parseFormatString)
<span class="kw">import </span><span class="dt">Data.Generic.Rep</span> (class <span class="dt">Generic</span>)
<span class="kw">import </span><span class="dt">Data.Generic.Rep.Show</span> (genericShow)
<span class="kw">import </span><span class="dt">Data.String</span> (toUpper)
<span class="kw">import </span><span class="dt">Partial.Unsafe</span> (unsafePartial)

<span class="kw">data</span> <span class="dt">Level</span> <span class="fu">=</span> <span class="dt">Debug</span> <span class="fu">|</span> <span class="dt">Info</span> <span class="fu">|</span> <span class="dt">Warn</span> <span class="fu">|</span> <span class="dt">Error</span>

derive <span class="kw">instance</span><span class="ot"> eqLevel ::</span> <span class="dt">Eq</span> <span class="dt">Level</span>
derive <span class="kw">instance</span><span class="ot"> ordLevel ::</span> <span class="dt">Ord</span> <span class="dt">Level</span>
derive <span class="kw">instance</span><span class="ot"> genericLevel ::</span> <span class="dt">Generic</span> <span class="dt">Level</span> _

<span class="kw">instance</span><span class="ot"> showLevel ::</span> <span class="dt">Show</span> <span class="dt">Level</span> <span class="kw">where</span>
  show <span class="fu">=</span> toUpper <span class="fu">&lt;&lt;&lt;</span> genericShow

<span class="kw">type</span> <span class="dt">Entry</span> <span class="fu">=</span>
  {<span class="ot"> level   ::</span> <span class="dt">Level</span>
  ,<span class="ot"> message ::</span> <span class="dt">String</span>
  }

<span class="ot">dtFormatter ::</span> <span class="dt">Formatter</span>
dtFormatter <span class="fu">=</span> unsafePartial <span class="fu">$</span> fromRight <span class="fu">$</span> parseFormatString <span class="st">&quot;YYYY-MM-DD HH:mm:ss.SSS&quot;</span>

<span class="ot">logger ::</span> forall m e<span class="fu">.</span> (
          <span class="dt">MonadEff</span> (<span class="ot">console ::</span> <span class="dt">C.CONSOLE</span>,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> e) m) <span class="ot">=&gt;</span> <span class="dt">L.Logger</span> m <span class="dt">Entry</span>
logger <span class="fu">=</span> <span class="dt">L.Logger</span> <span class="fu">$</span> \{ level, message } <span class="ot">-&gt;</span> liftEff <span class="kw">do</span>
  time <span class="ot">&lt;-</span> toDateTime <span class="fu">&lt;$&gt;</span> now
  C.log <span class="fu">$</span> <span class="st">&quot;[&quot;</span> <span class="fu">&lt;&gt;</span> format dtFormatter time <span class="fu">&lt;&gt;</span> <span class="st">&quot;] &quot;</span> <span class="fu">&lt;&gt;</span> show level <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> message

log<span class="ot"> ::</span> forall m e<span class="fu">.</span>
        <span class="dt">MonadEff</span> (<span class="ot">console ::</span> <span class="dt">C.CONSOLE</span> ,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> e) m
     <span class="ot">=&gt;</span> <span class="dt">Entry</span> <span class="ot">-&gt;</span> m <span class="dt">Unit</span>
log entry<span class="fu">@</span>{level} <span class="fu">=</span> L.log (L.cfilter (\e <span class="ot">-&gt;</span> e<span class="fu">.</span>level <span class="fu">==</span> level) logger) entry

<span class="ot">debug ::</span> forall m e<span class="fu">.</span>
         <span class="dt">MonadEff</span> (<span class="ot">console ::</span> <span class="dt">C.CONSOLE</span> ,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> e) m <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> m <span class="dt">Unit</span>
debug message <span class="fu">=</span> log { level<span class="fu">:</span> <span class="dt">Debug</span>, message }

<span class="ot">info ::</span> forall m e<span class="fu">.</span>
        <span class="dt">MonadEff</span> (<span class="ot">console ::</span> <span class="dt">C.CONSOLE</span> ,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> e) m <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> m <span class="dt">Unit</span>
info message <span class="fu">=</span> log { level<span class="fu">:</span> <span class="dt">Info</span>, message }

<span class="ot">warn ::</span> forall m e<span class="fu">.</span>
        <span class="dt">MonadEff</span> (<span class="ot">console ::</span> <span class="dt">C.CONSOLE</span> ,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> e) m <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> m <span class="dt">Unit</span>
warn message <span class="fu">=</span> log { level<span class="fu">:</span> <span class="dt">Warn</span>, message }

error<span class="ot"> ::</span> forall m e<span class="fu">.</span>
         <span class="dt">MonadEff</span> (<span class="ot">console ::</span> <span class="dt">C.CONSOLE</span> ,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> e) m <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> m <span class="dt">Unit</span>
error message <span class="fu">=</span> log { level<span class="fu">:</span> <span class="dt">Error</span>, message }</code></pre></div>


<p><code>purescript-logging</code> lets us define our own logging levels and loggers. We define four log levels, and a log entry type with the log level and the message. Then we write the logger which will print the log entry to <code>stdout</code> along with the current time as a well formatted string. We define convenience functions for each log level.</p>


<p>Before we proceed, let’s install the required dependencies.</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">bower</span> install --save purescript-logging purescript-now purescript-formatters</code></pre></div>


<p>Now we add a request logger middleware to our server in the <code>src/SimpleService/Server.purs</code> file:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- previous code</span>
<span class="kw">import </span><span class="dt">Control.Monad.Eff.Console</span> (<span class="dt">CONSOLE</span>)
<span class="kw">import </span><span class="dt">Control.Monad.Eff.Now</span> (<span class="dt">NOW</span>)
<span class="kw">import </span><span class="dt">Data.Maybe</span> (maybe)
<span class="kw">import </span><span class="dt">Data.String</span> (toUpper)
<span class="kw">import </span><span class="dt">Node.Express.App</span> (<span class="dt">App</span>, all, delete, get, http, listenHttp, post, use, useExternal, useOnError)
<span class="kw">import </span><span class="dt">Node.Express.Handler</span> (<span class="dt">Handler</span>, next)
<span class="kw">import </span><span class="dt">Node.Express.Request</span> (getMethod, getPath)
<span class="kw">import </span><span class="dt">SimpleService.Logger</span> <span class="kw">as</span> <span class="dt">Log</span>
<span class="co">-- previous code</span>

<span class="ot">requestLogger ::</span> forall eff<span class="fu">.</span> <span class="dt">Handler</span> (<span class="ot">console ::</span> <span class="dt">CONSOLE</span>,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> eff)
requestLogger <span class="fu">=</span> <span class="kw">do</span>
  method <span class="ot">&lt;-</span> getMethod
  path   <span class="ot">&lt;-</span> getPath
  Log.debug <span class="fu">$</span> <span class="st">&quot;HTTP: &quot;</span> <span class="fu">&lt;&gt;</span> maybe <span class="st">&quot;&quot;</span> id ((toUpper <span class="fu">&lt;&lt;&lt;</span> show) <span class="fu">&lt;$&gt;</span> method) <span class="fu">&lt;&gt;</span> <span class="st">&quot; &quot;</span> <span class="fu">&lt;&gt;</span> path
  next

<span class="ot">app ::</span> forall eff<span class="fu">.</span>
       <span class="dt">PG.Pool</span>
    <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span>,<span class="ot"> console ::</span> <span class="dt">CONSOLE</span>,<span class="ot"> now ::</span> <span class="dt">NOW</span> <span class="fu">|</span> eff)
app pool <span class="fu">=</span> <span class="kw">do</span>
  useExternal jsonBodyParser
  use requestLogger
  <span class="co">-- previous code</span></code></pre></div>


<p>We also convert all our previous logging statements which used <code>Console.log</code> to use <code>SimpleService.Logger</code> and add logs in our handlers. We can see logging in effect by restarting the server and hitting it:</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">pulp</span> --watch run
<span class="ex">*</span> Building project in /Users/abhinav/ps-simple-rest-service
<span class="ex">*</span> Build successful.
[<span class="ex">2017-09-30</span> 16:02:41.634] INFO Server listening on :4000
[<span class="ex">2017-09-30</span> 16:02:43.494] DEBUG HTTP: PATCH /v1/user/3
[<span class="ex">2017-09-30</span> 16:02:43.517] DEBUG Updated user: 3
[<span class="ex">2017-09-30</span> 16:03:46.615] DEBUG HTTP: DELETE /v1/user/3
[<span class="ex">2017-09-30</span> 16:03:46.635] DEBUG Deleted user 3
[<span class="ex">2017-09-30</span> 16:05:03.805] DEBUG HTTP: GET /v1/users</code></pre></div>


<h2 id="conclusion">Conclusion<a href="#conclusion" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>


<p>In this tutorial we learned how to create a simple JSON REST web service written in PureScript with persistence, validation, configuration and logging. The complete code for this tutorial can be found in <a href="https://github.com/abhin4v/ps-simple-rest-service" target="_blank" rel="noopener">github</a>. This post can be discussed on <a href="https://www.reddit.com/r/purescript/comments/73gc9g/writing_a_simple_rest_service_in_purescript_part/" target="_blank" rel="noopener">r/purescript</a>.</p>


<p>If you liked this post, please <a href="https://abhinavsarkar.net/posts/ps-simple-rest-service-2/#comment-container">leave a comment</a>.</p>


<div class="author">
  <img src="https://nilenso.com/images/people/abhinav-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/abhin4v">Abhinav Sarkar</a> - check out <a href="https://abhinavsarkar.net">All posts on abhinavsarkar.net</a></i>
  </span>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Writing a Simple REST Web Service in PureScript - Part 1]]></title>
    <link href="http://blog.nilenso.com/blog/2017/09/29/writing-a-simple-rest-web-service-in-purescript-p/"/>
    
    <updated>2017-09-29T00:00:00-04:00</updated>
    <id>http://blog.nilenso.com/blog/2017/09/29/writing-a-simple-rest-web-service-in-purescript-p</id>
    
    <content type="html"><![CDATA[<div class="ert">
23 minute read
</div>


<p>At <a href="https://nilenso.com" target="_blank" rel="noopener">Nilenso</a>, we’ve been working with a client who has chosen <a href="http://purescript.org" target="_blank" rel="noopener">PureScript</a> as their primary programming language. Since I couldn’t find any canonical documentation on writing a web service in PureScript, I thought I’d jot down the approach that we took.</p>


<p>The aim of this two-part tutorial is to create a simple JSON <a href="https://en.wikipedia.org/wiki/REST" target="_blank" rel="noopener">REST</a> web service written in PureScript, to run on a node.js server. This assumes that you have basic proficiency with PureScript. We have the following requirements:</p>


<ol type="1">
<li>persisting users into a Postgres database.</li>
<li>API endpoints for creating, updating, getting, listing and deleting users.</li>
<li>validation of API requests.</li>
<li>reading the server and database configs from environment variables.</li>
<li>logging HTTP requests and debugging info.</li>
</ol>


<p>In this part we’ll work on setting up the project and on the first two requirements. In the <a href="https://abhinavsarkar.net/posts/ps-simple-rest-service-2/">next</a> part we’ll work on the rest of the requirements.</p>


<!--more-->


<p><nav id="toc" class="right-toc"><h3>Contents</h3><ol><li><a href="#setting-up">Setting Up</a></li><li><a href="#types-first">Types First</a></li><li><a href="#persisting-it">Persisting It</a></li><li><a href="#serving-it">Serving It</a><ol><li><a href="#getting-a-user">Getting a User</a></li><li><a href="#deleting-a-user">Deleting a User</a></li><li><a href="#creating-a-user">Creating a User</a></li><li><a href="#updating-a-user">Updating a User</a></li><li><a href="#listing-all-users">Listing all Users</a></li></ol></li><li><a href="#conclusion">Conclusion</a></li></ol></nav></p>

<h2 id="setting-up">Setting Up<a href="#setting-up" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>


<p>We start with installing PureScript and the required tools. This assumes that we have <a href="https://nodejs.org" target="_blank" rel="noopener">node</a> and <a href="https://www.npmjs.com" target="_blank" rel="noopener">npm</a> installed on our machine.</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="fu">mkdir</span> -p ~/.local/
$ <span class="ex">npm</span> install -g purescript pulp bower --prefix ~/.local/</code></pre></div>


<p><a href="https://github.com/purescript-contrib/pulp" target="_blank" rel="noopener">Pulp</a> is a build tool for PureScript projects and <a href="http://bower.io" target="_blank" rel="noopener">bower</a> is a package manager used to get PureScript libraries. We’ll have to add <code>~/.local/bin</code> in our <code>$PATH</code> (if it is not already added) to access the binaries installed.</p>


<p>Let’s create a directory for our project and make Pulp initialize it:</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="fu">mkdir</span> ps-simple-rest-service
$ <span class="bu">cd</span> ps-simple-rest-service
$ <span class="ex">pulp</span> init
$ <span class="fu">ls</span>
<span class="ex">bower.json</span>  bower_components  src  test
$ <span class="fu">cat</span> bower.json
<span class="kw">{</span>
  <span class="st">&quot;name&quot;</span>: <span class="st">&quot;ps-simple-rest-service&quot;</span>,
  <span class="st">&quot;ignore&quot;</span>:<span class="bu"> [</span>
    <span class="st">&quot;**/.*&quot;</span>,
    <span class="st">&quot;node_modules&quot;</span>,
    <span class="st">&quot;bower_components&quot;</span>,
    <span class="st">&quot;output&quot;</span>
  ],
  <span class="st">&quot;dependencies&quot;</span>: {
    <span class="st">&quot;purescript-prelude&quot;</span>: <span class="st">&quot;^3.1.0&quot;</span>,
    <span class="st">&quot;purescript-console&quot;</span>: <span class="st">&quot;^3.0.0&quot;</span>
  },
  <span class="st">&quot;devDependencies&quot;</span>: {
    <span class="st">&quot;purescript-psci-support&quot;</span>: <span class="st">&quot;^3.0.0&quot;</span>
  }
}
$ ls bower_components
purescript-console  purescript-eff  purescript-prelude purescript-psci-support</code></pre></div>


<p>Pulp creates the basic project structure for us. <code>src</code> directory will contain the source while the <code>test</code> directory will contain the tests. <code>bower.json</code> contains the PureScript libraries as dependencies which are downloaded and installed in the <code>bower_components</code> directory.</p>


<h2 id="types-first">Types First<a href="#types-first" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>


<p>First, we create the types needed in <code>src/SimpleService/Types.purs</code>:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">SimpleService.Types</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Prelude</span>

<span class="kw">import </span><span class="dt">Data.Foreign.Class</span> (class <span class="dt">Decode</span>, class <span class="dt">Encode</span>)
<span class="kw">import </span><span class="dt">Data.Foreign.Generic</span> (defaultOptions, genericDecode, genericEncode)
<span class="kw">import </span><span class="dt">Data.Generic.Rep</span> (class <span class="dt">Generic</span>)
<span class="kw">import </span><span class="dt">Data.Generic.Rep.Show</span> (genericShow)

<span class="kw">type</span> <span class="dt">UserID</span> <span class="fu">=</span> <span class="dt">Int</span>

<span class="kw">newtype</span> <span class="dt">User</span> <span class="fu">=</span> <span class="dt">User</span>
  {<span class="ot"> id   ::</span> <span class="dt">UserID</span>
  ,<span class="ot"> name ::</span> <span class="dt">String</span>
  }

derive <span class="kw">instance</span><span class="ot"> genericUser ::</span> <span class="dt">Generic</span> <span class="dt">User</span> _

<span class="kw">instance</span><span class="ot"> showUser ::</span> <span class="dt">Show</span> <span class="dt">User</span> <span class="kw">where</span>
  show <span class="fu">=</span> genericShow

<span class="kw">instance</span><span class="ot"> decodeUser ::</span> <span class="dt">Decode</span> <span class="dt">User</span> <span class="kw">where</span>
  decode <span class="fu">=</span> genericDecode <span class="fu">$</span> defaultOptions { unwrapSingleConstructors <span class="fu">=</span> true }

<span class="kw">instance</span><span class="ot"> encodeUser ::</span> <span class="dt">Encode</span> <span class="dt">User</span> <span class="kw">where</span>
  encode <span class="fu">=</span> genericEncode <span class="fu">$</span> defaultOptions { unwrapSingleConstructors <span class="fu">=</span> true }</code></pre></div>


<p>We are using the generic support for PureScript types from the <a href="https://pursuit.purescript.org/packages/purescript-generics-rep" target="_blank" rel="noopener"><code>purescript-generics-rep</code></a> and <a href="https://pursuit.purescript.org/packages/purescript-foreign-generic" target="_blank" rel="noopener"><code>purescript-foreign-generic</code></a> libraries to encode and decode the <code>User</code> type to JSON. We install the library by running the following command:</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">bower</span> install purescript-foreign-generic --save</code></pre></div>


<p>Now we can load up the module in the PureScript REPL and try out the JSON conversion features:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> pulp repl
<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">SimpleService.Types</span>
<span class="fu">&gt;</span> user <span class="fu">=</span> <span class="dt">User</span> { id<span class="fu">:</span> <span class="dv">1</span>, name<span class="fu">:</span> <span class="st">&quot;Abhinav&quot;</span>}
<span class="fu">&gt;</span> user
(<span class="dt">User</span> { id<span class="fu">:</span> <span class="dv">1</span>, name<span class="fu">:</span> <span class="st">&quot;Abhinav&quot;</span> })

<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Data.Foreign.Generic</span>
<span class="fu">&gt;</span> userJSON <span class="fu">=</span> encodeJSON user
<span class="fu">&gt;</span> userJSON
<span class="st">&quot;{\&quot;name\&quot;:\&quot;Abhinav\&quot;,\&quot;id\&quot;:1}&quot;</span>

<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Data.Foreign</span>
<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Except.Trans</span>
<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Data.Identity</span>
<span class="fu">&gt;</span> dUser <span class="fu">=</span> decodeJSON<span class="ot"> userJSON ::</span> <span class="dt">F</span> <span class="dt">User</span>
<span class="fu">&gt;</span> eUser <span class="fu">=</span> <span class="kw">let</span> (<span class="dt">Identity</span> eUser) <span class="fu">=</span> runExceptT <span class="fu">$</span> dUser <span class="kw">in</span> eUser
<span class="fu">&gt;</span> eUser
(<span class="dt">Right</span> (<span class="dt">User</span> { id<span class="fu">:</span> <span class="dv">1</span>, name<span class="fu">:</span> <span class="st">&quot;Abhinav&quot;</span> }))</code></pre></div>


<p>We use <code>encodeJSON</code> and <code>decodeJSON</code> functions from the <a href="https://pursuit.purescript.org/packages/purescript-foreign-generic/4.3.0/docs/Data.Foreign.Generic" target="_blank" rel="noopener"><code>Data.Foreign.Generic</code></a> module to encode and decode the <code>User</code> instance to JSON. The return type of <code>decodeJSON</code> is a bit complicated as it needs to return the parsing errors too. In this case, the decoding returns no errors and we get back a <code>Right</code> with the correctly parsed <code>User</code> instance.</p>


<h2 id="persisting-it">Persisting It<a href="#persisting-it" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>


<p>Next, we add the support for saving a <code>User</code> instance to a Postgres DB. First, we install the required libraries using bower and npm: <a href="https://github.com/brianc/node-postgres" target="_blank" rel="noopener"><code>pg</code></a> for Javascript bindings to call Postgres, <a href="https://pursuit.purescript.org/packages/purescript-aff" target="_blank" rel="noopener"><code>purescript-aff</code></a> for asynchronous processing and <a href="https://pursuit.purescript.org/packages/purescript-postgresql-client" target="_blank" rel="noopener"><code>purescript-postgresql-client</code></a> for PureScript wrapper over <code>pg</code>:</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">npm</span> init -y
$ <span class="ex">npm</span> install pg@6.4.0 --save
$ <span class="ex">bower</span> install purescript-aff --save
$ <span class="ex">bower</span> install purescript-postgresql-client --save</code></pre></div>


<p>Before writing the code, we create the database and the <code>users</code> table using the command-line Postgres client:</p>


<pre><code>$ psql postgres
psql (9.5.4)
Type &quot;help&quot; for help.

postgres=# create database simple_service;
CREATE DATABASE
postgres=# \c simple_service
You are now connected to database &quot;simple_service&quot; as user &quot;abhinav&quot;.
simple_service=# create table users (id int primary key, name varchar(100) not null);
CREATE TABLE
simple_service=# \d users
            Table &quot;public.users&quot;
 Column |          Type          | Modifiers
--------+------------------------+-----------
 id     | integer                | not null
 name   | character varying(100) | not null
Indexes:
    &quot;users_pkey&quot; PRIMARY KEY, btree (id)</code></pre>


<p>Now we add support for converting a <code>User</code> instance to-and-from an SQL row by adding the following code in the <code>src/SimpleService/Types.purs</code> file:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.Array</span> <span class="kw">as</span> <span class="dt">Array</span>
<span class="kw">import </span><span class="dt">Data.Either</span> (<span class="dt">Either</span>(..))
<span class="kw">import </span><span class="dt">Database.PostgreSQL</span> (class <span class="dt">FromSQLRow</span>, class <span class="dt">ToSQLRow</span>, fromSQLValue, toSQLValue)

<span class="co">-- code written earlier</span>

<span class="kw">instance</span><span class="ot"> userFromSQLRow ::</span> <span class="dt">FromSQLRow</span> <span class="dt">User</span> <span class="kw">where</span>
  fromSQLRow [id, name] <span class="fu">=</span>
    <span class="dt">User</span> <span class="fu">&lt;$&gt;</span> ({ id<span class="fu">:</span> _, name<span class="fu">:</span> _} <span class="fu">&lt;$&gt;</span> fromSQLValue id <span class="fu">&lt;*&gt;</span> fromSQLValue name)

  fromSQLRow xs <span class="fu">=</span> <span class="dt">Left</span> <span class="fu">$</span> <span class="st">&quot;Row has &quot;</span> <span class="fu">&lt;&gt;</span> show n <span class="fu">&lt;&gt;</span> <span class="st">&quot; fields, expecting 2.&quot;</span>
    <span class="kw">where</span> n <span class="fu">=</span> Array.length xs

<span class="kw">instance</span><span class="ot"> userToSQLRow ::</span> <span class="dt">ToSQLRow</span> <span class="dt">User</span> <span class="kw">where</span>
  toSQLRow (<span class="dt">User</span> {id, name}) <span class="fu">=</span> [toSQLValue id, toSQLValue name]</code></pre></div>


<p>We can try out the persistence support in the REPL:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> pulp repl
<span class="dt">PSCi</span>, version <span class="fl">0.11</span><span class="fu">.</span><span class="dv">6</span>
<span class="dt">Type</span> <span class="fu">:?</span> for help

<span class="kw">import </span><span class="dt">Prelude</span>
<span class="fu">&gt;</span>
<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">SimpleService.Types</span>
<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Aff</span> (launchAff, liftEff')
<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span>
<span class="fu">&gt;</span> user <span class="fu">=</span> <span class="dt">User</span> { id<span class="fu">:</span> <span class="dv">1</span>, name<span class="fu">:</span> <span class="st">&quot;Abhinav&quot;</span> }
<span class="fu">&gt;</span> databaseConfig <span class="fu">=</span> {user<span class="fu">:</span> <span class="st">&quot;abhinav&quot;</span>, password<span class="fu">:</span> <span class="st">&quot;&quot;</span>, host<span class="fu">:</span> <span class="st">&quot;localhost&quot;</span>, port<span class="fu">:</span> <span class="dv">5432</span>, database<span class="fu">:</span> <span class="st">&quot;simple_service&quot;</span>, max<span class="fu">:</span> <span class="dv">10</span>, idleTimeoutMillis<span class="fu">:</span> <span class="dv">1000</span>}

<span class="fu">&gt;</span> <span class="fu">:</span>paste
… void <span class="fu">$</span> launchAff <span class="kw">do</span>
…   pool <span class="ot">&lt;-</span> PG.newPool databaseConfig
…   PG.withConnection pool <span class="fu">$</span> \conn <span class="ot">-&gt;</span> <span class="kw">do</span>
…     PG.execute conn (<span class="dt">PG.Query</span> <span class="st">&quot;insert into users (id, name) values ($1, $2)&quot;</span>) user
…
unit

<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Data.Foldable</span> (for_)
<span class="fu">&gt;</span> <span class="kw">import </span><span class="dt">Control.Monad.Eff.Console</span> (logShow)
<span class="fu">&gt;</span> <span class="fu">:</span>paste
… void <span class="fu">$</span> launchAff <span class="kw">do</span>
…   pool <span class="ot">&lt;-</span> PG.newPool databaseConfig
…   PG.withConnection pool <span class="fu">$</span> \conn <span class="ot">-&gt;</span> <span class="kw">do</span>
…<span class="ot">     users ::</span> <span class="dt">Array</span> <span class="dt">User</span> <span class="ot">&lt;-</span> PG.query conn (<span class="dt">PG.Query</span> <span class="st">&quot;select id, name from users where id = $1&quot;</span>) (<span class="dt">PG.Row1</span> <span class="dv">1</span>)
…     liftEff' <span class="fu">$</span> void <span class="fu">$</span> for_ users logShow
…
unit
(<span class="dt">User</span> { id<span class="fu">:</span> <span class="dv">1</span>, name<span class="fu">:</span> <span class="st">&quot;Abhinav&quot;</span> })</code></pre></div>


<p>We create the <code>databaseConfig</code> record with the configs needed to connect to the database. Using the recond, we create a new Postgres connection pool (<code>PG.newPool</code>) and get a connection from it (<code>PG.withConnection</code>). We call <code>PG.execute</code> with the connection, the SQL insert query for the users table and the <code>User</code> instance, to insert the user into the table. All of this is done inside <a href="https://pursuit.purescript.org/packages/purescript-aff/3.1.0/docs/Control.Monad.Aff#v:launchAff" target="_blank" rel="noopener"><code>launchAff</code></a> which takes care of sequencing the callbacks correctly to make the asynchronous code look synchronous.</p>


<p>Similarly, in the second part, we query the table using <code>PG.query</code> function by calling it with a connection, the SQL select query and the <code>User</code> ID as the query parameter. It returns an <code>Array</code> of users which we log to the console using the <code>logShow</code> function.</p>


<p>We use this experiment to write the persistence related code in the <code>src/SimpleService/Persistence.purs</code> file:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">SimpleService.Persistence</span>
  ( insertUser
  , findUser
  , updateUser
  , deleteUser
  , listUsers
  ) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Prelude</span>

<span class="kw">import </span><span class="dt">Control.Monad.Aff</span> (<span class="dt">Aff</span>)
<span class="kw">import </span><span class="dt">Data.Array</span> <span class="kw">as</span> <span class="dt">Array</span>
<span class="kw">import </span><span class="dt">Data.Maybe</span> (<span class="dt">Maybe</span>)
<span class="kw">import </span><span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span>
<span class="kw">import </span><span class="dt">SimpleService.Types</span> (<span class="dt">User</span>(..), <span class="dt">UserID</span>)

<span class="ot">insertUserQuery ::</span> <span class="dt">String</span>
insertUserQuery <span class="fu">=</span> <span class="st">&quot;insert into users (id, name) values ($1, $2)&quot;</span>

<span class="ot">findUserQuery ::</span> <span class="dt">String</span>
findUserQuery <span class="fu">=</span> <span class="st">&quot;select id, name from users where id = $1&quot;</span>

<span class="ot">updateUserQuery ::</span> <span class="dt">String</span>
updateUserQuery <span class="fu">=</span> <span class="st">&quot;update users set name = $1 where id = $2&quot;</span>

<span class="ot">deleteUserQuery ::</span> <span class="dt">String</span>
deleteUserQuery <span class="fu">=</span> <span class="st">&quot;delete from users where id = $1&quot;</span>

<span class="ot">listUsersQuery ::</span> <span class="dt">String</span>
listUsersQuery <span class="fu">=</span> <span class="st">&quot;select id, name from users&quot;</span>

<span class="ot">insertUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Connection</span> <span class="ot">-&gt;</span> <span class="dt">User</span>
           <span class="ot">-&gt;</span> <span class="dt">Aff</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff) <span class="dt">Unit</span>
insertUser conn user <span class="fu">=</span>
  PG.execute conn (<span class="dt">PG.Query</span> insertUserQuery) user

<span class="ot">findUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Connection</span> <span class="ot">-&gt;</span> <span class="dt">UserID</span>
         <span class="ot">-&gt;</span> <span class="dt">Aff</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff) (<span class="dt">Maybe</span> <span class="dt">User</span>)
findUser conn userID <span class="fu">=</span>
  map Array.head <span class="fu">$</span> PG.query conn (<span class="dt">PG.Query</span> findUserQuery) (<span class="dt">PG.Row1</span> userID)

<span class="ot">updateUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Connection</span> <span class="ot">-&gt;</span> <span class="dt">User</span>
           <span class="ot">-&gt;</span> <span class="dt">Aff</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff) <span class="dt">Unit</span>
updateUser conn (<span class="dt">User</span> {id, name}) <span class="fu">=</span>
  PG.execute conn (<span class="dt">PG.Query</span> updateUserQuery) (<span class="dt">PG.Row2</span> name id)

<span class="ot">deleteUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Connection</span> <span class="ot">-&gt;</span> <span class="dt">UserID</span>
           <span class="ot">-&gt;</span> <span class="dt">Aff</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff) <span class="dt">Unit</span>
deleteUser conn userID <span class="fu">=</span>
  PG.execute conn (<span class="dt">PG.Query</span> deleteUserQuery) (<span class="dt">PG.Row1</span> userID)

<span class="ot">listUsers ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Connection</span>
          <span class="ot">-&gt;</span> <span class="dt">Aff</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff) (<span class="dt">Array</span> <span class="dt">User</span>)
listUsers conn <span class="fu">=</span>
  PG.query conn (<span class="dt">PG.Query</span> listUsersQuery) <span class="dt">PG.Row0</span></code></pre></div>


<h2 id="serving-it">Serving It<a href="#serving-it" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>


<p>We can now write a simple HTTP API over the persistence layer using <a href="https://expressjs.com" target="_blank" rel="noopener">Express</a> to provide CRUD functionality for users. Let’s install Express and <a href="https://pursuit.purescript.org/packages/purescript-express" target="_blank" rel="noopener">purescript-express</a>, the PureScript wrapper over it:</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">npm</span> install express --save
$ <span class="ex">bower</span> install purescript-express --save</code></pre></div>


<h3 id="getting-a-user">Getting a User<a href="#getting-a-user" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>


<p>We do this top-down. First, we change <code>src/Main.purs</code> to run the HTTP server by providing the server port and database configuration:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Prelude</span>

<span class="kw">import </span><span class="dt">Control.Monad.Eff</span> (<span class="dt">Eff</span>)
<span class="kw">import </span><span class="dt">Control.Monad.Eff.Console</span> (<span class="dt">CONSOLE</span>)
<span class="kw">import </span><span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span>
<span class="kw">import </span><span class="dt">Node.Express.Types</span> (<span class="dt">EXPRESS</span>)
<span class="kw">import </span><span class="dt">SimpleService.Server</span> (runServer)

<span class="ot">main ::</span> forall eff<span class="fu">.</span> <span class="dt">Eff</span> (<span class="ot"> console ::</span> <span class="dt">CONSOLE</span>
                        ,<span class="ot"> express ::</span> <span class="dt">EXPRESS</span>
                        ,<span class="ot"> postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span>
                        <span class="fu">|</span> eff) <span class="dt">Unit</span>
main <span class="fu">=</span> runServer port databaseConfig
  <span class="kw">where</span>
    port <span class="fu">=</span> <span class="dv">4000</span>
    databaseConfig <span class="fu">=</span> { user<span class="fu">:</span> <span class="st">&quot;abhinav&quot;</span>
                     , password<span class="fu">:</span> <span class="st">&quot;&quot;</span>
                     , host<span class="fu">:</span> <span class="st">&quot;localhost&quot;</span>
                     , port<span class="fu">:</span> <span class="dv">5432</span>
                     , database<span class="fu">:</span> <span class="st">&quot;simple_service&quot;</span>
                     , max<span class="fu">:</span> <span class="dv">10</span>
                     , idleTimeoutMillis<span class="fu">:</span> <span class="dv">1000</span>
                     }</code></pre></div>


<p>Next, we wire up the server routes to the handlers in <code>src/SimpleService/Server.purs</code>:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">SimpleService.Server</span> (runServer) <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Prelude</span>

<span class="kw">import </span><span class="dt">Control.Monad.Aff</span> (runAff)
<span class="kw">import </span><span class="dt">Control.Monad.Eff</span> (<span class="dt">Eff</span>)
<span class="kw">import </span><span class="dt">Control.Monad.Eff.Class</span> (liftEff)
<span class="kw">import </span><span class="dt">Control.Monad.Eff.Console</span> (<span class="dt">CONSOLE</span>, log, logShow)
<span class="kw">import </span><span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span>
<span class="kw">import </span><span class="dt">Node.Express.App</span> (<span class="dt">App</span>, get, listenHttp)
<span class="kw">import </span><span class="dt">Node.Express.Types</span> (<span class="dt">EXPRESS</span>)
<span class="kw">import </span><span class="dt">SimpleService.Handler</span> (getUser)

<span class="ot">app ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
app pool <span class="fu">=</span> <span class="kw">do</span>
  get <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> getUser pool

<span class="ot">runServer ::</span> forall eff<span class="fu">.</span>
             <span class="dt">Int</span>
          <span class="ot">-&gt;</span> <span class="dt">PG.PoolConfiguration</span>
          <span class="ot">-&gt;</span> <span class="dt">Eff</span> (<span class="ot"> express ::</span> <span class="dt">EXPRESS</span>
                 ,<span class="ot"> postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span>
                 ,<span class="ot"> console ::</span> <span class="dt">CONSOLE</span>
                 <span class="fu">|</span> eff ) <span class="dt">Unit</span>
runServer port databaseConfig <span class="fu">=</span>  void <span class="fu">$</span> runAff logShow pure <span class="kw">do</span>
  pool <span class="ot">&lt;-</span> PG.newPool databaseConfig
  <span class="kw">let</span> app' <span class="fu">=</span> app pool
  void <span class="fu">$</span> liftEff <span class="fu">$</span> listenHttp app' port \_ <span class="ot">-&gt;</span> log <span class="fu">$</span> <span class="st">&quot;Server listening on :&quot;</span> <span class="fu">&lt;&gt;</span> show port</code></pre></div>


<p><code>runServer</code> creates a PostgreSQL connection pool and passes it to the <code>app</code> function which creates the Express application, which in turn, binds it to the handler <code>getUser</code>. Then it launches the HTTP server by calling <code>listenHttp</code>.</p>


<p>Finally, we write the actual <code>getUser</code> handler in <code>src/SimpleService/Handler.purs</code>:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">SimpleService.Handler</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Prelude</span>

<span class="kw">import </span><span class="dt">Control.Monad.Aff.Class</span> (liftAff)
<span class="kw">import </span><span class="dt">Data.Foreign.Class</span> (encode)
<span class="kw">import </span><span class="dt">Data.Int</span> (fromString)
<span class="kw">import </span><span class="dt">Data.Maybe</span> (<span class="dt">Maybe</span>(..))
<span class="kw">import </span><span class="dt">Database.PostgreSQL</span> <span class="kw">as</span> <span class="dt">PG</span>
<span class="kw">import </span><span class="dt">Node.Express.Handler</span> (<span class="dt">Handler</span>)
<span class="kw">import </span><span class="dt">Node.Express.Request</span> (getRouteParam)
<span class="kw">import </span><span class="dt">Node.Express.Response</span> (end, sendJson, setStatus)
<span class="kw">import </span><span class="dt">SimpleService.Persistence</span> <span class="kw">as</span> <span class="dt">P</span>

<span class="ot">getUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
getUser pool <span class="fu">=</span> getRouteParam <span class="st">&quot;id&quot;</span> <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { error<span class="fu">:</span> <span class="st">&quot;User ID is required&quot;</span> }
  <span class="dt">Just</span> sUserId <span class="ot">-&gt;</span> <span class="kw">case</span> fromString sUserId <span class="kw">of</span>
    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { error<span class="fu">:</span> <span class="st">&quot;User ID must be an integer: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }
    <span class="dt">Just</span> userId <span class="ot">-&gt;</span> liftAff (PG.withConnection pool <span class="fu">$</span> flip P.findUser userId) <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">404</span> { error<span class="fu">:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }
      <span class="dt">Just</span> user <span class="ot">-&gt;</span> respond <span class="dv">200</span> (encode user)

<span class="ot">respond ::</span> forall eff a<span class="fu">.</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Handler</span> eff
respond status body <span class="fu">=</span> <span class="kw">do</span>
  setStatus status
  sendJson body

<span class="ot">respondNoContent ::</span> forall eff<span class="fu">.</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> eff
respondNoContent status <span class="fu">=</span> <span class="kw">do</span>
  setStatus status
  end</code></pre></div>


<p><code>getUser</code> validates the route parameter for valid user ID, sending error HTTP responses in case of failures. It then calls <code>findUser</code> to find the user and returns appropriate response.</p>


<p>We can test this on the command-line using <a href="https://httpie.org" target="_blank" rel="noopener">HTTPie</a>. We run <code>pulp --watch run</code> in one terminal to start the server with file watching, and test it from another terminal:</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">pulp</span> --watch run
<span class="ex">*</span> Building project in ps-simple-rest-service
<span class="ex">*</span> Build successful.
<span class="ex">Server</span> listening on :4000</code></pre></div>


<pre class="http"><code>$ http GET http://localhost:4000/v1/user/1 # should return the user we created earlier
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 25
Content-Type: application/json; charset=utf-8
Date: Sun, 10 Sep 2017 14:32:52 GMT
ETag: W/&quot;19-qmtK9XY+WDrqHTgqtFlV+h+NGOY&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;Abhinav&quot;
}</code></pre>


<pre class="http"><code>$ http GET http://localhost:4000/v1/user/s
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 38
Content-Type: application/json; charset=utf-8
Date: Sun, 10 Sep 2017 14:36:04 GMT
ETag: W/&quot;26-//tvORl1gGDUMwgSaqbEpJhuadI&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User ID must be an integer: s&quot;
}</code></pre>


<pre class="http"><code>$ http GET http://localhost:4000/v1/user/2
HTTP/1.1 404 Not Found
Connection: keep-alive
Content-Length: 36
Content-Type: application/json; charset=utf-8
Date: Sun, 10 Sep 2017 14:36:11 GMT
ETag: W/&quot;24-IyD5VT4E8/m3kvpwycRBQunI7Uc&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User not found with id: 2&quot;
}</code></pre>


<h3 id="deleting-a-user">Deleting a User<a href="#deleting-a-user" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>


<p><code>deleteUser</code> handler is similar. We add the route in the <code>app</code> function in the <code>src/SimpleService/Server.purs</code> file:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- previous code</span>
<span class="kw">import </span><span class="dt">Node.Express.App</span> (<span class="dt">App</span>, delete, get, listenHttp)
<span class="kw">import </span><span class="dt">SimpleService.Handler</span> (deleteUser, getUser)
<span class="co">-- previous code</span>

<span class="ot">app ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
app pool <span class="fu">=</span> <span class="kw">do</span>
  get <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> getUser pool
  delete <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> deleteUser pool

<span class="co">-- previous code</span></code></pre></div>


<p>And we add the handler in the <code>src/SimpleService/Handler.purs</code> file:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">deleteUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
deleteUser pool <span class="fu">=</span> getRouteParam <span class="st">&quot;id&quot;</span> <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { error<span class="fu">:</span> <span class="st">&quot;User ID is required&quot;</span> }
  <span class="dt">Just</span> sUserId <span class="ot">-&gt;</span> <span class="kw">case</span> fromString sUserId <span class="kw">of</span>
    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { error<span class="fu">:</span> <span class="st">&quot;User ID must be an integer: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }
    <span class="dt">Just</span> userId <span class="ot">-&gt;</span> <span class="kw">do</span>
      found <span class="ot">&lt;-</span> liftAff <span class="fu">$</span> PG.withConnection pool \conn <span class="ot">-&gt;</span> PG.withTransaction conn <span class="kw">do</span>
        P.findUser conn userId <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> pure false
          <span class="dt">Just</span> _  <span class="ot">-&gt;</span> <span class="kw">do</span>
            P.deleteUser conn userId
            pure true
      <span class="kw">if</span> found
        <span class="kw">then</span> respondNoContent <span class="dv">204</span>
        <span class="kw">else</span> respond <span class="dv">404</span> { error<span class="fu">:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }</code></pre></div>


<p>After the usual validations on the route param, <code>deleteUser</code> tries to find the user by the given user ID and if found, it deletes the user. Both the persistence related functions are run inside a single SQL transaction using <code>PG.withTransaction</code> function. <code>deleteUser</code> return 404 status if the user is not found, else it returns 204 status.</p>


<p>Let’s try it out:</p>


<pre class="http"><code>$ http GET http://localhost:4000/v1/user/1
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 25
Content-Type: application/json; charset=utf-8
Date: Mon, 11 Sep 2017 05:10:50 GMT
ETag: W/&quot;19-GC9FAtbd81t7CtrQgsNuc8HITXU&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;Abhinav&quot;
}</code></pre>


<pre class="http"><code>$ http DELETE http://localhost:4000/v1/user/1
HTTP/1.1 204 No Content
Connection: keep-alive
Date: Mon, 11 Sep 2017 05:10:56 GMT
X-Powered-By: Express</code></pre>


<pre class="http"><code>$ http GET http://localhost:4000/v1/user/1
HTTP/1.1 404 Not Found
Connection: keep-alive
Content-Length: 37
Content-Type: application/json; charset=utf-8
Date: Mon, 11 Sep 2017 05:11:03 GMT
ETag: W/&quot;25-Eoc4ZbEF73CyW8EGh6t2jqI8mLU&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User not found with id: 1&quot;
}</code></pre>


<pre class="http"><code>$ http DELETE http://localhost:4000/v1/user/1
HTTP/1.1 404 Not Found
Connection: keep-alive
Content-Length: 37
Content-Type: application/json; charset=utf-8
Date: Mon, 11 Sep 2017 05:11:05 GMT
ETag: W/&quot;25-Eoc4ZbEF73CyW8EGh6t2jqI8mLU&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User not found with id: 1&quot;
}</code></pre>


<h3 id="creating-a-user">Creating a User<a href="#creating-a-user" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>


<p><code>createUser</code> handler is a bit more involved. First, we add an Express middleware to parse the body of the request as JSON. We use <a href="https://github.com/expressjs/body-parser" target="_blank" rel="noopener"><code>body-parser</code></a> for this and access it through PureScript <a href="https://github.com/purescript/documentation/blob/master/guides/FFI.md" target="_blank" rel="noopener">FFI</a>. We create a new file <code>src/SimpleService/Middleware/BodyParser.js</code> with the content:</p>


<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="st">&quot;use strict&quot;</span><span class="op">;</span>

<span class="kw">var</span> bodyParser <span class="op">=</span> <span class="at">require</span>(<span class="st">&quot;body-parser&quot;</span>)<span class="op">;</span>

<span class="va">exports</span>.<span class="at">jsonBodyParser</span> <span class="op">=</span> <span class="va">bodyParser</span>.<span class="at">json</span>(<span class="op">{</span>
  <span class="dt">limit</span><span class="op">:</span> <span class="st">&quot;5mb&quot;</span>
<span class="op">}</span>)<span class="op">;</span></code></pre></div>


<p>And write a wrapper for it in the file <code>src/SimpleService/Middleware/BodyParser.purs</code> with the content:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">module</span> <span class="dt">SimpleService.Middleware.BodyParser</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Prelude</span>
<span class="kw">import </span><span class="dt">Data.Function.Uncurried</span> (<span class="dt">Fn3</span>)
<span class="kw">import </span><span class="dt">Node.Express.Types</span> (<span class="dt">ExpressM</span>, <span class="dt">Response</span>, <span class="dt">Request</span>)

foreign <span class="kw">import </span>jsonBodyParser ::
  forall e<span class="fu">.</span> <span class="dt">Fn3</span> <span class="dt">Request</span> <span class="dt">Response</span> (<span class="dt">ExpressM</span> e <span class="dt">Unit</span>) (<span class="dt">ExpressM</span> e <span class="dt">Unit</span>)</code></pre></div>


<p>We also install the <code>body-parser</code> npm dependency:</p>


<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ex">npm</span> install --save body-parser</code></pre></div>


<p>Next, we change the <code>app</code> function in the <code>src/SimpleService/Server.purs</code> file to add the middleware and the route:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- previous code</span>
<span class="kw">import </span><span class="dt">Node.Express.App</span> (<span class="dt">App</span>, delete, get, listenHttp, post, useExternal)
<span class="kw">import </span><span class="dt">SimpleService.Handler</span> (createUser, deleteUser, getUser)
<span class="kw">import </span><span class="dt">SimpleService.Middleware.BodyParser</span> (jsonBodyParser)
<span class="co">-- previous code</span>

<span class="ot">app ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
app pool <span class="fu">=</span> <span class="kw">do</span>
  useExternal jsonBodyParser

  get <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> getUser pool
  delete <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> deleteUser pool
  post <span class="st">&quot;/v1/users&quot;</span> <span class="fu">$</span> createUser pool</code></pre></div>


<p>And finally, we write the handler in the <code>src/SimpleService/Handler.purs</code> file:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- previous code</span>
<span class="kw">import </span><span class="dt">Data.Either</span> (<span class="dt">Either</span>(..))
<span class="kw">import </span><span class="dt">Data.Foldable</span> (intercalate)
<span class="kw">import </span><span class="dt">Data.Foreign</span> (renderForeignError)
<span class="kw">import </span><span class="dt">Node.Express.Request</span> (getBody, getRouteParam)
<span class="kw">import </span><span class="dt">SimpleService.Types</span>
<span class="co">-- previous code</span>

<span class="ot">createUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
createUser pool <span class="fu">=</span> getBody <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
  <span class="dt">Left</span> errs <span class="ot">-&gt;</span> respond <span class="dv">422</span> { error<span class="fu">:</span> intercalate <span class="st">&quot;, &quot;</span> <span class="fu">$</span> map renderForeignError errs}
  <span class="dt">Right</span> u<span class="fu">@</span>(<span class="dt">User</span> user) <span class="ot">-&gt;</span>
    <span class="kw">if</span> user<span class="fu">.</span>id <span class="fu">&lt;=</span> <span class="dv">0</span>
      <span class="kw">then</span> respond <span class="dv">422</span> { error<span class="fu">:</span> <span class="st">&quot;User ID must be positive: &quot;</span> <span class="fu">&lt;&gt;</span> show user<span class="fu">.</span>id}
      <span class="kw">else</span> <span class="kw">if</span> user<span class="fu">.</span>name <span class="fu">==</span> <span class="st">&quot;&quot;</span>
        <span class="kw">then</span> respond <span class="dv">422</span> { error<span class="fu">:</span> <span class="st">&quot;User name must not be empty&quot;</span> }
        <span class="kw">else</span> <span class="kw">do</span>
          liftAff (PG.withConnection pool <span class="fu">$</span> flip P.insertUser u)
          respondNoContent <span class="dv">201</span></code></pre></div>


<p><code>createUser</code> calls <a href="https://pursuit.purescript.org/packages/purescript-express/0.5.2/docs/Node.Express.Request#v:getBody" target="_blank" rel="noopener"><code>getBody</code></a> which has type signature <code>forall e a. (Decode a) =&gt; HandlerM (express :: EXPRESS | e) (Either MultipleErrors a)</code>. It returns either a list of parsing errors or a parsed instance, which in our case, is a <code>User</code>. In case of errors, we just return the errors rendered as string with a 422 status. If we get a parsed <code>User</code> instance, we do some validations on it, returning appropriate error messages. If all validations pass, we create the user in the DB by calling <code>insertUser</code> from the persistence layer and respond with a status 201.</p>


<p>We can try it out:</p>


<pre class="http"><code>$ http POST http://localhost:4000/v1/users name=&quot;abhinav&quot;
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 97
Content-Type: application/json; charset=utf-8
Date: Mon, 11 Sep 2017 05:51:28 GMT
ETag: W/&quot;61-BgsrMukZpImcdwAJEKCZ+70WBb8&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;Error at array index 0: (ErrorAtProperty \&quot;id\&quot; (TypeMismatch \&quot;Int\&quot; \&quot;Undefined\&quot;))&quot;
}</code></pre>


<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=1 name=&quot;&quot;
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 39
Content-Type: application/json; charset=utf-8
Date: Mon, 11 Sep 2017 05:51:42 GMT
ETag: W/&quot;27-JQsh12xu/rEFdWy8REF4NMtBUB4&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User name must not be empty&quot;
}</code></pre>


<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=1 name=&quot;abhinav&quot;
HTTP/1.1 201 Created
Connection: keep-alive
Content-Length: 0
Date: Mon, 11 Sep 2017 05:52:23 GMT
X-Powered-By: Express</code></pre>


<pre class="http"><code>$ http GET http://localhost:4000/v1/user/1
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 25
Content-Type: application/json; charset=utf-8
Date: Mon, 11 Sep 2017 05:52:30 GMT
ETag: W/&quot;19-GC9FAtbd81t7CtrQgsNuc8HITXU&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;abhinav&quot;
}</code></pre>


<p>First try returns a parsing failure because we didn’t provide the <code>id</code> field. Second try is a validation failure because the name was empty. Third try is a success which we check by doing a <code>GET</code> request next.</p>


<h3 id="updating-a-user">Updating a User<a href="#updating-a-user" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>


<p>We want to allow a user’s name to be updated through the API, but not the user’s id. So we add a new type to <code>src/SimpleService/Types.purs</code> to represent a possible change in user’s name:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- previous code</span>
<span class="kw">import </span><span class="dt">Data.Foreign.NullOrUndefined</span> (<span class="dt">NullOrUndefined</span>)
<span class="co">-- previous code</span>

<span class="kw">newtype</span> <span class="dt">UserPatch</span> <span class="fu">=</span> <span class="dt">UserPatch</span> {<span class="ot"> name ::</span> <span class="dt">NullOrUndefined</span> <span class="dt">String</span> }

derive <span class="kw">instance</span><span class="ot"> genericUserPatch ::</span> <span class="dt">Generic</span> <span class="dt">UserPatch</span> _

<span class="kw">instance</span><span class="ot"> decodeUserPatch ::</span> <span class="dt">Decode</span> <span class="dt">UserPatch</span> <span class="kw">where</span>
  decode <span class="fu">=</span> genericDecode <span class="fu">$</span> defaultOptions { unwrapSingleConstructors <span class="fu">=</span> true }</code></pre></div>


<p><a href="https://pursuit.purescript.org/packages/purescript-foreign-generic/4.3.0/docs/Data.Foreign.NullOrUndefined#t:NullOrUndefined" target="_blank" rel="noopener"><code>NullOrUndefined</code></a> is a wrapper over <code>Maybe</code> with added support for Javascript <code>null</code> and <code>undefined</code> values. We define <code>UserPatch</code> as having a possibly null (or undefined) <code>name</code> field.</p>


<p>Now we can add the corresponding handler in <code>src/SimpleService/Handlers.purs</code>:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- previous code</span>
<span class="kw">import </span><span class="dt">Data.Foreign.NullOrUndefined</span> (unNullOrUndefined)
<span class="co">-- previous code</span>

<span class="ot">updateUser ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
updateUser pool <span class="fu">=</span> getRouteParam <span class="st">&quot;id&quot;</span> <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
  <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { error<span class="fu">:</span> <span class="st">&quot;User ID is required&quot;</span> }
  <span class="dt">Just</span> sUserId <span class="ot">-&gt;</span> <span class="kw">case</span> fromString sUserId <span class="kw">of</span>
    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">422</span> { error<span class="fu">:</span> <span class="st">&quot;User ID must be positive: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }
    <span class="dt">Just</span> userId <span class="ot">-&gt;</span> getBody <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
      <span class="dt">Left</span> errs <span class="ot">-&gt;</span> respond <span class="dv">422</span> { error<span class="fu">:</span> intercalate <span class="st">&quot;, &quot;</span> <span class="fu">$</span> map renderForeignError errs}
      <span class="dt">Right</span> (<span class="dt">UserPatch</span> userPatch) <span class="ot">-&gt;</span> <span class="kw">case</span> unNullOrUndefined userPatch<span class="fu">.</span>name <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respondNoContent <span class="dv">204</span>
        <span class="dt">Just</span> userName <span class="ot">-&gt;</span> <span class="kw">if</span> userName <span class="fu">==</span> <span class="st">&quot;&quot;</span>
          <span class="kw">then</span> respond <span class="dv">422</span> { error<span class="fu">:</span> <span class="st">&quot;User name must not be empty&quot;</span> }
          <span class="kw">else</span> <span class="kw">do</span>
            savedUser <span class="ot">&lt;-</span> liftAff <span class="fu">$</span> PG.withConnection pool \conn <span class="ot">-&gt;</span> PG.withTransaction conn <span class="kw">do</span>
              P.findUser conn userId <span class="fu">&gt;&gt;=</span> <span class="kw">case</span> _ <span class="kw">of</span>
                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> pure <span class="dt">Nothing</span>
                <span class="dt">Just</span> (<span class="dt">User</span> user) <span class="ot">-&gt;</span> <span class="kw">do</span>
                  <span class="kw">let</span> user' <span class="fu">=</span> <span class="dt">User</span> (user { name <span class="fu">=</span> userName })
                  P.updateUser conn user'
                  pure <span class="fu">$</span> <span class="dt">Just</span> user'
            <span class="kw">case</span> savedUser <span class="kw">of</span>
              <span class="dt">Nothing</span> <span class="ot">-&gt;</span> respond <span class="dv">404</span> { error<span class="fu">:</span> <span class="st">&quot;User not found with id: &quot;</span> <span class="fu">&lt;&gt;</span> sUserId }
              <span class="dt">Just</span> user <span class="ot">-&gt;</span> respond <span class="dv">200</span> (encode user)</code></pre></div>


<p>After checking for a valid user ID as before, we get the decoded request body as a <code>UserPatch</code> instance. If the path does not have the name field or has it as <code>null</code>, there is nothing to do and we respond with a 204 status. If the user name is present in the patch, we validate it for non-emptiness. Then, within a DB transaction, we try to find the user with the given ID, responding with a 404 status if the user is not found. If the user is found, we update the user’s name in the database, and respond with a 200 status and the saved user encoded as the JSON response body.</p>


<p>Finally, we can add the route to our server’s router in <code>src/SimpleService/Server.purs</code> to make the functionality available:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- previous code</span>
<span class="kw">import </span><span class="dt">Node.Express.App</span> (<span class="dt">App</span>, delete, get, http, listenHttp, post, useExternal)
<span class="kw">import </span><span class="dt">Node.Express.Types</span> (<span class="dt">EXPRESS</span>, <span class="dt">Method</span>(..))
<span class="kw">import </span><span class="dt">SimpleService.Handler</span> (createUser, deleteUser, getUser, updateUser)
<span class="co">-- previous code</span>

<span class="ot">app ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
app pool <span class="fu">=</span> <span class="kw">do</span>
  useExternal jsonBodyParser

  get <span class="st">&quot;/v1/user/:id&quot;</span>    <span class="fu">$</span> getUser pool
  delete <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> deleteUser pool
  post <span class="st">&quot;/v1/users&quot;</span>      <span class="fu">$</span> createUser pool
  patch <span class="st">&quot;/v1/user/:id&quot;</span>  <span class="fu">$</span> updateUser pool
  <span class="kw">where</span>
    patch <span class="fu">=</span> http (<span class="dt">CustomMethod</span> <span class="st">&quot;patch&quot;</span>)</code></pre></div>


<p>We can try it out now:</p>


<pre class="http"><code>$ http GET http://localhost:4000/v1/user/1
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 26
Content-Type: application/json; charset=utf-8
Date: Fri, 11 Sep 2017 06:41:10 GMT
ETag: W/&quot;1a-hoLBx55zeY8nZFWJh/kM05pXwSA&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;abhinav&quot;
}</code></pre>


<pre class="http"><code>$ http PATCH http://localhost:4000/v1/user/1 name=abhinavsarkar
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 31
Content-Type: application/json; charset=utf-8
Date: Fri, 11 Sep 2017 06:41:36 GMT
ETag: W/&quot;1f-EG5i0hq/hYhF0BsuheD9hNXeBpI&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;abhinavsarkar&quot;
}</code></pre>


<pre class="http"><code>$ http GET http://localhost:4000/v1/user/1
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 31
Content-Type: application/json; charset=utf-8
Date: Fri, 11 Sep 2017 06:41:40 GMT
ETag: W/&quot;1f-EG5i0hq/hYhF0BsuheD9hNXeBpI&quot;
X-Powered-By: Express

{
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;abhinavsarkar&quot;
}</code></pre>


<pre class="http"><code>$ http PATCH http://localhost:4000/v1/user/1
HTTP/1.1 204 No Content
Connection: keep-alive
Date: Fri, 11 Sep 2017 06:42:31 GMT
X-Powered-By: Express</code></pre>


<pre class="http"><code>$ http PATCH http://localhost:4000/v1/user/1 name=&quot;&quot;
HTTP/1.1 422 Unprocessable Entity
Connection: keep-alive
Content-Length: 39
Content-Type: application/json; charset=utf-8
Date: Fri, 11 Sep 2017 06:43:17 GMT
ETag: W/&quot;27-JQsh12xu/rEFdWy8REF4NMtBUB4&quot;
X-Powered-By: Express

{
    &quot;error&quot;: &quot;User name must not be empty&quot;
}</code></pre>


<h3 id="listing-all-users">Listing all Users<a href="#listing-all-users" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h3>


<p>Listing all users is quite simple since it doesn’t require us to take any request parameter.</p>


<p>We add the handler to the <code>src/SimpleService/Handler.purs</code> file:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- previous code</span>
<span class="ot">listUsers ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">Handler</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
listUsers pool <span class="fu">=</span> liftAff (PG.withConnection pool P.listUsers) <span class="fu">&gt;&gt;=</span> encode <span class="fu">&gt;&gt;&gt;</span> respond <span class="dv">200</span></code></pre></div>


<p>And the route to the <code>src/SimpleService/Server.purs</code> file:</p>


<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- previous code</span>
<span class="kw">import </span><span class="dt">SimpleService.Handler</span> (createUser, deleteUser, getUser, listUsers, updateUser)
<span class="co">-- previous code</span>

<span class="ot">app ::</span> forall eff<span class="fu">.</span> <span class="dt">PG.Pool</span> <span class="ot">-&gt;</span> <span class="dt">App</span> (<span class="ot">postgreSQL ::</span> <span class="dt">PG.POSTGRESQL</span> <span class="fu">|</span> eff)
app pool <span class="fu">=</span> <span class="kw">do</span>
  useExternal jsonBodyParser

  get <span class="st">&quot;/v1/user/:id&quot;</span>    <span class="fu">$</span> getUser pool
  delete <span class="st">&quot;/v1/user/:id&quot;</span> <span class="fu">$</span> deleteUser pool
  post <span class="st">&quot;/v1/users&quot;</span>      <span class="fu">$</span> createUser pool
  patch <span class="st">&quot;/v1/user/:id&quot;</span>  <span class="fu">$</span> updateUser pool
  get <span class="st">&quot;/v1/users&quot;</span>       <span class="fu">$</span> listUsers pool
  <span class="kw">where</span>
    patch <span class="fu">=</span> http (<span class="dt">CustomMethod</span> <span class="st">&quot;patch&quot;</span>)</code></pre></div>


<p>And that’s it. We can test this endpoint:</p>


<pre class="http"><code>$ http POST http://localhost:4000/v1/users id:=2 name=sarkarabhinav
HTTP/1.1 201 Created
Connection: keep-alive
Content-Length: 0
Date: Fri, 11 Sep 2017 07:06:24 GMT
X-Powered-By: Express</code></pre>


<pre class="http"><code>$ http GET http://localhost:4000/v1/users
HTTP/1.1 200 OK
Connection: keep-alive
Content-Length: 65
Content-Type: application/json; charset=utf-8
Date: Fri, 11 Sep 2017 07:06:27 GMT
ETag: W/&quot;41-btt9uNdG+9A1RO7SCLOsyMmIyFo&quot;
X-Powered-By: Express

[
    {
        &quot;id&quot;: 1,
        &quot;name&quot;: &quot;abhinavsarkar&quot;
    },
    {
        &quot;id&quot;: 2,
        &quot;name&quot;: &quot;sarkarabhinav&quot;
    }
]</code></pre>


<h2 id="conclusion">Conclusion<a href="#conclusion" class="ref-link"></a><a href="#top" class="top-link" title="Back to top"></a></h2>


<p>That concludes the first part of the two-part tutorial. We learned how to set up a PureScript project, how to access a Postgres database and how to create a JSON REST API over the database. The code till the end of this part can be found in <a href="https://github.com/abhin4v/ps-simple-rest-service/tree/9fdfe3a15508a3c29bd4bc96310fcf52b1022678" target="_blank" rel="noopener">github</a>. In the <a href="https://abhinavsarkar.net/posts/ps-simple-rest-service-2/">next</a> part, we’ll learn how to do API validation, application configuration and logging. This post can be discussed on <a href="https://www.reddit.com/r/purescript/comments/737bg1/writing_a_simple_rest_service_in_purescript/" target="_blank" rel="noopener">r/purescript</a>.</p>


<p>If you liked this post, please <a href="https://abhinavsarkar.net/posts/ps-simple-rest-service/#comment-container">leave a comment</a>.</p>


<div class="author">
  <img src="https://nilenso.com/images/people/abhinav-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/abhin4v">Abhinav Sarkar</a> - check out <a href="https://abhinavsarkar.net">All posts on abhinavsarkar.net</a></i>
  </span>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Gunak — Designing with the Indian Government]]></title>
    <link href="http://blog.nilenso.com/blog/2017/09/12/gunak-designing-with-the-indian-government/"/>
    
    <updated>2017-09-12T00:00:00-04:00</updated>
    <id>http://blog.nilenso.com/blog/2017/09/12/gunak-designing-with-the-indian-government</id>
    
    <content type="html"><![CDATA[<h4>Working with a government body to digitise their offline hospital quality assurance system</h4>


<h3>What’s the problem?</h3>


<p>The NRHM (National Rural Health Mission) is an initiative undertaken by the Government of India to address the health needs of under-served rural areas. The NRHM was initially tasked with addressing the health needs of 18 states that had been identified as having weak public health indicators.</p>


<p>In an effort to better this setup, the Government of India setup the NHSRC (National Health Systems Resource Centre), under the NRHM, to serve as an apex body for technical assistance. The goal of this institution is to improve health outcomes by facilitating governance reform, health systems innovations, and improved information sharing among all stakeholders — at the national, state, district and sub-district levels — through capacity development and convergence models.</p>


<p>One of the areas that the NHSRC works in is the provision of universal healthcare services. Universal access to good quality services — services that are effective, that are safe and satisfying to the patient; services that are patient and community centred, and services that make efficient use of the limited resources available.</p>


<p><figure><img alt="" src="https://cdn-images-1.medium.com/max/450/1*8xDWMKa1RdtFHedqIwICWg.jpeg" /></figure><p>The approach for achieving these objectives involves ensuring that every single health facility is scored against pre-defined standards with periodic supportive supervision for ensuring continual improvement.</p><p>There are three main components to conducting an assessment,</p><p>- Facilities<br>- Assessments themselves, and<br>- Facilitators</p><blockquote>Facilitators <em>conduct</em> Assessments <em>for</em> Facilities.</blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*_nUdGAoCa5TMnX3xgXSJaQ.png" /></figure><p>Facilities are hospitals or other healthcare systems that exist at different levels,</p><ul><li>National level</li><li>State level</li><li>District level</li><li>District Hospital level</li></ul><p>Based on their level, facilities would be eligible for a particular type of assessment.</p><p>There are two main types of assessments in the system,</p><ul><li><strong>National Quality Assessment System (NQAS):</strong> Is a system which has incorporated best practices from the contemporary systems, and contextualised them for meeting the needs of Public Health System in the country</li><li><strong>Kayakalp assessment:</strong> To complement the government’s ‘Swachh Bharat Abhiyan’ (cleanliness in public spaces campaign), the Ministry of Health &amp; Family welfare, Government of India launched a National Initiative to present awards to public health facilities that demonstrate high levels of cleanliness, hygiene and infection control</li></ul><p><strong>Assessments</strong> are a set of pre-defined standards against which facilities are scored. Assessments happen periodically throughout the year under supervision to ensure continual improvement.</p><p><strong>Facilitators</strong> are people with varied experience, who are picked based on the type of assessment. For instance, National level assessments would require facilitators with a certain set of requirements as compared to a State level assessments. For instance, national level facilitators will consist of representatives from the programme divisions (maternal health, child health, family planning, etc.) of the Ministry of Health and Family Welfare, Government of India and National Health Systems Resource Centre.</p><h3>How does the assessment process work?</h3><p>The assessment process requires Facilitators to give a Score (of 0, 1 or 2) to a Measurable Element (ME).</p><p>Each ME belongs to an Area of Concern (AoC) and an AoC belongs to a Standard.</p><p><strong>Standards:</strong> These are broad thematic areas with respect to cleanliness &amp; hygiene, and can be termed as the “pillars” of the system.</p><p><strong>Area of Concern:</strong> Each theme (Standard), has a fixed number of criteria that cover specific attributes.</p><p><strong>Measurable Element:</strong> Is the lowest and most tangible unit of an assessment. MEs are specific requirements that the facilitators are expected to look for in a facility for ascertaining the extent of compliance and award a score.</p><p><strong>Checkpoints:</strong> In the NQAS type assessment, MEs are broken down further into Checkpoints. Checkpoints are departmental checklists.</p><p>This is how the above-mentioned elements exist in the Assessments,</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*eMGSqgyRMWAe1B5VIfCu5Q.jpeg" /></figure><p>Assessments for Facilities are done via <strong>Checklists</strong>, which encapsulate all of the above (Standards, AoCs, MEs and Checkpoints).</p><h3>How were assessments conducted prior to the app?</h3><p>Facilitators were handed sheets of paper with all the Standards, AoC and ME on them. Facilitators would traverse back and forth through this list, assign a compliance score to a ME until they were done with all AoC and subsequently with all Standards.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/450/1*MYeRa6OIbjnpvCMJNPjV9A.png" /></figure><p><strong>Advantages of the offline system</strong>,</p><ul><li>Easy and fast scanning of Standards, AoCs and MEs</li><li>This medium requires little to no training</li></ul><p><strong>Disadvantages of the the offline system</strong>,</p><ul><li>Hard to keep track of progress. Facilitators have to scan and do this themselves by repeatedly going through the list</li><li>Force facilitators to conduct their assessments by the list, rather than what is convenient</li><li>Unobliging towards writing comments for scores awarded to MEs</li><li>Can’t generate reports immediately</li><li>Submitting Assessments as a physical copy and manually syncing the results across the entire district/state/nation</li></ul><h3>What is Gunak?</h3><p>Based on the disadvantages mentioned above, Nikhil (senior member of the NHSRC) thought it’d be best to use technology to make the process of conducting and syncing assessments easier. <strong>Gunak</strong> is the app that aimed at doing this.</p><p><strong>Minimum feature list</strong> we aimed to launch the app with,</p><ul><li>Conduct NQAS and Kayakalp assessments</li><li>Motivate facilitators to enter comments for the scores they give</li><li>Allow assessments to be conducted offline</li><li>Sync assessments once facilitators were in an area with active internet connection</li><li>View detailed reports across all Standards, AoCs and MEs for finished assessments</li><li>Sync reports of finished assessments for peers/superiors to view/review</li></ul><p><strong>The challenges we faced</strong>,</p><ul><li>Maintain familiarity while transitioning facilitators from an offline to an online system</li><li>Translating a multi-tier architecture to mobile</li></ul><h3>Navigation</h3><p><strong>Usage:</strong> For an assessment to be complete, facilitators have to finish all MEs across all AoCs.</p><p><strong>Usage Pattern:</strong> Facilitators, physically visit facilities to conduct assessments. The offline medium sometimes forced the facilitators to finish Measurable Elements in a sequential order (as displayed on paper) since it would be easier to keep track of the progress of the assessment.</p><p><strong>Notes:</strong></p><ol><li>MEs are specific department-wise questions for a facility. Since most facilities aren’t built the same way, following a sequential pattern wasn’t the way to go ahead.</li><li>The assessments are usually carried out over a period of 3–5 days.</li></ol><p>We wanted to design a system that would be flexible and not dictate facilitator behaviour. A system that would always keep the facilitator aware of where they are and their progress. In addition to this, we had to ensure that readability and usability were the main focus since facilitators moved around a lot while conducting assessments.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*n6_cjD2L90y6iRs04Jllkw.jpeg" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*SEo8KLo9l7b4iHNfKXCP0A.jpeg" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*d8rDosnp93kSlIF8EI5xog.jpeg" /></figure><p>The bottom navigation for an ME, allows facilitators to know the progress of the AoC these MEs belong to. It works as a navigation system where facilitators can jump forward to answer an ME and come back to answer another ME.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*qPKh7IjED-M9TovayibpYQ.jpeg" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Hq2MZVvQbVIkMqseh-SmIw.jpeg" /></figure><h3>Search</h3><p>We wanted to find an equivalent for the ‘flip &amp; find’ function, that facilitators perform on paper, for the app.</p><p>Search allows facilitators to find MEs, AoCs and Standards.</p><p>Our Search feature isn’t a simple text match. As seen below, it can identify that the word ‘hygiene’, could pertain to a Standard, an AoC or MEs.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*TYIUyJtHTqSPWxwBNVXt1A.jpeg" /></figure><h3>Reports</h3><p>One of the main drawbacks of the offline medium was its inability to generate reports. A facilitator or their superior would spend hours going through an assessment and assign a score for the same.</p><p>We took advantage of technology to provide detailed reports based on Departments, AoC and Score, which can be shared as an excel sheet or as an image.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1qdESsDlkRVWDjUtwbqD4w.jpeg" /></figure><h3>Who did we work with?</h3><p>This project would not have been possible if it wasn’t for the amazing team at <a href="http://www.samanvayfoundation.org/">Samanvay</a>. This is our second project with them, you can read about the first one here,</p><p><a href="https://uxdesign.cc/designing-for-rural-india-part-1-a0700e705400">Designing for Rural India — Part 1</a></p><h3>App Launch and Reception</h3><p>The Gunak app is being rolled out in phases. Its first launch was in August 2017 by the Ministry of Health and Family Welfare, the app has a 4.8* rating on the play store.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*bAw7hqDgqP8B1iTyDrk9Nw.jpeg" /></figure><p>Thank you so much for reading this. If you found this interesting, don’t forget to 👏 👏</p><p>If you have questions or thoughts about the post and/or would like to reach out to us outside of Medium, send us an email, <strong><a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#x6d;&#x6f;&#115;&#x68;&#x69;&#x6d;&#111;&#x73;&#x68;&#105;&#x40;&#x6e;&#x69;&#108;&#x65;&#x6e;&#115;&#x6f;&#x2e;&#x63;&#x6f;&#109;">&#x6d;&#111;&#115;&#x68;&#105;&#x6d;&#111;&#x73;&#104;&#x69;&#64;&#110;&#105;&#108;&#x65;&#110;&#x73;&#111;&#46;&#99;&#x6f;&#x6d;</a></strong></p><p>🙏</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9d3d4b0eefe" width="1" height="1"><hr><p><a href="https://uxdesign.cc/gunak-designing-with-the-government-9d3d4b0eefe">Gunak — Designing with the Indian Government</a> was originally published in <a href="https://uxdesign.cc">uxdesign.cc</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p><div class="author">
  <img src="https://nilenso.com/images/people/varun-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/">Varun Pai</a> - check out <a href="https://medium.com/@irrational_pai?source=rss-3a83e65683fa------2">Stories by Varun Pai on Medium</a></i>
  </span>
</div></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Designing for Rural India — Part 1]]></title>
    <link href="http://blog.nilenso.com/blog/2017/05/05/designing-for-rural-india-part-1/"/>
    
    <updated>2017-05-05T00:00:00-04:00</updated>
    <id>http://blog.nilenso.com/blog/2017/05/05/designing-for-rural-india-part-1</id>
    
    <content type="html"><![CDATA[<p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*FakzMqrPi_dGbGo8LNnhrw.jpeg" /></figure><h3>Designing for Rural India — Part 1</h3><p><em>Journey of designing </em><a href="http://openchs.org/"><em>OpenCHS</em></a><em> with </em><a href="http://samanvayfoundation.org/"><em>Samanvay</em></a></p><p>India does not have a <a href="https://en.wikipedia.org/wiki/National_health_insurance">National health insurance</a> or <a href="https://en.wikipedia.org/wiki/Universal_health_care">universal health care</a> system for all its citizens. This has propelled the private sector to its dominant position in the healthcare market. Private companies provide the lion’s share of healthcare services in the country.</p><p>Despite the structures in place to ensure equality and funding from government and non-government sources, we still observe a visible gap in access to healthcare in rural areas compared to cities. A staggering 68% of the population lives in rural areas and has no or limited access to hospitals and clinics. Consequently, the rural population mostly relies on alternative medicine and government programmes.</p><p>If one had to paint a picture of rural India, it would be people living in mud houses in small villages. These villages have next to no electricity supply. There are setups of solar power stations which people use to charge their cellphones. Travelling to these villages is not always easy. One would require to change at least three different modes of transport to reach many of these villages. The residents seek out healthcare in cases of pregnancy and severe illness like Tuberculosis, Dengue, etc. However, villagers often do not seek treatment for early symptoms which appear less dangerous. This is not always due to lack of awareness. It is often also the case that infrastructure to support the long tail of healthcare is simply not that accessible in rural India.</p><h3>Healthcare in Rural India</h3><p>The public healthcare in rural areas has been developed as a three-tier structure based on predetermined population norms.</p><h4>1. CHC (Community Health Centres)</h4><p>Community Health Centres form the uppermost tier and are established and maintained by the State Government. Community health centres are staffed by four medical professionals supported by twenty-one paramedical and other staff. Surgeons, physicians, gynaecologists and paediatricians provide comprehensive care in each CHC.<br>Each CHC has thirty indoor beds, an Operating Theatre, X-ray, Labour Room, and Laboratory facilities. The community health centre provides expert facilities in obstetric and other care for patients referred to them by the four primary health centres within their jurisdiction.</p><h4>2. PHC (Primary Health Centres)</h4><p>Primary Health Centres (PHCs) comprise the second tier in rural healthcare. PHCs provide integrated, curative and preventive healthcare to the rural population with emphasis on preventive and promotive aspects. Activities include promotion of better health and hygiene practices, tetanus inoculation of pregnant women, intake of IFA tablets and institutional deliveries. A medical officer is in charge of the PHC supported by fourteen paramedical and other staff. Each primary health centre has four to six beds. Patients are referred to the PHCs by six sub-centres.</p><h4>3. Sub-centres</h4><p>A sub-centre is the most peripheral institution and the first contact point between the primary healthcare system and the community. An Auxiliary Nurse Midwife (ANM) is in charge of six sub-centres each of which provides basic drugs for minor ailments. A sub-centre provides services in relation to maternal and child health, family welfare, nutrition, immunisation, diarrhoea control, and control of communicable diseases. ANMs also use <a href="https://play.google.com/store/apps/details?id=org.unicef.eanmapp&amp;hl=en">Anmol Tablet</a>, a product that aids in maintaining and collecting data, specific to primary health.</p><h4>4. Non-government Infrastructures</h4><p>Apart from the government bodies there are other players in the system, which are closest to the villagers (bottom most in this tier). There are private hospitals, which run to provide special services or even basic healthcare.</p><p>Accessing health support is not that easy for village residents. They have to travel long distances to visit public hospitals spending money, and time that could be spent doing their daily chores. That’s when community health services come to play.</p><p>There are non-profit NGO Hospitals which run Community Health Services (CHS). They hire and train health workers who work closely with villagers in providing health services and education.</p><p>Health Workers who work as a part of the Community Health Services are known as <strong>VHWs (Village Health Workers)</strong>, as a part of <em>CRHP (Comprehensive Rural Health Programme)</em>. Jamkhed is a programme run under CRHP.</p><p><em>Jamkhed</em> is centered around mobilising and building the capacity of the community, empowering the people to bring about their own improvements in health and poverty-alleviation. This is one of the better known and appreciated community health systems.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*PKuZOwMYCS8JO1tm_dap7w.jpeg" /><figcaption>Health Workers with a monthly visit chart on the wall</figcaption></figure><h3>Role of VHW ( Village Health Workers )</h3><p>VHWs are individuals selected by the villagers. They are responsible for providing consultation and prescription on basic health care. Their appointment by the community helps establish villagers’ trust in them.</p><p>VHWs typically take care of a single village, but if required, they can be responsible for up to five villages. They are trained in basic healthcare, understanding symptoms and personality development. Since they are only trained in basic healthcare, they escalate severe cases and recommend the patients to visit hospitals. Quite often these volunteers are women.</p><p>Apart from this, VHWs also bust widely held superstitions by providing elementary health education.</p><p>Health workers use their considerable interpersonal communication skills to bring about important behavioural changes with respect to reproductive and hygiene practices in their rural communities.</p><h3>How do they operate now?</h3><p>The infrastructural support that these health workers get is mostly via Community Health programs and some inventory support from the government.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7RlO_lSMkHgEtYwKt5323g.png" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zMpx7rxkyVO6pSNU8e8n-w.png" /><figcaption>Inventory procurement list and inventory at the health centers</figcaption></figure><p>Here are some highlights about their daily operations -</p><h4>Use of Paper:</h4><p>The health workers <em>still</em> use paper for most of their work. They are provided with a chart that maps various symptoms to common ailments and relevant medication. While this may enable the health workers to swiftly treat common ailments, the strict mapping unfortunately severely restricts their ability to correctly identify edge cases or more subtle health issues.</p><h4>Inventory List:</h4><p>Procurement of medicines is also done using paper. Health workers also track the need for medicines, availability and expiry dates of the medicines. Medicines are procured from Sub-centres where the health workers visit often to give reports to ANM’s about their respective villages.</p><h4>Patient History</h4><p>The health workers aren’t equipped to look at patients history at the time of consultation. They keep manual records which are too comprehensive to look into at the time of visits.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*2B5ceasDOjVx1YHxEuY2eA.png" /><figcaption>Health Worker educating a resident about preventive measures</figcaption></figure><h3>How does OpenCHS help?</h3><p><strong>OpenCHS</strong> strives to fill this gap and provide a decision support system that helps a health worker perform diagnoses. The system also provides the health workers with the steps for treatment.</p><h4>What is OpenCHS?</h4><p>OpenCHS is an Open Community Health Service platform that works in collaboration with NGO Hospitals. OpenCHS is a mobile app that is used by Village Health Workers (VHW) in the field or in their clinics when patients visit them.</p><p>OpenCHS helps VHWs to record patient data, perform diagnoses and manage programme statuses. The app also enables the health workers to consider individual patients’ medical histories during their diagnoses.</p><h3>Our challenges while designing the product</h3><ol><li><strong>Physical Constraints: </strong>Data is not recorded as someone on a desk job would. Health workers not only collect data with the app but they also have to use health equipment to take measurements. This requires the health workers to keep switching their attention between the patient and the application.</li><li><strong>No Electricity and Network Connectivity:</strong> VHWs don’t have access to electricity. They use basic cellphones (not smartphones), which they charge using solar charging stations located at central areas of villages. There is also next to no network connectivity which makes it difficult for an application to work in the field.</li><li><strong>Localisation &amp; Multi-lingual Support</strong>: The application is intended to be used throughout multiple states of India. Each state has their own language. Some villages within a state may even use multiple dialects. We focused on providing multi-lingual support and localisation, in particular with regard to specialised medical terminology and concepts.</li><li><strong>Ease of Use</strong>: VHWs live in remote villages of India, where there is very little or no access to technology. They are used to basic cellphones, i.e. no smartphones. We had to be cautious about not having a higher learning curve for the application for them, so they don’t face issues when they are in the field.</li></ol><h3>What did we do?</h3><p>Considering the challenges and constraints that we were working with, this is how we approached the design of the application.</p><h4><strong>It works o</strong>ffline:</h4><p>We were aware that <em>the user is not going to be connected to a network 98% of the time, so we made the app work offline</em>. We store all data locally on the device. The app only connects to a server when synchonising data. Typically health workers visit a sub-centre or another place with internet connectivity monthly. Recorded data is reported to the hospitals as part of the synchronisation.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*MZeH0coiPC7ZQ9_UCDR__w.jpeg" /><figcaption>Image 1 — sync status notification | Image 2 — sync finished 50%</figcaption></figure><h4><strong>Decision Support</strong>:</h4><p>The application provides decision support based on the recorded data and suggests treatment. We built our algorithm in collaboration with medical practitioners and took into account common health procedures. The algorithm even helps the health worker identify emergencies and provide appropriate medical care. When a patient needs medical attention from a trained medical professional, the application suggests them to inform the patients of the details and visit a hospital.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*OmjtGwXuvfp2xf7KsJy7rw.jpeg" /><figcaption>Image 1 — Patient profile and history | Image 2 — Treatment result after consultation</figcaption></figure><h4><strong>Localisation and Multi-lingual Support</strong>:</h4><p>The application will be implemented with multi-lingual support. For each implementation, there will be localisation for specialised medical terminology used by the residents of the villages. Currently, we have an implementation in Marathi, which can be downloaded from <a href="http://www.openchs.org/"><em>here</em></a>.</p><h4><strong>Ease of Use:</strong></h4><p>Ease of use was our major focus while designing this application.</p><ul><li><strong><em>Keep it simple, focused</em></strong>: We tried to understand different activities that a Health Worker performs, and based on those use cases, created focus in the application, instead of going by one interface for all flows, like a dashboard.</li><li><strong><em>Attention on Iconography</em></strong>: We experimented with iconography using various styles and even with contextual icons. This quickly proved infeasible given that our users were stretched through rural India. <br>We followed these simple rules of iconography: <br>-<em> Keep it simple and schematic</em>, i.e. avoid details<br>- <em>5 second rule,</em> if you can’t think of that icon in five seconds then that icon probably is not a good choice<br>- <em>Memorability</em>, making the icons distinct enough that they are remembered even after prolonged usage.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/813/1*hhFllilpRP6Jol7Sm-J-cQ.png" /><figcaption>Few options of icons we considered for patient profile ; we finally picked the last one</figcaption></figure><ul><li><strong><em>Understand Behaviour</em></strong>: We tested an alpha version of the application with Health Workers to see if they are comfortable with data entry and understand input fields as concepts. To our surprise, the first thing the health worker did was swipe on the screen. It was most interesting because we knew that our users don’t use smart phones, so how did this come up as a first interaction in this person’s head? Perhaps media has been reaching them through means which one can’t imagine.</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Ic6AxjbFELdopAfpb3KKfw.png" /><figcaption>Testing of the alpha version with the health worker</figcaption></figure><h4><strong>So, What’s next?</strong></h4><p>The application is yet to be released. The plan is to implement it at one village first and then scale accordingly. <br>We are looking forward to two types of feedback. After the implementation of the application, the health workers will be trained. At this stage will be able to get quick feedback about usability and other challenges.</p><p>The second feedback will have a rather longer loop, where the health workers will be using it in the field and on their return we will learn about how it went and get more qualitative feedback. <a href="http://www.openchs.org/"><em>Here</em></a> is all the documentation, including designs of the project so far.</p><h4>Want to know more?</h4><p>There has been much discussion about each flow and decision, in multiple small and large sessions that we will be sharing in detail shortly so that you can better understand our efforts. Keep on the lookout :)</p><p><em>Thanks to </em><a href="http://nilenso.com"><em>nilenso</em></a><em> and </em><a href="http://samanvayfoundation.org/"><em>Samanvay</em></a><em> team for the opportunity to work on this interesting problem. I also appreciate the feedback from Kenneth &amp; Trouble in better articulating this post.<br>Do get in touch with me (<a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#x6e;&#111;&#x6f;&#112;&#x75;&#x72;&#64;&#x6e;&#x69;&#x6c;&#x65;&#x6e;&#115;&#x6f;&#46;&#99;&#111;&#109;">&#x6e;&#111;&#111;&#112;&#x75;&#114;&#x40;&#x6e;&#105;&#108;&#101;&#x6e;&#115;&#x6f;&#46;&#x63;&#x6f;&#x6d;</a>) for any further questions or details. Any feedback will be highly appreciated.</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/700/1*aNPBhln7iDMY8qRcmoyCfA.jpeg" /></figure><p><em>Noopur wrote this story to share knowledge and to help nurture the design community. All articles published on uxdesign.cc follow that same </em><a href="https://uxdesign.cc/the-design-community-we-believe-in-369d35626f2f"><em>philosophy</em></a><em>.</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/700/1*aNPBhln7iDMY8qRcmoyCfA.jpeg" /></figure><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fupscri.be%2F50d69a%3Fas_embed%3Dtrue&amp;dntp=1&amp;url=https%3A%2F%2Fupscri.be%2F50d69a%2F&amp;image=https%3A%2F%2Fucarecdn.com%2F6e8986c7-e64a-4116-9afb-fd71a476f0a9%2F&amp;key=d04bfffea46d4aeda930ec88cc64b87c&amp;type=text%2Fhtml&amp;schema=upscri" width="800" height="400" frameborder="0" scrolling="no"><a href="https://medium.com/media/05d5fd32eda31cbd1b83287606744532/href"><a href="https://medium.com/media/05d5fd32eda31cbd1b83287606744532/href">https://medium.com/media/05d5fd32eda31cbd1b83287606744532/href</a></a></iframe><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=a0700e705400" width="1" height="1"><hr><p><a href="https://uxdesign.cc/designing-for-rural-india-part-1-a0700e705400">Designing for Rural India — Part 1</a> was originally published in <a href="https://uxdesign.cc">UX Collective</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p><div class="author">
  <img src="https://nilenso.com/images/people/noopur-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/9porcupine">Noopur Varma</a> - check out <a href="https://medium.com/@noopurvarma?source=rss-36e1e2d4204c------2">Stories by Noopur Varma on Medium</a></i>
  </span>
</div></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Black Mirror*, or a review of the review process at a software co-operative]]></title>
    <link href="http://blog.nilenso.com/blog/2017/04/06/black-mirror-or-a-review-of-the-review-process-at/"/>
    
    <updated>2017-04-06T00:00:00-04:00</updated>
    <id>http://blog.nilenso.com/blog/2017/04/06/black-mirror-or-a-review-of-the-review-process-at</id>
    
    <content type="html"><![CDATA[<p>*Deliberately sensationalist headline designed to grab eyeballs.</p>


<p>We recently concluded annual reviews at <a href="http://nilenso.com">nilenso</a>, at the end of which, Sandy, who recently joined us, asked: “Why is our process the best we can have?”</p>


<p>This led to a lot of reminiscing about how reviews were conducted at other companies that some of us had worked at.</p>


<p>One example went like this: I ask people to review me. I don’t get to read what they said, or find out if they even bothered to write anything at all. Someone from my team (a senior, usually my boss) would look at all these reports along with HR, and hold a meeting with me. The meeting basically involved my boss giving me a summary of the above, based on his/her understanding/interpretation. While I could ask for explanations and examples when I received feedback that I couldn’t relate to, they were not always forthcoming.</p>


<p>There <em>was</em> in fact a level system based on which variable pay was decided, but this was not disclosed. Since the bonuses were kept confidential, even if a person did find out what someone else made, they couldn’t question their pay relative to their colleague (maybe s/he is a better negotiator?).** There was no incremental movement between levels. Post x number of years, you either moved up or out.</p>


<p>Another colleague said that reviews at his previous organisation involved filling out a report, mentioning the number of bugs you had fixed (or caused), SLAs you had met (or missed), and so on, and that “regardless of all this, your appraisal merely depended on the ‘relationship’ you had developed with your manager. Nothing really came about even when you rejected whatever level the manager gave you, because in the end s/he decides it.”</p>


<p>While these may sound like extreme cases, they are very real (and not all that uncommon). Regardless of experience, the adjectives thrown around to describe the performance management process ranged from “random” and “unfair” to “opaque” and “senseless”.</p>


<p>We’ve <a href="https://blog.nilenso.com/blog/2015/06/30/how-to-co-op-salaries-reviews/">written</a> about how we conduct reviews before, but here’s a quick recap.</p>


<ul><li>We use an <a href="https://github.com/nilenso/reviews">app</a> (hey, we’re a tech company!) to write reviews for each other. This is open source, if you’d like to use it, be our guest.</li><li>The reviews written are visible to everyone within nilenso.</li><li>Once this is done (and we stress that reviews should summarise feedback that has <em>already been given during the course of the year)</em> and a “level” has been suggested, we collectively sit down to discuss, and finalise compensation for the coming year.</li></ul>


<p>Stacey Adams’ <a href="https://en.wikipedia.org/wiki/Equity_theory">equity theory</a>, that describes how individuals perceive the distribution of resources is well documented. In order to apply this concept, however, and to determine whether one’s compensation is fair, what one needs is data on how the available resources (profits) were distributed to begin with. The approach that most organisations take in this regard is to hold back information relevant to employees. We run against that grain here.</p>


<p>I don’t claim that our method is perfect. In fact, it’s constantly being tweaked. I would posit, however, that the fact that the rationale behind it is completely transparent, and open to critique, makes it better than a system which keeps hidden from its participants, the thought that went into creating it.</p>


<p>I’m also not going to pretend that this will work for everyone. More specifically, I’ll admit that this process may not scale well, and beyond a point, will have to be adapted it to suit the needs of a company that employs hundreds, as opposed to tens of people.</p>


<p>In the meantime, I’ll leave you with this quote by JFK:</p>


<blockquote>“We are not afraid to entrust the American people with unpleasant facts, foreign ideas, alien philosophies, and competitive values. For a nation that is afraid to let its people judge the truth and falsehood in an open market is a nation that is afraid of its people.”</blockquote>


<p>**We would write down our bonuses on a piece of paper, throw them in a hat, and then read them out loud. This way, everyone knew where s/he stood, but no one knew who got what.</p>


<p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=147cf2d92deb" width="1" height="1"><div class="author">
  <img src="https://nilenso.com/images/people/deepa-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deepa_v">Deepa Venkatraman</a> - check out <a href="https://medium.com/@deepa_93680?source=rss-35a7eb01f164------2">Stories by Deepa Venkatraman on Medium</a></i>
  </span>
</div></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[nilenso policies: by the people, for the people]]></title>
    <link href="http://blog.nilenso.com/blog/2017/02/14/nilenso-policies-by-the-people-for-the-people/"/>
    
    <updated>2017-02-14T00:00:00-05:00</updated>
    <id>http://blog.nilenso.com/blog/2017/02/14/nilenso-policies-by-the-people-for-the-people</id>
    
    <content type="html"><![CDATA[<p>Inspired by a recent(ish)* Basecamp <a href="https://m.signalvnoise.com/employee-benefits-at-basecamp-d2d46fd06c58#.o4hfovwma">article</a> on the benefits they offer their employees; we decided to evaluate our own to see how we stack up. Not too badly, as it turns out. We’ve also (mostly) used their format. I hope they won’t mind, given what they say about imitation and flattery.</p>


<h4>Nilenso Benefits</h4>


<p><strong>Salaries: </strong>We are currently based out of Bangalore, India and it’s always a terrible idea to evaluate anything here on the basis of “averages”. We do, however, try to pay competitively but also never forget that just money is simply not enough.</p>


<p><strong>Transparent finances: </strong>We pride ourselves on being a completely open company, in every way. Everyone at nilenso collectively decides which projects we take on, and what our expenses for the year should be. We go out of our way to make sure everyone in the company understands how much money we’re making and how we’re spending it. Our books of accounts and finances are available for anyone within the company to take a look, at any time. If something’s confusing, just ask.</p>


<p><strong>Open reviews: </strong>Our review meetings that happen twice a year are completely open too, to anyone who wants to attend them. Everyone can read the reviews written by everyone else, and they’re all open to questioning.</p>


<p>Read more about our review / salary structure <a href="http://blog.nilenso.com/blog/2015/06/30/how-to-co-op-salaries-reviews/">here</a>.</p>


<p><strong>Insurance: </strong>Medical care is expensive, so all our employees and their family — parents, children and spouses are covered by a comprehensive insurance policy (this means cashless, all ailments covered, pre-existing conditions included, no bureaucracy policy), where nilenso pays 100% of the premium.</p>


<p><strong>Education allowance: </strong>While we don’t have a formal limit on what you can spend on education, employees are free to use the company credit card to buy books — technical or otherwise as well as pay for courses online or offline. We even have an English tutor who comes in every week to help our Operations staff improve their language skills. One of them is now giving his board examinations, after being out of school for more than a decade.<br>We also try to host educational events at the office — from Haskell lessons to technical talks (if you haven’t been to XTC — eXtreme Tuesday’s Club, ask us for an invite). We want you to attend conferences, whether that’s around the block or halfway around the world. Since we’ve been up and running, we’ve attended a ton of conferences: Euroclojure, Clojure/West, Clojure/conj, RubyConf San Diego, RubyConf India, React Conf SF, StrangeLoop, GCRC, Fifth Elephant, JSFoo, rootconf, pgconf, 50p — and that’s not an exhaustive list.</p>


<p><strong>100% coverage on hardware / software: </strong>Whatever hardware, software, or services you need to do your job are always 100% on us. No red tape, no questions asked.</p>


<p><strong>Ergonomic Furniture: </strong>If you’re not comfortable in the office, we’re not happy. If your desk is too high, or the lighting in your room is too bright, let us know, and we’ll do something about it.</p>


<p><strong>Expense Account: </strong>Everyone who works at nilenso has access to our debit and credit cards to pay for any work-related expenses — software, hardware, travel, office supplies, books. If you’ve paid for something from your own pocket, that’s fine too! Just send us a photo of the receipt and we’ll reimburse it promptly (we have an app called <a href="https://www.kulu.in/">kulu</a> that keeps track of all of this). When you’re traveling abroad, we get you a prepaid forex card, so you don’t have to pay for anything expensive yourself. Basically, everything goes, as long as you’re reasonable (nobody has been unreasonable so far).</p>


<p><strong>Fully stocked healthy pantry: </strong>Our pantry is restocked daily with fresh fruits, yoga bars, and healthy alternatives to aerated soft drinks (just put whatever you’d like on the list we have put up, and it shall magically appear in the kitchen). We also make sure there’s fresh milk, bread and cereal, for the days when you miss breakfast.</p>


<p><strong>Lunches: </strong>We get lunch in the office everyday and eat out once a week (admittedly, this could be somewhat healthier than it is now — we order in, based on what people like, but we’re working on it).</p>


<p><strong>Menstruation Leave : </strong>nilenso offers paid menstrual leave for anyone who needs it, no questions asked.</p>


<p><strong>Vacations and Paid Holidays: </strong>nilenso offers 29 days of paid vacation and a few national holidays. Obviously, this doesn’t include times when you’re very ill — and when you are, we’d like you to take as much time as you need to recuperate before getting back to work. None of this is strictly monitored, so we’re often asked what happens if people take advantage of our liberal vacation policy. For the record, we don’t know, because it hasn’t happened.</p>


<p><strong>Maternity and Paternity Leave: </strong>At nilenso, both parents are offered 6 months paid and a further 6 months unpaid leave around the time that they welcome a newborn.</p>


<p><strong>Work: </strong>Being a technology company, we’re really passionate about deep tech, but also about education, healthcare, maps, renewable energy and a host of other subjects. The first couple of years of our journey at nilenso were spent trying to establish ourselves as a firm that could be counted on to deliver on technically challenging projects. Having done that, we’re now fortuitously positioned to use technology to solve real world problems. While this isn’t technically a benefit, we actively try to find projects that align with your interests, even if it comes at a cost.</p>


<p><strong>Working weeks: </strong>We’re a small company, so people often end up doing way more than they would in other, larger firms — recruiting, sales calls, ordering lunch, talking to lawyers, taking Haskell lessons. We encourage 40-hour working weeks, and let our clients know what to expect as well.</p>


<p><strong>Working remotely: </strong>Many ensonians often work from home (some more often than others). Some time last year, Tim even worked from a beachside getaway in Kerala for a couple of weeks. If there’s any way we can support you while you’re away, we do it. We use Slack / email as much as possible so you’re connected to everything going on at work. Alternatively, if you need a data dongle because there’s no WiFi where you’re going, pick one up from the office. None of our employees are fully remote, so we’re not there yet, but we’re definitely on our way.</p>


<p>It’s never easy to pen down what a company does for its employees, because it’s so difficult to separate that from what it does for itself. In our case though, there’s no need for separation: as a <a href="http://blog.deobald.ca/2014/11/huh-software-cooperative.html">co-op</a>, the company *is* its employees, and everyone who works here owns her just as much as the next person.</p>


<p>— — — — — <br>*Okay, I admit it, I wrote this post in January 2016 and then sat on it for a year.</p>


<p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=fd0ea9e936d1" width="1" height="1"><div class="author">
  <img src="https://nilenso.com/images/people/deepa-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deepa_v">Deepa Venkatraman</a> - check out <a href="https://medium.com/@deepa_93680?source=rss-35a7eb01f164------2">Stories by Deepa Venkatraman on Medium</a></i>
  </span>
</div></p>
]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[&quot;I have cramps.&quot;]]></title>
    <link href="http://blog.nilenso.com/blog/2016/05/16/i-have-cramps/"/>
    
    <updated>2016-05-16T00:00:00-04:00</updated>
    <id>http://blog.nilenso.com/blog/2016/05/16/i-have-cramps</id>
    
    <content type="html"><![CDATA[<div dir="ltr" style="text-align: left;" trbidi="on"><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;">PMS. I still can't remember first learning about Pre-Menstrual Symptoms as a child. I don't remember the specific event, but the understanding conveyed. I imagine it went something like this: "My Mom was really grouchy this morning." - "Oh, she probably has PMS." - "Is that a disease?" - "Nah, it's something that happens to Moms once a month. They get really grouchy and you should just leave them alone."</div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;">My teen years didn't do much to broaden my understanding. It was eventually apparent that menstruation affected all women&nbsp;<span style="background-color: white; color: #545454; font-family: &quot;arial&quot; , sans-serif; font-size: x-small; line-height: 18.2px;">—</span><span style="line-height: 25.6px;">&nbsp;not just Moms&nbsp;</span><span style="background-color: white; color: #545454; font-family: &quot;arial&quot; , sans-serif; font-size: x-small; line-height: 18.2px;">—</span><span style="line-height: 25.6px;">&nbsp;and that the process began just as my own pre-teen body was thrown into fits and starts of its own. I learned the basics of female anatomy from Health class and Sex Ed, but even as a young adult, I mentally associated menstruation with violent and seemingly illogical mood swings. I began to see it as a physiological phenomenon and the cause of complex mental/physical interactions not clearly understood by either those affected or the field of neuroscience. As with so many other subjects, I didn't really learn the&nbsp;</span><em style="box-sizing: border-box; line-height: 25.6px;">true</em><span style="line-height: 25.6px;">&nbsp;basics of menstruation and female anatomy until I observed them first-hand. Direct experience (or, in this case, as direct experience as is possible for males) always trumps even the deepest theoretical and intellectual understanding.</span></div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;">My first girlfriend in college suffered from menstrual cramps. The phrase "suffered from" has watered itself down over the ages to mean "influenced by". While my intention is not to exclude that interpretation, I must be explicit about the distinct imagery I hope to convey: When she had cramps, she&nbsp;<em style="box-sizing: border-box;">suffered</em>. This specific brand of suffering is an intense physical pain that leaves a person clenched in a ball, rolling on the floor, begging for deliverance.</div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;">The first time I saw this my childish ignorance about menstruation was obliterated. This process was genuine, visceral, horrible, and routine. My childish attitude toward the "problem" has taken the intervening decades to correct. As an 18-year-old, I thought my job was to be company and support during these painful episodes. While some women may desire this of their friends and spouses, I've found (in my limited anecdotal experience) that most just want to be left alone until the feeling passes. The experience is physically unpleasant, the discomfort can be embarrassing, and little can be done about the situation but wait for it to resolve itself.</div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;">Which brings us to the workday. If you are a man, or a woman who does not experience menstrual cramps, imagine fighting through a workday (or two) with a searing pain emanating from within the depths of your body. Now imagine that you are acutely aware of the source of pain but it's not a social norm to announce such sorts of things: if you want relief from this, your only option is a generic "sick day", which are doled out in finite number by your employer.</div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;">Now imagine you are presented with this day of torture and this lose-lose decision&nbsp;<em style="box-sizing: border-box;">every month</em>.</div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;">At <a href="http://www.nilenso.com/" target="_blank">nilenso</a> (and everywhere, I hope), the solution is clear. First, destroy any childish taboo or squeamishness about menstruation and menstrual cramps: this is simply a fact of life we must all be comfortable with given the limitations of our human biology. Then, dedicate optional days to this event every month. If someone sends a note in the morning: "I have cramps." the team knows she's unreachable for that day. That's it. No sick days, no fighting through a day of pain at the office, and no unnecessarily burdensome decision.</div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'; font-size: 16px; line-height: 25.6px; margin-bottom: 16px;">We look forward to a day when this policy is so well understood and so commonplace it need not even be written down. But given that this hasn't even always been an explicit policy at nilenso (and we like to think of ourselves as relatively progressive), we realize there is still much work to be done.</div><div style="box-sizing: border-box; color: #333333; font-size: 16px; line-height: 25.6px;"><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';">Many thanks to the women on our team. Your openness is the only thing that makes this shared understanding possible.</div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><hr /><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><h3 style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol'; text-align: left;">Appendix: Q &amp; A</h3><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';">There were a number of questions asked when we drafted this short article. We're presenting them outside the scope of the article in a Q&amp;A format so that it might be updated later.</div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><b>What is the status quo?</b></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';">Some companies do have specific policies governing time off for menstrual pain, but most do not address it and it thus gets combined with standard sick leave.</div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><b>How/why is nilenso's policy different?</b></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';">The policy at nilenso is inherently to [attempt to] eliminate the taboo surrounding conversations <i>about </i>menstruation. Menstruation is a known quantity: it is common to all pre-menopausal adult women and it occurs 13 times a year. As such, it should be addressed in isolation. To separate menstruation from health issues (migraines, flu, food poisoning, or any of the other issues which cause someone to take leave from work) demands that one's environment avoid conflating the two, implicitly or explicitly. This requires an explicit acceptance of the terms governing the policy.</div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';">Our policy is this: When you have cramps, send an email (or equivalent) notifying the team that "I have cramps." and then take the day off.<br /><br /><br /><b>Isn't this problem solved by unlimited sick leave?</b><br /><br />No, for two reasons. The first reason is straightforward: menstruation is not an illness. As mentioned above, it is a natural and cyclical (therefore, predicable) process.<br /><br />The second reason is somewhat nuanced but worth considering in its own right: policies on Sick Leave are not static. Nilenso's own policy on Sick Leave has changed drastically in recent years and our particular example is precisely why unlimited sick leave doesn't solve the problem in a satisfactory way. Last year, we eliminated unlimited sick leave. We still have unlimited sick leave for disability (say when someone is seriously injured or has Dengue Fever, which has happened) but for various reasons we now track sick days. If our menstruation policy and sick leave policy were conflated, eliminating unlimited sick leave would have had direct consequences on menstruation leave.</div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><b>How do we get from "taboo" to "normal"?</b></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';">We cheated. We wrote this blog post first, passed around a paper copy of the draft, had one-on-one conversations, had lunchtime conversations, and finally spoke about it collectively in a meeting. Your company can try each of those things but there's no recipe.</div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';">Perhaps start by pointing your colleagues to this article and then discuss it. If you feel like we can help, ask us questions <a href="http://twitter.com/nilenso" target="_blank">on Twitter</a> or <a href="mailto:hello@nilenso.com" target="_blank">send us an email</a>.</div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><b>What is the difference between a "policy" and a "guideline"?</b></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';">One hopes that, given enough time, most companies will not require a policy to take leaves for menstrual cramps. Until then, however, we will lean on the #2 Rule in the <a href="https://www.python.org/dev/peps/pep-0020/" target="_blank">Zen of Python</a>:</div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><span style="font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;"><b>"Explicit is better than implicit."</b></span><br /><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';">There are a number of reasons for this. We do not want the guideline or policy to fall into question and administration of our business changes (nilenso is structured as a representative democracy and the administration is meant to change). Every employee should understand the terms of the agreement, since both a guideline and a policy are an agreement between the organization and its constituent members. An explicit written policy, in plain English, is easier to understand than a guideline.</div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';">Perhaps most importantly (since it is future-facing), a written policy forces changes to the policy to also be made explicitly. For example, it would be a disappointing regression of the policy indeed if we were to begin demanding proof of someone's menstrual cramps... but this has occurred in other corporations in other countries, which means it isn't unheard of. A written policy ensures such regressions (or any other change) is identified as an event in the common legal understanding between the employees of the company. Events future to these changes can then retrospect on the change and how/why it came about.</div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><b>What about similar policies which have failed?</b></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';">There are a number of articles (we won't link any here) which attack <a href="https://en.wikipedia.org/wiki/Menstrual_leave" target="_blank">menstrual leave</a>, citing examples in particular countries and companies across the globe. These policies have not always been successful and the failed installations often seem to be a product of sexism. However, where they have failed, such articles do not propose alternatives. The implicit alternative is to return to the consumption of sick leaves. The argument that menstrual leave exacerbates existing sexism in the workplace is weak, at best. "Existing sexism" is not a baby to be coddled nor a concept to keep safely hidden. There is sexism in every work space and for the infection to be removed it must be dug out. If your workplace or office does not already have frank, open discussions about the state of sexism, bigotry, racism, and zealotry in society, you might use menstrual leave as a conversation piece to get started.</div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';">Nilenso is far from perfect and our preferences, fears, and prejudices guide us as much as anyone else. But we are willing to discuss them in an open forum in such a way that a menstrual leave policy does not engender a feeling of unfairness.</div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><b>How and why does Menstrual Leave differ from chronic affectations, such as migraines?</b></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><br /></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';">It is entirely possible that corporations and governments should consider a policy segregating chronic illness from "regular" sick leave. Thankfully, that conversation can be had in isolation. (A<span style="line-height: 25.6px;">nd it should be!) Migraines, diabetes, depression... there is a long list of physical and mental health issues which may affect your employees either periodically or repeatedly. However, none of these conditions is inherent to one's existence as a human being. Each of these illnesses is variously treatable, preventable, and/or curable. It cannot be said that the entirety of humanity is influenced by any particular one, routinely.</span></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">This can be said of menstruation. Though there are medical connotations to menstruation (we find tampons in pharmacies, Gynaecology is a medical profession, etc.) the event itself bears two notable characteristics:</span></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span></div><div style="font-family: 'helvetica neue', helvetica, 'segoe ui', arial, freesans, sans-serif, 'apple color emoji', 'segoe ui emoji', 'segoe ui symbol';"></div><ol style="text-align: left;"><li><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif; line-height: 25.6px;">It is a routine (monthly) component of life</span></li><li><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif; line-height: 25.6px;">It affects 50% of the population</span></li></ol><div><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span></div><div><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Menstruation is not inherently a <i>medical</i> event any more than urination, nose-blowing, or sleep. These activities may require medical attention from time to time but they are all a normal and regular part of life.</span><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><b>What about cases of menstruation occurring twice a month?</b></span><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">This happens. For some women, it's even quite common. Everyone on staff should be aware of it so that multiple menstruation comes as no surprise. The policy remains the same, however: "I have cramps."</span><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><b>How do you verify that the second time is genuine?</b></span><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">You don't. If you need to, you have bigger problems. As an employer, it is not your responsibility to ask for doctor's notes or marriage certificates when your employees take days off due to illness or family functions. Your responsibility to the internal workings of your employees bodies? Even less so.</span><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">One of the repeated lessons of nilenso from the past three years has been "don't measure the beach by counting grains of sand." It applies to billable hours, the review cycle, procurement, signing contracts... pretty much everything you can think of when running a business.</span><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Rather than applying effort into making the employer-employee relationship a science with laser focus on detail, apply that same effort to trust.</span><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><b>What if the policy is misused to someone's personal advantage?</b></span><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">We understand that this policy can be taken advantage of but this is true of every policy. Responding to abuse of any leave policy is orthogonal to the structure of the policy itself. For example, nilenso has a few other distinct leave policies:</span><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><br /><ol style="text-align: left;"><li><span style="line-height: 25.6px;"><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><u>National holidays:</u> When we are legally obligated to close the office, everyone should notify their teams and clients.</span></span></li><li><span style="line-height: 25.6px;"><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><u>Vacation:</u> Leave for vacation is requested of the team and client, with enough lead time to plan around the person's absence.</span></span></li><li><span style="line-height: 25.6px;"><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><u>(Limited) Sick Leave:</u> Illness is hard to anticipate, so this usually comes as an email to the team that same morning.</span></span></li><li><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><u>(Unlimited) Very Sick Leave:</u> Bangalore is subtropical, giving us both beautiful weather and exposure to very serious diseases. Dengue, for example, is very common and can put someone on extended leave for a month or more.</span></li></ol><div><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span></div><div><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Obviously, each type of leave is subject to a different kind of abuse. We trust everyone not to take sudden vacation without notice. We trust everyone to take sick days only when they feel genuinely unwell.</span></div><div><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span></div><div><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">When we have seen "abuse" of such policies at nilenso, it hasn't been a devious attempt to deceive the company for one's personal advantage. For those in managerial and administrative positions, conversations about abuse of the leave policy tend to be about excessive liberties taken. Some of these conversations can happen in a group, some are better one-on-one. In the case of a perceived abuse of menstrual leave, a female (for obvious reasons) senior staff member should approach the conversation with a curious and open mind. As before, if the environment is one of mutual trust this conversation shouldn't be difficult.</span></div><div><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span></div><div><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span></div><div><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><b>What if I want to come to work?</b></span></div><div><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span></div><div><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Of course! It's important that this policy remain <i>optional</i>. Not everyone experiences menstruation the same way. Some women we spoke to prefer to be at home during menstrual cramps. Others prefer to come to the office and work independently in a comfortable space. Some even have support groups who prepare food &amp; tea for anyone who is menstruating and give them a comfortable space while allowing them to be with other people. It is important to figure out what works for your company and for you as an individual.</span></div><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><b>I work at a large corporation and I'm skeptical of introducing such a policy. How could we make it work?</b></span><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">We understand your skepticism. Every organization is different and will require a slightly different approach. Even two organizations of comparable size may face drastically different challenges when implementing a policy like this. We talked about what this policy might look like in a larger organization and came up with three broad points to consider:</span><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><br /><ol style="text-align: left;"><li><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif; line-height: 25.6px;"><u>Openness:</u> Not everyone needs to know about everyone else's leave. For something as personal as menstrual leave, every organization will need to consider the audience. Who needs to know? Your boss? Your team? HR? How comfortable are people in your organization with sharing such information, and how broadly?</span></li><li><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif; line-height: 25.6px;"><u>Abuse:</u> We've covered this above but it's worth reiterating that we feel the only solution to preventing abuse is to grow trust within the hierarchy of your organization and between individuals.</span></li><li><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif; line-height: 25.6px;"><u>Taboo:</u> Work continuously to dissolve the taboo. Only if everyone is well-informed and the conversation is open and honest can a group find the openness required for successful execution of the policy and the trust required to eliminate abuse.</span></li></ol><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">In a large company, such a policy is likely to fall under the purview of Human Resources. It will probably contain more words. There may be multiple layers of communication required. None of these complications change the foundation of the policy, however: eliminate the taboo associated with menstruation by talking about it.</span><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><br /><b><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">Must I announce "I have cramps." explicitly and publicly?</span></b><br /><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><br /><div class="p1"><span class="s1"><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">The short answer is no.</span></span></div><div class="p2"><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><span class="s2"></span><br /></span></div><br /><div class="p3"><span class="s2"><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;">This is the token phrase at nilenso and (all) our leaves are usually announced globally, but it need not work this way. Every organisation (every individual within the organisation) can collectively agree on who the announcement needs to be made to, and with what level of specificity, as long as it's clear and unambiguous. Avoid euphemisms.</span></span></div><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span><span style="font-family: &quot;helvetica neue&quot; , &quot;arial&quot; , &quot;helvetica&quot; , sans-serif;"><br /></span></div></div></div>


<div class="author">
  <img src="http://nilenso.com/images/people/steven-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deobald">Steven Deobald</a> - check out <a href="http://blog.deobald.ca/">Hungry, horny, sleepy, curious.</a></i>
  </span>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Threading macros in clojure]]></title>
    <link href="http://blog.nilenso.com/blog/2016/05/12/threading-macros-in-clojure/"/>
    
    <updated>2016-05-12T00:00:00-04:00</updated>
    <id>http://blog.nilenso.com/blog/2016/05/12/threading-macros-in-clojure</id>
    
    <content type="html"><![CDATA[<p>A few days into learning clojure, I thought it would be a good idea to look at some actual clojure projects in github. I was feeling all confident and what not &#8211; you know getting used to lispy way of writing things. The purpose of going through some code, was to get a gist of what was going on in the code, if not understanding it fully. I guess you already know where this is going don&#8217;t you ? Yep, I find myself reading through code and I find these two, <code>-&gt;</code> and <code>-&gt;&gt;</code> (and a lot more <em>scary </em>stuff) staring at me, and I had no clue what to make of it. I guess there would at least be a few of you guys who felt the same.</p>


<p>Apparently, they are called threading macros. <code>-&gt;</code> is the thread first and <code>-&gt;&gt;</code> thread last macros, and they are syntactical sugar to your code. It makes reading/writing code easier. &#8220;Meh! Just that?&#8221; you ask. Let&#8217;s see.</p>


<p>The syntax goes something like this : <a href="http://clojuredocs.org/clojure.core/-%3E"><code>(-&gt; x &amp; forms)</code></a> and <a href="http://clojuredocs.org/clojure.core/-%3E%3E"><code>(-&gt;&gt; x &amp; forms)</code></a>. The following examples might help you understand it.</p>


<p>Let say you want to do this (divide 2 by 1 then subtract 3 then add 4 and multiply with 5). How would you write it in clojure?</p>


<h2><a id="user-content--" class="anchor" href="https://github.com/krish8664/til/blob/master/clojure/threading.md#-"></a>-&gt;</h2>


<div class="highlight highlight-source-clojure">
<div class="code-box"><div class="code-title"><i class="fa fa-code"></i> <div class="pull-right"><a href="#" class="btn btn-default btn-xs toggle-code" data-toggle="tooltip" title="Toggle code"><i class="fa fa-toggle-up"></i></a></div></div><pre >user=&gt; (<span class="pl-en">*</span> (<span class="pl-en">+</span> (<span class="pl-en">-</span> (<span class="pl-en">/</span> <span class="pl-c1">2</span> <span class="pl-c1">1</span>) <span class="pl-c1">3</span>) <span class="pl-c1">4</span> )<span class="pl-c1">5</span>)
<span class="pl-c1">15</span></pre></div>
</div>


<p>Boy! It can get difficult to read when you have a bunch of these strung together.</p>


<p>Now lets see how we write it with <code>-&gt;</code></p>


<div class="highlight highlight-source-clojure">
<div class="code-box"><div class="code-title"><i class="fa fa-code"></i> <div class="pull-right"><a href="#" class="btn btn-default btn-xs toggle-code" data-toggle="tooltip" title="Toggle code"><i class="fa fa-toggle-up"></i></a></div></div><pre >user=&gt; (<span class="pl-en">-&gt;</span> <span class="pl-c1">2</span>
       (<span class="pl-en">/</span> <span class="pl-c1">1</span>)
       (<span class="pl-en">-</span> <span class="pl-c1">3</span>)
       (<span class="pl-en">+</span> <span class="pl-c1">4</span>)
       (<span class="pl-en">*</span> <span class="pl-c1">5</span>))
<span class="pl-c1">15</span></pre></div>
</div>


<p>Woh! This is a lot simpler to read (at least for me)! So what happens here is the thread first macro just takes the 2 and then pass it as the first argument to the next function and then the result of that as the first argument to the next and so on.</p>


<h2><a id="user-content---1" class="anchor" href="https://github.com/krish8664/til/blob/master/clojure/threading.md#--1"></a>-&gt;&gt;</h2>


<p>Thread last does something similar, instead of passing it as the first argument it would pass it as the last argument. So if you where to apply the <code>-&gt;&gt;</code> to the previous example you would get</p>


<div class="highlight highlight-source-clojure">
<div class="code-box"><div class="code-title"><i class="fa fa-code"></i> <div class="pull-right"><a href="#" class="btn btn-default btn-xs toggle-code" data-toggle="tooltip" title="Toggle code"><i class="fa fa-toggle-up"></i></a></div></div><pre >user=&gt; (<span class="pl-en">-&gt;&gt;</span> <span class="pl-c1">2</span>
        (<span class="pl-en">/</span> <span class="pl-c1">1</span>)
        (<span class="pl-en">-</span> <span class="pl-c1">3</span>)
        (<span class="pl-en">+</span> <span class="pl-c1">4</span>)
        (<span class="pl-en">*</span> <span class="pl-c1">5</span>))
<span class="pl-c1">65/2</span></pre></div>
</div>


<p>which is</p>


<div class="highlight highlight-source-clojure">
<div class="code-box"><div class="code-title"><i class="fa fa-code"></i> <div class="pull-right"><a href="#" class="btn btn-default btn-xs toggle-code" data-toggle="tooltip" title="Toggle code"><i class="fa fa-toggle-up"></i></a></div></div><pre >user=&gt; (<span class="pl-en">*</span> <span class="pl-c1">5</span> (<span class="pl-en">+</span> <span class="pl-c1">4</span> (<span class="pl-en">-</span> <span class="pl-c1">3</span> (<span class="pl-en">/</span> <span class="pl-c1">1</span> <span class="pl-c1">2</span>))))
<span class="pl-c1">65/2</span></pre></div>
</div>


<h2><a id="user-content-objects-and-collections" class="anchor" href="https://github.com/krish8664/til/blob/master/clojure/threading.md#objects-and-collections"></a>Objects and collections</h2>


<p>My favourite use of the threading macros has been when I have used them with java/clojure data structures. It makes handling them a lot easier.</p>


<h3><a id="user-content-collections" class="anchor" href="https://github.com/krish8664/til/blob/master/clojure/threading.md#collections"></a>Collections</h3>


<p>The thread-last macro <code>-&gt;&gt;</code> is very useful in dealing with collections. Where you have to transform them or apply functions to them, which is what you might be doing in a lot of your clojure code. For example, if you have this collection:</p>


<div class="highlight highlight-source-clojure">
<div class="code-box"><div class="code-title"><i class="fa fa-code"></i> <div class="pull-right"><a href="#" class="btn btn-default btn-xs toggle-code" data-toggle="tooltip" title="Toggle code"><i class="fa fa-toggle-up"></i></a></div></div><pre >(<span class="pl-k">def</span> x {<span class="pl-c1">:document</span>
    {<span class="pl-c1">:paragraph</span>
     {<span class="pl-c1">:text</span> [<span class="pl-s"><span class="pl-pds">"</span>This is the first line<span class="pl-pds">"</span></span>
         <span class="pl-s"><span class="pl-pds">"</span>This is the second line<span class="pl-pds">"</span></span>
         <span class="pl-s"><span class="pl-pds">"</span>This is the third line<span class="pl-pds">"</span></span>]}}})</pre></div>
</div>


<p>Say you want to add a new &#8216;\n&#8217; at the end of each line and then print them together as a single string. How would you do this? Well its easy, you just get the text and then apply map and reduce to it and then print. Let&#8217;s write it shall we?</p>


<div class="highlight highlight-source-clojure">
<div class="code-box"><div class="code-title"><i class="fa fa-code"></i> <div class="pull-right"><a href="#" class="btn btn-default btn-xs toggle-code" data-toggle="tooltip" title="Toggle code"><i class="fa fa-toggle-up"></i></a></div></div><pre >(<span class="pl-en">println</span> (<span class="pl-en">reduce</span> str (<span class="pl-en">map</span> #(<span class="pl-en">str</span> % <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>) (<span class="pl-c1">:text</span> (<span class="pl-c1">:paragraph</span> (<span class="pl-c1">:document</span> x))))))</pre></div>
</div>


<p>Now lets take a look at this if we decide to write it using thread last macro</p>


<div class="highlight highlight-source-clojure">
<div class="code-box"><div class="code-title"><i class="fa fa-code"></i> <div class="pull-right"><a href="#" class="btn btn-default btn-xs toggle-code" data-toggle="tooltip" title="Toggle code"><i class="fa fa-toggle-up"></i></a></div></div><pre >(<span class="pl-en">-&gt;&gt;</span> x
     <span class="pl-c1">:document</span> <span class="pl-c1">:paragraph</span> <span class="pl-c1">:text</span>
     (<span class="pl-en">map</span> #(<span class="pl-en">str</span> % <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>))
     (<span class="pl-en">reduce</span> str)
     println)</pre></div>
</div>


<p>It&#8217;s a lot more cleaner, and you don&#8217;t have to keep matching the parenthesis to actually figure out what is happening. This works even better when you want to do a lot more transformation on the collections.</p>


<p>While at it, we can make use of this neat function <code>get-in</code> that helps you get values from deep inside a map, which is somewhat better to use at times. The advantage of using <code>get-in</code> over the threading would be that it helps you supply a <code>not-found</code> value, the would be returned if the key you are looking for is not there in the collection. Pretty neat huh? Let&#8217;s try that.</p>


<div class="highlight highlight-source-clojure">
<div class="code-box"><div class="code-title"><i class="fa fa-code"></i> <div class="pull-right"><a href="#" class="btn btn-default btn-xs toggle-code" data-toggle="tooltip" title="Toggle code"><i class="fa fa-toggle-up"></i></a></div></div><pre >(<span class="pl-en">-&gt;&gt;</span> (<span class="pl-en">get-in</span> x [<span class="pl-c1">:document</span> <span class="pl-c1">:paragraph</span> <span class="pl-c1">:text</span>] [<span class="pl-s"><span class="pl-pds">"</span>No text found<span class="pl-pds">"</span></span>])
     (<span class="pl-en">map</span> #(<span class="pl-en">str</span> % <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\n</span><span class="pl-pds">"</span></span>))
     (<span class="pl-en">reduce</span> str)
     println)</pre></div>
</div>


<h3><a id="user-content-objects" class="anchor" href="https://github.com/krish8664/til/blob/master/clojure/threading.md#objects"></a>Objects</h3>


<p>Now if you are working with java interop and you aren&#8217;t using the thread-first macro, then this might change your mind. Let&#8217;s take this example, where you have a java object and you apply a series of methods on the Java object or Java objects returned on applying these methods. This is how you would be doing it.</p>


<div class="highlight highlight-source-clojure">
<div class="code-box"><div class="code-title"><i class="fa fa-code"></i> <div class="pull-right"><a href="#" class="btn btn-default btn-xs toggle-code" data-toggle="tooltip" title="Toggle code"><i class="fa fa-toggle-up"></i></a></div></div><pre >(<span class="pl-en">.add</span> (<span class="pl-en">.getContent</span> (<span class="pl-en">.getBody</span> (<span class="pl-en">.getJaxbelement</span> (<span class="pl-en">.getMaindocumentpart</span> (<span class="pl-en">Wordprocessingmlpackage/createPackage</span>)))) paragraph)</pre></div>
</div>


<p>Now with thread first this becomes</p>


<div class="highlight highlight-source-clojure">
<div class="code-box"><div class="code-title"><i class="fa fa-code"></i> <div class="pull-right"><a href="#" class="btn btn-default btn-xs toggle-code" data-toggle="tooltip" title="Toggle code"><i class="fa fa-toggle-up"></i></a></div></div><pre >(<span class="pl-en">-&gt;</span> (<span class="pl-en">WordprocessingMLPackage/createPackage</span>)
    .getMainDocumentPart
    .getJaxbElement
    .getBody
    .getContent
    (<span class="pl-en">.add</span> paragraph)</pre></div>
</div>


<p>Which is way more easier to read, and write. It is aligned with the original java representation, which aids in better understanding of the code. It feels less clunky than the previous case where you could get lost in all those parenthesis.</p>


<p>Since we are at it, let&#8217;s talk about another function: <code>doto</code>. This is very helpful when you have to apply multiple functions on a single java object. We didn&#8217;t use it in the previous example because, each of the functions were returning a different object.</p>


<p>Consider you have a table-border object and you want to set border to it. This is how you would be writing with thread the <code>doto</code> function.</p>


<div class="highlight highlight-source-clojure">
<div class="code-box"><div class="code-title"><i class="fa fa-code"></i> <div class="pull-right"><a href="#" class="btn btn-default btn-xs toggle-code" data-toggle="tooltip" title="Toggle code"><i class="fa fa-toggle-up"></i></a></div></div><pre >(<span class="pl-k">defn</span> <span class="pl-e">set-table-border</span>
  [table-border border]
  (<span class="pl-en">doto</span> table-border
    (<span class="pl-en">.setBottom</span> border)
    (<span class="pl-en">.setTop</span> border)
    (<span class="pl-en">.setRight</span> border)
    (<span class="pl-en">.setLeft</span> border)
    (<span class="pl-en">.setInsideH</span> border)
    (<span class="pl-en">.setInsideV</span> border)))</pre></div>
</div>


<p>You could use the threading operator or even write it in a single line, but it would be messy.</p>


<p class="p1"><span class="s2">A </span><span class="s3">threading</span><span class="s2"> macro can be used to reverse the read order: the value is primarily for people reading your code later; if using a </span><span class="s3">threading</span><span class="s2"> macro doesn&#8217;t feel like it will make your code easier for the next person to read, it&#8217;s probably the wrong choice.</span></p>


<div class="author">
  <img src="http://blog.unnikrishnan.in/wp-content/uploads/2016/05/13124641_10207964967054916_8185125548463219102_n-e1464062267378.jpg" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/krish8664">Unnikrishnan Geethagovindan</a> - check out <a href="http://blog.unnikrishnan.in">My blog</a></i>
  </span>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Suggestions: Conferences and festivals]]></title>
    <link href="http://blog.nilenso.com/blog/2016/03/01/suggestions-conferences-and-festivals/"/>
    
    <updated>2016-03-01T00:00:00-05:00</updated>
    <id>http://blog.nilenso.com/blog/2016/03/01/suggestions-conferences-and-festivals</id>
    
    <content type="html"><![CDATA[<div dir="ltr" style="text-align: left;" trbidi="on">I recently attended <a href="http://fossmeet.in/" target="_blank">FOSSMeet 2016</a> at NIT Calicut. The organizers did a fantastic job of setting up the venue, making travel convenient, and putting visitors up in hostels and guest houses. I realize most of the work involved in setting up a successful conference goes on behind the scenes, so it's a testament to their efforts that it went off so smoothly. The gang asked me for feedback multiple times toward the end of the conference. Verbal feedback is always difficult to remember and digest, so I figured the old #openletter format made sense here.<br /><br /><br /><span style="font-size: x-large;"><b>Document!</b></span><br /><br />If everything that goes into a good conference happens invisibly, it's hard to know how to run a conference of your own. In the free/open-source spirit, I hope the folks from FOSSMeet (and other conferences) start documenting their procedures, contact points, processes, and materials.<br /><br />How did you find speakers? Who did you reach out to for content and sponsorship? How did you make the website? How did you coordinate organization? How did you arrange the conference with faculty? What were some of the pitfalls the next organizers should watch out for?<br /><br />Even if this "document" is little more than a blog post with an appropriate title, it could really help someone in the future. Preferably, organizers could publish a living document under a free/open license so other people can iterate on it. I've had multiple conversation with the <a href="http://hasgeek.com/" target="_blank">HasGeek folks</a> about documenting and publishing their procedures.<br /><br /><br /><span style="font-size: x-large;"><b>Zero Waste</b></span><br /><br />I always ask people why they are FOSS proponents and what their desired outcomes are. Answers vary wildly, but building a community (or maintaining one) is often high on everyone's list. Every Indian metropolis is facing a garbage crisis at the moment and events organized and attended by educated, privileged individuals should be setting the standard for city living. I was pleased to see chai served in paper cups at FOSSMeet but disappointed to see food served with styrofoam plates and plastic spoons.<br /><br />Students at NIT Calicut (and other respected universities) may not even be aware that their privilege puts them in the spotlight. When they move to a city like Bangalore or Mumbai, they are the instantly the new educated middle-class of that city. Their behaviour influences others in profound ways and their preferences shape the economy. Demonstrating and advocating for Zero Waste in public spaces like University-hosted conferences is a fantastic way to raise awareness.<br /><br />Zero Waste events are entirely possible and the resources exist to learn how to run one. Check out <a href="http://2bin1bag.in/">2bin1bag.in</a>, write to them with questions at&nbsp;<a href="mailto:2bins1bag@gmail.com">2bins1bag@gmail.com</a>, and download their <a href="http://www.2bin1bag.in/#!resources/cdvr" target="_blank">Zero Waste Event resources</a>.<br /><br />It's not necessary to go completely paperless -- I was happy to have my paper schedule crumpled in my pocket as I jumped from one workshop to the next talk. But a single A4 printed schedule is probably plenty.<br /><br /><br /><span style="font-size: x-large;"><b>Beautiful Things</b></span><br /><blockquote class="tr_bq"><i>"Have nothing in your house that you do not know to be useful, or believe to be beautiful." -William Morris</i></blockquote>I would take this suggestion from Morris one step further: having nothing that you do not know to be useful <b>and</b> believe to be beautiful. Dr. Sasi Kumar mentioned this in his opening keynote: why give a bouquet of flowers? Why not a single flower? Why not a book?<br /><br />At FOSSMeet, we received plaques thanking us for our time and participation. This is a wonderful gesture and I do feel the plaque falls into the "beautiful" category. However, now that I'm back in Bangalore, it will do little but engage its own beauty on the bookshelf of the nilenso library. If I had been given a book, I would have ample opportunity to think back to my weekend at FOSSMeet and to share that with others. I can hardly imagine a gift I would rather receive than a book, for any occasion.<br /><br /><br /><span style="font-size: x-large;"><b>Reach Out to Reach Out</b></span><br /><br />Most of FOSSMeet was orchestrated through the NIT Calicut alumni network, which I think is fantastic. This approach could be taken one step further: Have the network reach out to their networks, as much as possible. A conference on Free and Open Source Software is bound to have a wide appeal, since there is likely to be little or no marketing for joining such-and-such company or buying into such-and-such product.<br /><br />Free and Open Source Software (as far as this conference was concerned, at least) is in use in every corporation, in every office, and in almost every role. Often the network of FOSS, open data, open networks, and free documentation is non-obvious. This means that a conference focused on FOSS is likely to succeed by reaching out to more companies, non-profits, and user groups. At worst, you'll be ignored. But it's very likely you will find a whole new branch of free and open society you didn't even know existed.<br /><br />The networks in the post-university world are vast... but surprisingly tight. Make a point of using social media to engage with potential speakers and attendees months in advance. Not everyone will make it to FOSSMeet 2017 but hopefully we will all know about it.<br /><br /><br /><span style="font-size: x-large;"><b>Centralize Communication</b></span><br /><br />For FOSSMeet, it would have been nice to see heavier use of the @fossmeet twitter handle. Usually events like this have photos and quotes coming out of such a handle left-right-and-centre. That Twitter account can also be a triage for other communication, as it's easy for people to reach out with a quick tweet before they are pointed toward the correct IRC channel, mailing list, email address, or phone number. The 8 contact points at the bottom of the <a href="http://fossmeet.in/">fossmeet.in</a> website are a bit daunting. If I weren't sure how to travel to NIT Calicut (or any other university) or what my residential arrangements would be, my first preference would be to tweet or email a central contact point.<br /><br /><br />These are all minor feedback points, but I hope that everyone running conferences at least takes a serious look at the first three (Document, Zero Waste, and Beautiful Things) as these could quickly create a feedback loop fostering increasingly positive events, year on year.</div>


<div class="author">
  <img src="http://nilenso.com/images/people/steven-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deobald">Steven Deobald</a> - check out <a href="http://blog.deobald.ca/">Hungry, horny, sleepy, curious.</a></i>
  </span>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[HOWTO: Bicycle Commute in Bangalore]]></title>
    <link href="http://blog.nilenso.com/blog/2016/02/16/howto-bicycle-commute-in-bangalore/"/>
    
    <updated>2016-02-16T00:00:00-05:00</updated>
    <id>http://blog.nilenso.com/blog/2016/02/16/howto-bicycle-commute-in-bangalore</id>
    
    <content type="html"><![CDATA[<div dir="ltr" style="text-align: left;" trbidi="on">Riding a bicycle in Bangalore is surprisingly easy. Bicycles are nimble and the traffic is slow. The roads are... good enough. The weather is perfect. The pollution is an issue but <i>not</i> riding a bicycle only exacerbates that situation. Here are my recommendations for making riding a bike in Bangalore something between tolerable and enjoyable.<br /><br /><br /><h3 style="text-align: left;"><span style="font-size: x-large;"><b>Required #1: Good Brakes</b></span></h3><br />Traffic in Bangalore isn't just slow -- it's choppy. Millions of people driving cars on roads that can't support them mean traffic is as stop-and-go as a choked suburban <strike>freeway</strike> parking lot in America. Be prepared to brake. A lot. At best it will waste a lot of energy but at worst, you can get into a serious accident because sometimes you will need to stop quickly at the bottom of a hill.<br /><br />Get two brakes, even if you ride a fixie. Keep the rubber fresh and keep the cables tight.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://2.bp.blogspot.com/-NRV99axMxDI/VsLBdTrOE7I/AAAAAAAARuY/lW7wzCegn3A/s1600/brakes1.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="https://2.bp.blogspot.com/-NRV99axMxDI/VsLBdTrOE7I/AAAAAAAARuY/lW7wzCegn3A/s320/brakes1.jpg" width="320" /></a></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://3.bp.blogspot.com/-Y5uojfcb_Ns/VsLBdZMBloI/AAAAAAAARuc/S1r7MQGGbj8/s1600/brakes2.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="https://3.bp.blogspot.com/-Y5uojfcb_Ns/VsLBdZMBloI/AAAAAAAARuc/S1r7MQGGbj8/s320/brakes2.jpg" width="320" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><h3 style="clear: both; text-align: left;"><span style="font-size: x-large;"><b>Required #2: Helmet</b></span></h3><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Surprisingly, a helmet comes in at #2. It will save you if you ever have a crash but brakes ensure you won't crash. Traffic in Bangalore is shockingly attentive. In 3 years of riding here I have never once felt at risk of a collision that wasn't my fault (because I had cheap brakes). This obviously isn't universally true, but make sure you're not hitting the ground before you worry about what will happen if you do.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Keep a beanie or hat under your helmet so you can wash it. You will sweat sometimes, especially in the summer.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="https://1.bp.blogspot.com/-n4CIWBObSOI/VsLDlpUvFfI/AAAAAAAARuo/vyUC2lnry0o/s1600/helmet.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="https://1.bp.blogspot.com/-n4CIWBObSOI/VsLDlpUvFfI/AAAAAAAARuo/vyUC2lnry0o/s320/helmet.jpg" width="320" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><h3 style="clear: both; text-align: left;"><b><span style="font-size: x-large;"><span style="font-size: x-large;">Required #3: Lights</span></span></b></h3><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Believe it or not, we are still in non-negotiable territory. Lights are for your own safety and the safety of pedestrians. Even if you don't plan to ride at night, you will. Someone will convince you to stay for <i>just one more chai</i> and the next thing you know, it's dark out.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Only buy USB-rechargeable lights.</div><div class="separator" style="clear: both; text-align: left;">Only buy ridiculously bright lights.</div><div class="separator" style="clear: both; text-align: left;">Only buy rubber lights.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Invest money here. The USB recharging means you're never stuck running out for batteries and you can charge them with your phone at home/work. Many streets in Bangalore are poorly-lit; a bright front light will save you from crashing in potholes. I've had lights stolen... even by children who just think they're neat. Rubber lights mean you can take them off at every stop. You probably need to order from Amazon (local bike shops still don't carry decent lights for some reason) but it's worth it.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Pictured are the <a href="http://amzn.com/B009WGFYRC" target="_blank">Serfas Thunderbolt USB Taillight</a>&nbsp;(Rs. 2200) and the <a href="http://amzn.com/B00KAPC62K" target="_blank">Light and Motion Urban 800FC Headlight</a>&nbsp;(Rs. 8400). I couldn't be happier with either of these. The <a href="http://amzn.com/B00YIPEX0Q" target="_blank">Light and Motion Urban 500</a>&nbsp;(Rs. 4800) would also work at about half the price, but 500 lumens is about as low as I'd recommend.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="https://1.bp.blogspot.com/-G1MWtacT-X0/VsLa_6ifcyI/AAAAAAAARv8/o2yGUFQHHQU/s1600/lights.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="239" src="https://1.bp.blogspot.com/-G1MWtacT-X0/VsLa_6ifcyI/AAAAAAAARv8/o2yGUFQHHQU/s320/lights.jpg" width="320" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><h3 style="clear: both; text-align: left;"><span style="font-size: x-large;"><b><span style="font-size: x-large;">Required #4: Noise Pollution Cancellation</span></b></span></h3><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">About 25% of drivers have no idea what the hell they are doing and just honk their way through the entire street. If you've spent much time commuting by motorcycle, you might be accustomed to this. I am not. My road noise interpretation was baked into my brain growing up in Southwest Saskatchewan. A loud-ass "HOOOONNNNKKKK!!!!" still means "Danger! Risk of Death!" so I impulsively turn my head to see. Any experience two-wheel rider knows that jerking your head around means jerking your vehicle around. At high speeds, this isn't safe.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">So, in the interest of safety (oddly enough), I always ride with headphones. I never turn them all the way up -- a minimal amount of road noise is valuable, since some honks (from large trucks and buses, in particular) actually do mean "Danger! Risk of Death!" and not just "Get the fuck out of my way, bicycle man." Sometimes I even just ride with them in and no music on; they dampen the noise pollution and provide a believable excuse for not responding to angry motorists obnoxious horn usage.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><i><dreams>Every time I ignore a horn, I like to believe I've contributed one input worth of behavioural training toward a single Bangalore motorist that their horn is utterly ineffective toward cyclists. Like puppies learning not to shit in the house, enough bicycles on the road might eventually train them all that horns are completely unnecessary outside of emergencies.</dreams></i></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="https://4.bp.blogspot.com/-7umoQ374t1g/VsLJP2-odgI/AAAAAAAARu4/QuFZ2VQjApM/s1600/headphones.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="https://4.bp.blogspot.com/-7umoQ374t1g/VsLJP2-odgI/AAAAAAAARu4/QuFZ2VQjApM/s320/headphones.jpg" width="320" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><h3 style="clear: both; text-align: left;"><b><span style="font-size: x-large;"><span style="font-size: x-large;">Handy #1: Gas Mask</span></span></b></h3><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">This is a more recent addition to my kit, but I'm increasingly convinced it's worth it. This one isn't about immediate safety so much as it's about long-term health. It's uncomfortable, but it beats breathing a lungful of carcinogenic smoke from a garbage fire. <a href="http://www.2bin1bag.in/" target="_blank">Segregate your garbage</a>, Bangalore. It's (finally) the law.</div><div class="separator" style="clear: both; text-align: left;"><i><br /></i></div><div class="separator" style="clear: both; text-align: left;"><i><dreams>I like to imagine that every time someone sees me wearing a gas mask they feel instant shame for not segregating their garbage. I know this isn't true at all but it's a little more encouragement to keep this weird wetsuit rubber thing smooshed onto my face.</dreams></i></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="https://1.bp.blogspot.com/-NP_5RMDhTEQ/VsLKEVhMnaI/AAAAAAAARvA/6FOYPy23iH0/s1600/gasmask.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="https://1.bp.blogspot.com/-NP_5RMDhTEQ/VsLKEVhMnaI/AAAAAAAARvA/6FOYPy23iH0/s320/gasmask.jpg" width="240" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><h3 style="clear: both; text-align: left;"><span style="font-size: large;"><b><span style="font-size: x-large;">Handy #2: &nbsp;Portable Lock</span></b></span></h3><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">This isn't about your safety at all. Even if you think you'll never park your bike anywhere but your house or your workplace, always keep a good lock with you. We had a bicycle stolen outside a popular brunch place -- busy streets don't deter thieves. Whatever lock you buy, make sure you can always carry it with you. It should fit in your bag, around your waist, or on the bicycle frame.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="https://4.bp.blogspot.com/--cRnCF_Lawg/VsLVWoxsWdI/AAAAAAAARvY/BDRzsGfa0zQ/s1600/lock2.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="https://4.bp.blogspot.com/--cRnCF_Lawg/VsLVWoxsWdI/AAAAAAAARvY/BDRzsGfa0zQ/s320/lock2.jpg" width="240" /></a></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://3.bp.blogspot.com/-Sl0KEExX9oc/VsLVWhA15zI/AAAAAAAARvU/ncgCv0rMOH8/s1600/lock.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="https://3.bp.blogspot.com/-Sl0KEExX9oc/VsLVWhA15zI/AAAAAAAARvU/ncgCv0rMOH8/s320/lock.jpg" width="240" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><h3 style="clear: both; text-align: left;"><span style="font-size: large;"><b><span style="font-size: x-large;">Handy #3: Kevlar Tires</span></b></span></h3><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Bangalore's roads aren't the worst I've ridden. Some streets in Chicago were actually much worse, where the city had decided to rip up a full mile of asphalt in anticipation of repairing it... eventually. They're bad enough that you will suffer flats, though. Unless! Unless you get kevlar.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">The best option are kevlar-lined tires like <a href="http://amzn.com/B00288HOBU" target="_blank">Continental Gatorskins</a> or &nbsp;<a href="http://www.specialized.com/us/en/ftb/road-tires/all-season-tires/all-condition-armadillo-elite" target="_blank">Specialized Armadillos</a>. I rode one one of each for all of 2015 with zero flats. High-quality tires also endure higher pressure, which helps prevent pinch flats for those times you do hit a pothole or a sharp speed breaker.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">If you can't find pre-lined tires, most shops in the city now carry tire liners. If you want to be truly paranoid, you can even line kevlar tires with... more kevlar.&nbsp;</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="https://4.bp.blogspot.com/-g9WgF-qa63w/VsLXTZx1EVI/AAAAAAAARvk/Qjdg6nHdQis/s1600/tyre.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="https://4.bp.blogspot.com/-g9WgF-qa63w/VsLXTZx1EVI/AAAAAAAARvk/Qjdg6nHdQis/s320/tyre.jpg" width="320" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><h3 style="clear: both; text-align: left;"><span style="font-size: large;"><b><span style="font-size: x-large;">Handy #4: Full Fenders</span></b></span></h3><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Monsoon shouldn't be an excuse for switching back to commuting in a car but drainage in Bangalore isn't ideal, so you'll need to protect yourself. Install the closest-fitting permanent fenders you can get for your bike.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="https://1.bp.blogspot.com/-wNbvcEECazQ/VsLX-B2GMwI/AAAAAAAARvw/sorJfydmrVI/s1600/fender1.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="https://1.bp.blogspot.com/-wNbvcEECazQ/VsLX-B2GMwI/AAAAAAAARvw/sorJfydmrVI/s320/fender1.jpg" width="320" /></a></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://1.bp.blogspot.com/-NWz6zvtjerc/VsLX-NPmTdI/AAAAAAAARvs/SiFeB6Rz2Hk/s1600/fender2.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="https://1.bp.blogspot.com/-NWz6zvtjerc/VsLX-NPmTdI/AAAAAAAARvs/SiFeB6Rz2Hk/s320/fender2.jpg" width="320" /></a></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><h3 style="clear: both; text-align: left;"><span style="font-size: large;"><b><span style="font-size: x-large;">Handy #5: Fixies</span></b></span></h3><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Fixed-gear bicycles are usually the choice of trendy kids who are looking for a difficult ride. Truthfully, if you plan on going fast, they might not be your best option. Particularly going downhill they can be quite dangerous. That said, Bangalore traffic is slow. as. hell. You will be the fastest thing on the road 90% of the time because you will rarely (if ever) reach top speed. A fixie affords you some really nice control at traffic signals and unplanned traffic jams when some doofus decides his Volkswagen's U-turn is more important than the flow of traffic for dozens of vehicles.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">I still can't track stand properly but a fixie still lets me control the bicycle at very low speeds with a lot of precision. As often as I'm left waiting for lumbering cars and SUVs to waddle around each other, I'll never commute on anything else.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><i>Do not rely on your ability to pedal brake.</i>&nbsp;"Required #1: Good Brakes" still applies to fixies. Get good brakes. Two of them. Even if you're an expert fixie rider, you never know who might end up borrowing your bike.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><h3 style="clear: both; text-align: left;"><span style="font-size: x-large;"><b>Bonus: A Badass Office</b></span></h3><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Your office should support your cycling habit. Harass your boss. Better yet, work at an employee-owned company like <a href="http://nilenso.com/" target="_blank">nilenso</a>&nbsp;to make your own rules.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Small, growing companies in Bangalore (such as&nbsp;<a href="http://uncommon.is/" target="_blank">Uncommon</a>&nbsp;and <a href="http://www.hasgeek.com/" target="_blank">HasGeek</a>)&nbsp;are often already pro-bicycle since they have the good sense to listen to their employees even if they aren't employee-owned.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">Your office should have:</div><div class="separator" style="clear: both; text-align: left;"></div><ul style="text-align: left;"><li>parking</li><li>pump (presta and schrader)</li><li>showers</li><li>bicycle tools</li><li>spare tubes</li><li>lube</li></ul><br /><div class="separator" style="clear: both; text-align: left;">...and maybe a bicycle work mount and bicycle trainers... if they're extra-friendly. Forgive the bubblegum pink garage... we're not sure how that happened.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="https://4.bp.blogspot.com/-M8uRLyhISeY/VsLdyBZxS0I/AAAAAAAARwI/cgLcssfrj3M/s1600/mount.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="https://4.bp.blogspot.com/-M8uRLyhISeY/VsLdyBZxS0I/AAAAAAAARwI/cgLcssfrj3M/s320/mount.jpg" width="240" /></a></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://4.bp.blogspot.com/-qpO2tBhvBAA/VsLdyACKJAI/AAAAAAAARwQ/kY39sWwUyDA/s1600/mounts.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="https://4.bp.blogspot.com/-qpO2tBhvBAA/VsLdyACKJAI/AAAAAAAARwQ/kY39sWwUyDA/s320/mounts.jpg" width="240" /></a></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://3.bp.blogspot.com/-3TwjP6j0uLI/VsLdyFCKpVI/AAAAAAAARwM/nkPbiTDftFY/s1600/shower.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="https://3.bp.blogspot.com/-3TwjP6j0uLI/VsLdyFCKpVI/AAAAAAAARwM/nkPbiTDftFY/s320/shower.jpg" width="240" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">I hope this helps someone get on the road. If you have any questions, don't hesitate to shout at me on twitter (<a href="http://twitter.com/deobald" target="_blank">@deobald</a>) or leave a comment.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"><span style="font-size: x-large;"><b>Resources</b></span></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;"></div><ul style="text-align: left;"><li><a href="http://bumsonthesaddle.com/" target="_blank">BumsOnTheSaddle</a>&nbsp;(our favourite bike shop)</li><li><a href="http://www.crankmeisterbicycles.com/" target="_blank">Crankmeister</a> (the local shop in Frazer Town)</li><li><a href="http://www.procycle.in/" target="_blank">ProCycle</a>&nbsp;(Indiranagar, Koramangala)</li><li><a href="https://www.facebook.com/pages/Giant-Starkenn-Cycling-World-Indira-Nagar-Bangalore/330700940419907" target="_blank">Giant Cycles</a> (Indiranagar)</li><li><a href="https://www.facebook.com/groups/545965755503336/" target="_blank">Fixed Gear India</a>&nbsp;(Facebox)</li><li><a href="https://www.facebook.com/BumsOnTheSaddle/" target="_blank">BOTS Group Rides</a> (Facebox)</li><li><a href="https://www.facebook.com/groups/276727932418326/" target="_blank">Bush Porn Babes and Friends Bangalore Branch</a> (Group rides - post a message)</li></ul><br /><div class="separator" style="clear: both; text-align: left;"><br /></div></div>


<div class="author">
  <img src="http://nilenso.com/images/people/steven-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deobald">Steven Deobald</a> - check out <a href="http://blog.deobald.ca/">Hungry, horny, sleepy, curious.</a></i>
  </span>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[How do Vipassana centres in India differ?]]></title>
    <link href="http://blog.nilenso.com/blog/2016/01/20/how-do-vipassana-centres-in-india-differ/"/>
    
    <updated>2016-01-20T00:00:00-05:00</updated>
    <id>http://blog.nilenso.com/blog/2016/01/20/how-do-vipassana-centres-in-india-differ</id>
    
    <content type="html"><![CDATA[<div dir="ltr" style="text-align: left;" trbidi="on"><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;">A friend of mine recently asked for some advice on which Vipassana centre I would recommend for his first course, if he tries it during a visit to India. My explanations ended up being rather verbose, so I figured it wouldn't hurt to publicize them. If you are considering taking a Vipassana course in India, I hope this information is helpful to you!</span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;"><br /></span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;"><br /></span></div><div style="color: #222222; font-family: arial, sans-serif;"><span style="font-size: x-large;">My response:</span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;"><br class="Apple-interchange-newline" />Crazytown! Ha ha! That's awesome. Here's the rundown of the places I've tried so far:</span><br /><span style="font-size: 12.8px;"><br /></span><span style="font-size: 12.8px;"><br /></span><div class="separator" style="clear: both; text-align: center;"><a href="http://s3.amazonaws.com/everystockphoto/fspid/15/50/25/75/india-karnataka-bangalore-15502575-l.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://s3.amazonaws.com/everystockphoto/fspid/15/50/25/75/india-karnataka-bangalore-15502575-l.jpg" height="300" width="400" /></a></div><span style="font-size: 12.8px;"><br /></span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;"><br /></span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;"><b><u>Bangalore (Dhamma Paphulla):</u></b>&nbsp;I did a 3-day course here, and it was okay. The 3-day course is available to anyone who has taken the 10-day introductory course. It was much less intense but I found it really valuable since my first 10-day kind of freaked me out. :P They don't have a pagoda (no meditation cells so you're always in the main hall). At the time they didn't have individual residences so you couldn't meditate there, either. They have a few now. It's directly adjacent to a village so there is sometimes more noise than one would like. There aren't a lot of trees and there aren't really any animals (cute animals provide welcome distraction on the hardest days). The paths are dirt... and sometimes mud. With all of that said, I think I find the teacher at the Bangalore centre (he lives nearby) to be one of the more approachable. The fellow who donated the farmland to create the centre is also a wonderful human being; he helped repair a flat on my mountain bike after the 3-day course then invited me to his house for tea. The centre is, of course, pretty convenient. It's about a Rs.500 Uber ride to get there and if you can't get an Uber/Ola on the way back, there's always rickshaws and buses. The metro almost reaches the village but isn't operational at the major junction points yet.</span><br /><span style="font-size: 12.8px;"><br /></span><span style="font-size: 12.8px;"><br /></span><div class="separator" style="clear: both; text-align: center;"><a href="https://c2.staticflickr.com/4/3269/3105531401_049b6d3e6b.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="266" src="https://c2.staticflickr.com/4/3269/3105531401_049b6d3e6b.jpg" width="400" /></a></div><span style="font-size: 12.8px;"><br /></span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;"><br /></span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;"><b><u>Dharamkot/Dharamshala (Dhamma Sikhara):</u></b>&nbsp;I did my first 10-day course here. Dharamkot is a little village above McLeod Ganj, which is above Dharamshala. The space is wonderful. Weirdly, the centre is built right in the middle of a pine forest the British planted, so the whole place smells like the Canadian Rockies. The village doesn't add much noise -- the monkeys running across the tin roofs are the only intrusive sound. The centre is small and can't grow (despite receiving quite a lot of money in donations, I imagine, due to all the foreign tourists who take courses here) because there is a Tibetan meditation centre to the west and the village to the east. Hence, it has no pagoda and never will, but it does have individual residences for most meditators (shared bathrooms / showers, though) that you can meditate in when the teacher gives you the option. It was nice and cold, which meant no sweaty meditations and no mosquitoes. There are stone paths everywhere. Most of the course was attended by foreigners, which I'm guessing is generally the case because of the centre's proximity to the touristy land of McLeod Ganj. The teacher was some professor (or something) from Delhi. Sometimes he was really helpful and sometimes he felt almost dismissive but I don't think I would have made it through the course without my daily conversations with him.</span><br /><span style="font-size: 12.8px;"><br /></span><span style="font-size: 12.8px;"><br /></span><div class="separator" style="clear: both; text-align: center;"><a href="http://www.thali.dhamma.org/images/photos/dhamma-thali-pagoda.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://www.thali.dhamma.org/images/photos/dhamma-thali-pagoda.jpg" height="300" width="400" /></a></div><span style="font-size: 12.8px;"><br /></span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;"><br /></span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;"><b><u>Jaipur (Dhamma Thali):</u></b>&nbsp;&nbsp;I did my second 10-day here over last Christmas / New Years. This space is beautiful, if somewhat plain (it's in the desert, after all). There were langurs and peacocks and huge flocks of smaller birds. It was cool but not uncomfortably cold, which meant I avoided mosquitoes for one more year. ;) The centre is older and has stone footpaths between the residences, pagoda, and meditation hall(s) -- avoiding dust and mud made a surprising difference in my overall comfort, as I found out this year. It's a huge centre, which means the experience is more intense and the course grounds are busier. There wasn't much space to walk without seeing other dudes (or at least their feet, which meant adjusting my walking path mid-stream... this is surprisingly disrupting). The meditation hall is almost entirely underground, so it's quiet, huge, cold, and dark. That made the meditation more intense but also made the whole experience a lot creepier. The pagoda has very little light entering it so the meditations in the cells were even *more* intense. The courses in Jaipur are primarily conducted in Hindi -- there were only a handful of foreigners and the teacher was much more comfortable in Hindi than English, so I'm very glad this wasn't my first course. Despite its size, the Jaipur centre is kind of run down. The meditation hall, pagoda, mini-halls, and cafeteria are well taken care of but the residences leave something to be desired. However, most of the residences here are individual: you might have your own toilet and shower. Because this is a larger centre, some of the volunteers are Very Serious Meditators(TM), which means they can come off as kind of culty or creepy. FWIW, none of the 5 teachers I've met have given me this vibe.</span><br /><span style="font-size: 12.8px;"><br /></span><span style="font-size: 12.8px;"><br /></span><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-EYM53a0t-YU/Vp8-EIow_kI/AAAAAAAARsc/ZCZCd9Z3hY0/s1600/dhamma-nagajjuna.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="172" src="http://3.bp.blogspot.com/-EYM53a0t-YU/Vp8-EIow_kI/AAAAAAAARsc/ZCZCd9Z3hY0/s400/dhamma-nagajjuna.jpg" width="400" /></a></div><span style="font-size: 12.8px;"><br /></span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;"><br /></span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><b style="font-size: 12.8px;"><u>Nagarjuna Sagar Dam (Dhamma Nagajjuna):</u></b><span style="font-size: 12.8px;">&nbsp;I did my third 10-day course here this year and I would say this was my least-favourite centre. The government has allotted some 250 acres to Buddhist ...stuff... and the centre is on a 35 acre portion of this land. It's huge and kind of barren. The paths are dirt, which means you'll spend a lot of time knocking dust and sand out of your feet before entering the pagoda and meditation hall. The meditation hall is quite small and they fill it to capacity. So for tall people like you and I the knees-near-neighbours situation is rather uncomfortable. There is a pagoda, which is good. New students are allotted cells on the 6th day, I believe. However, the pagoda isn't shaded and the meditation cells can be surprisingly bright inside which sometimes makes meditation difficult. I was under regular assault from mosquitoes. Given a meditation technique that's all about "remaining equanimous with whatever bodily sensation is happening in the present moment", I don't think my beginner-grade equanimity is ready for 2 full meditation periods (dawn and dusk) of constant mosquito bites just yet. The meditation instructions on the 10-day course are already quite verbose and in Telangana (Andhra Pradesh) the instructions come in English, Hindi,&nbsp;</span><i style="font-size: 12.8px;">and</i><span style="font-size: 12.8px;">&nbsp;Telugu. The meditation centre is far removed from any city or village so it's extremely quiet save for some distant highway noise. It's right beside Nagarjuna Sagar, and there was apparently a beautiful spot where everyone would go to watch the sunset over the lake. I met a fellow on the 10th day who exclaimed, "I saw you weren't coming to see the sunsets! I wanted to tell you so badly to come and watch them... but I couldn't talk!" Quite cute. It's possible a better view of the lake might have made the course experience a bit more enjoyable so I might be underselling the centre in this blurb. The buildings are very pretty and the architecture has a lot more character than other centres -- you can see some photos on their website. Oddly, the cafeteria has allotted seating and utensils. Most of the cafeteria seating is on the ground... just in case 10 hours a day of cross-legged sitting wasn't enough. Despite having both a meditation hall(s) and a pagoda, the centre can only host about 40 men and 40 women. There was a lot of construction under way, though. The teacher seemed very approachable and though I didn't speak to him much, a Dutch girl we met after the course said he was very helpful. She spoke to the male teacher because this course had no female teacher, for some reason. Prior to this, I wasn't even aware that was allowed. After the course, we stayed in a nearly-empty hotel near the Dam... but the entire area feels like some sort of abandoned moon colony and I don't recommend sticking around for long. Most of the students on the course came from Hyderabad, which is a 2 or 3 hour drive. My one biggest issue with the centre was the administration's insistence on the "sacred" nature of the cushions. Leaving aside the introduction of religious or near-religious concepts into an otherwise largely secular practice, one of the&nbsp;administrators&nbsp;actually ruffled my cushion and told me to take my feet off of it because he didn't like the position I was sitting in. This sounds trivial, but this happened on the fourth day after a particularly painful and difficult meditation so the attention was particularly unwelcome. Between the sunlit meditation cells, the mosquitoes, and being spoken to by a staff member, this was the least intense 10-day course of the 3 I've attended. It felt like I was constantly distracted by something.</span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;"><br /></span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;">I'm not sure if that helps you pick or not. :) The most interesting / intense / terrifying / valuable course I've taken so far was definitely in Jaipur, but it's hard to say how much of that was due to the environment and how much was due to my mental state. If I had my first course to do all over again, I would probably still do it in Himachal Pradesh.</span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;"><br /></span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;">The Himachal centre is closed from December to March (it gets quite cold) so that won't be an option this Feburary. No matter which centre you pick, you should pick and apply sooner than later. Sometimes it takes them a couple weeks to respond to an application, which can make travel planning difficult.</span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;"><br /></span></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><span style="font-size: 12.8px;">Good luck!</span></div></div>


<div class="author">
  <img src="http://nilenso.com/images/people/steven-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deobald">Steven Deobald</a> - check out <a href="http://blog.deobald.ca/">Hungry, horny, sleepy, curious.</a></i>
  </span>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Bangalore 2030]]></title>
    <link href="http://blog.nilenso.com/blog/2015/12/06/bangalore-2030/"/>
    
    <updated>2015-12-06T00:00:00-05:00</updated>
    <id>http://blog.nilenso.com/blog/2015/12/06/bangalore-2030</id>
    
    <content type="html"><![CDATA[<div dir="ltr" style="text-align: left;" trbidi="on"><div style="text-align: left;"><span style="font-size: x-large;"><br /></span></div><div style="text-align: left;"><span style="font-size: x-large;">"Why do you live in Bangalore?"</span></div><br />This past week, <a href="http://nilenso.com/" target="_blank">nilenso</a> interviewed a German fellow for a software development position. As part of the routine of meeting a new stranger in this city, a variation of "Why do you live in Bangalore?" passed between us. My answer to this question is complex and usually varies based on the tone and implied subtext with which the question is asked. My immediate reasons are somewhat boring. My job is here and I like my job. My friends are here and I like my friends. The weather is pleasant.<br /><br />Beyond that, however, I have wanted to capture my answer to this question in a way that could be conveyed clearly, immediately, convincingly. The complexity of the answer derives from the juxtaposition of Bangalore's past 15 years of growth against her next 15 years. I am quite convinced that anyone who knows Bangalore today only needs to think creatively about the latter half, since they are intimately familiar with the former. Hence, I plan to commission artwork (as I am no artist) which captures Bangalore's upcoming progress. This document is an open description which I intend to use for this purpose: Anticipate Bangalore 2030 and provoke both conversation and action.<br /><br /><br /><div style="text-align: left;"><span style="font-size: x-large;">Just Suppose We Juxtapose</span></div><br />Every feature of this commissioned artwork falls into one of two categories: The first is a quality native Bangaloreans say the city is losing or has already lost. The second is a feature which many established cities actually <i>lack</i> but are retrofitting onto legacy architecture and infrastructure. Features lacking in most major metropolises can be contrasted to Bangalore's present state not only to highlight where the city is going but to emphasize how Bangalore might leapfrog the models of other cities in 2015 to push toward a more effective society based, at least in part, on the pressure caused by its failing infrastructure.<br /><br />Both forms of duality will become clearer by way of example, but this point cannot be stressed enough: <i><a href="http://www.reactivemanifesto.org/glossary#Back-Pressure" target="_blank">Backpressure</a> is a good thing</i>. Bangalore is positioned to lead by quiet example in a very short period of time, given a concentrated effort. By way of counterexample, Chicago (the last city I lived in) has no garbage crisis. It's unlikely it ever will. Without backpressure from the system of waste disposal reaching the citizens, it will be decades (perhaps a generation) before Chicago sees a distinct shift in behaviour within every household.<br /><br /><br /><div style="text-align: left;"><span style="font-size: x-large;">Why Bangalore?</span></div><br />Bangalore is in a position few other cities are in at the moment. It is changing quickly. Very quickly. It is in a small flux from week to week alone and it undergoes drastic changes every few months. If I visit my family and Canada and return a month later, entire streets are sometimes unrecognizable. Some of this change is moving in the opposite direction this document proposes as the city becomes increasingly industrialized, commercialized, and modern. However, much of that change is absolutely necessary if we are to envision Bangalore as a New World City. Its metro population is that of New York and London; by 2030 it will have outstripped them. Its new workforce is largely post-industrial technology firms and supporting industries. It's not hard to imagine Bangalore as a city of the future.<br /><br />Bangalore is also a cheat.&nbsp;The weather here supports year-round bicycling and yet much of the flora remains tropical.&nbsp;Choosing Bangalore when fantasizing about cities of the future circumvents a multitude of problems. The ground does not freeze. It is far from the ocean and does not suffer many natural disasters. It seems likely that many of Bangalore's immigrating technology workers choose it for this very reason, though, which in some ways validates choosing it for this thought experiment.<br /><br />Lastly, Bangalore supports an array of cultures and (so far) does so in a way that they do not seem to melt together. New York is metropolitan but it doesn't always feel that way. Londoners feel like Londoners. Bangalore's masjids, bars,&nbsp;temples, restaurants, churches, mansions, slums, government offices, parks... they are a <i>bizarre </i>blend of activity that I have yet to experience in any other city. If infrastructural and behavioural change can work in Bangalore, it can work anywhere.<br /><br /><br /><div style="text-align: left;"><span style="font-size: x-large;">Our Juxtapositions</span></div><br /><b><u>1. The traffic:</u></b>&nbsp;Bangalore's traffic is a mess. Once a sleepy city full of retirees, old streets are now packed with trucks, buses, single-occupant cars, 2-wheelers, bicycles... and even the odd bullock cart. No one enjoys driving in Bangalore and even getting around as a passenger can feel stressful. Because the arteries of the city are clogged with every shape and size of vehicle, drivers get frustrated and address each other with incessant honking. Air and noise pollution choke the streets. A Bangalore commute often feels like traveling on a fantastic version of Mulberry Street.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-52rVPxv4_r0/VmLcKQ0ARaI/AAAAAAAARo4/BUkx4P-uv1Q/s1600/mulbery-street.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="464" src="https://1.bp.blogspot.com/-52rVPxv4_r0/VmLcKQ0ARaI/AAAAAAAARo4/BUkx4P-uv1Q/s640/mulbery-street.jpg" width="640" /></a></div><br /><br /><b><u>The Metro:</u></b> The Namma Metro is nearer and nearer to completion every day. Some of my friends already use it for a portion of their commute, despite the fact that the entire length of the metro's journey is walkable at the moment. The project seems forever-delayed, but a vision of Bangalore 2030 features the metro as its centrepiece. As long as the memory of Bangalore's traffic in 2015 is fresh in everyone's minds, there should be no shortage of public support to continue expanding the metro to new neighbourhoods. Electric feeder buses don't exist in Bangalore now, but are not hard to imagine as a staple form of transportation by 2030.<br /><br /><b><u>Bicycles:</u></b> Copenhagen and Amsterdam were not always the cyclist's paradises they are perceived to be now. In many cities, the convenience of the car easily trumps the desire for most to choose a bicycle, even for those convinced of the environmental, health, and resource benefits. That line of thinking is hard to follow in Bangalore, though. At the moment, it's often faster to get across the city by bicycle than it is by car, simply due to agility. Bangalore is <i>infinitely </i>bicycle-able: The traffic is safe, due to its slowness. The weather is perfect 10 months of the year. The roads could be better, but they are constantly improving. There are very few gradients.<br /><br />Bangalore has seen a small surge in its bicycle interest among the middle class. Shops like <a href="http://www.bumsonthesaddle.com/" target="_blank">BumsOnTheSaddle</a>, <a href="http://www.specialized.in/" target="_blank">The Specialized Store</a>, <a href="http://www.crankmeisterbicycles.com/" target="_blank">Crankmeister</a>, and <a href="http://www.procycle.in/" target="_blank">ProCycle</a> have popped up in recent years. A bicycle culture can't be subsidized by the government and won't materialize apropos of nothing. But the sooner Bangalore's bicycle renaissance occurs, the sooner it will snowball into dedicated bicycle infrastructure whenever a new road is paved.<br /><br />Fragile, Indian-made bicycles and/or those with century-old designs (Hero, Atlas) still comprise the entirety of the bicycle market for Bangalore's lower economic classes. These still fall in the Rs. 5000 to Rs. 10,000 price range... which isn't actually that affordable. Simple, reliable, single-speed steel-frame bicycles could be produced in India at that price.<br /><br /><b><u>Electric, Automated Taxis &amp; Rickshaws:</u></b> Though not as revolutionary as clean public transportation or a confluence of Bangalore's two bicycle cultures into the middle classes, electric and autonomous vehicles do seem the most cartoonishly futuristic. They're not. Self-driving cars are on the streets in the US and Europe. Fully-electric cars have been a reality in India for 20 years and it's not hard to imagine that within a few years the Revas and E2Os will keep the company of Bangalore's first Teslas. With the advent of just-in-time taxi services, the future of roads in any city (not only Bangalore) is obvious. <a href="http://www.nextbigwhat.com/electric-cab-service-lithium-bangalore-297/" target="_blank">Fully electric cabs</a> can already be seen on Bangalore streets. On the streets where cars are still permitted in the Bangalore of 2030, it seems likely that many cars will carry 4 or 5 passengers but no driver. Rickshaws inhabit a different slice of the economy and may still have human operators in 2030 but the polluting two-stroke engines of today will be seen as legacy. Electric rickshaws and electric bicycle rickshaws are already common in Delhi.<br /><br />While an electric, autonomous vehicle is unlikely to generate much noise pollution, I can't help but imagine that as awareness of the damage noise pollution does (to humans and animals both) goes up, clear "NO HONKING" signs will become the norm.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-_pglxc73Asw/VmMIDgDHehI/AAAAAAAARpk/GDtl8AYTTsY/s1600/no-horn.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="200" src="https://2.bp.blogspot.com/-_pglxc73Asw/VmMIDgDHehI/AAAAAAAARpk/GDtl8AYTTsY/s200/no-horn.png" width="200" /></a></div><br /><br /><b><u>WFH.</u></b> The late-90s dream of telecommuting has panned out differently for everyone who dreamt it. Some of us can't focus at home. Some jobs still require interacting with the physical world. But for many (including about half the nilenso office) remote and distributed are the new default. I can't actually envision how one would capture this in an art piece about Bangalore 2030, but it's a reality, all the same.<br /><br /><br /><u style="font-weight: bold;">2. The Garbage Crisis:</u> Thankfully, the citizens of Bangalore's surrounding villages have started to fight back against the dumping of garbage in their homes. The backpressure of their resistance causes Bangalore's streets to fill with Garbage. This is <i>fantastic</i>.<br /><br />It might seem odd to think of Bangalore's garbage crisis as a good thing, but if the infrastructure existed to truck the trash of 8.5 million people far enough away from the city that no one needed to think about it... then no one would think about it. As it stands, the truth of our waste is in our faces. Every day, on every street.<br /><br /><b><u>Compost:</u></b> The more I think about compost, the more confused I am about the fact that it isn't the default option for wet waste in every city of the world. But within Bangalore, it is obviously the right choice, since it is the only option the government currently supports. Wet waste, disposed every day, goes to a city-wide composting facility as long as it is not stored in a plastic bag. More adventurous citizens can compost easily at home.<br /><br /><b><u>"Dry Waste":</u></b> Garbage workers pick up "dry waste" (recyclables) twice a week. Thanks to a massive labour force, Bangalore's recyclable waste is actually sorted at recycling centres... even though this should be the responsibility of every citizen. Composting and recycling is the government-requested (and desperately needed) default in 2015. In addition to basic waste segregation, it's not unlikely that "NO FIRES" signs will become commonplace as lighting roadside garbage fires becomes illegal.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-KB1W8eKdG88/VmLqRmErnhI/AAAAAAAARpU/Rwt48HqAP-Q/s1600/no-fires.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="https://3.bp.blogspot.com/-KB1W8eKdG88/VmLqRmErnhI/AAAAAAAARpU/Rwt48HqAP-Q/s1600/no-fires.jpg" /></a></div><br /><br /><b><u>Recycling:</u></b> True recycling in 2030 will mean recyclables are separated at the source. Every home will wash and segregate plastic, metal, and glass from e-waste, paper, and cloth. The best implementation of this system I have ever seen was in Tokyo, where our AirBNB instructions explained that plastics were to be sorted into <i>three categories</i> before providing them for pickup. As long as there is a garbage crisis, there is the perfect opportunity to teach the public about proper recycling in a tangible way that directly affects their personal comfort.<br /><br /><br /><b><u>3. Power Cuts:</u></b> Bangalore experiences common power cuts. Some are very intentional and continue year-round. Others are based on a lack of water in the dams which feed Bangalore's primarily hydro electricity supply. For a city with a growing economy, this has meant diesel generators for large businesses and battery backups for SMBs like nilenso. Running tiny power plants in every major business contributes to Bangalore's asthma-inducing air pollution.<br /><br /><b><u>Solar and battery:</u></b> Thanks to the emergence of lithium-ion batteries, the batteries of 2015 should quickly become relics. Currently, nilenso operates on some <a href="https://twitter.com/nilenso/status/658618126896988160" target="_blank">rather hideous batteries</a> which require us to fill them with water periodically. They occasionally spill acid on the floor. They're huge. But the fact is: They exist. Out of necessity, businesses and homes in Bangalore already have the kind of battery backup Tesla intends to sell to every American. Whether Bangalore becomes the biggest Tesla Powerwall customer by 2030 or not, some form of lithium battery will overtake the existing market. Solar panels are increasingly affordable and not only offer freedom from the grid during power cuts but would provide homes and businesses with resilient, distributed electricity during floods or other disasters (<a href="http://www.thehindu.com/news/cities/chennai/tamil-nadu-heavy-rains-lash-chennai-to-continue-for-two-more-days/article7936729.ece" target="_blank">as Chennai is currently experiencing</a>). A Bangalore of 2030 has a cityscape of buildings blanketed in solar panels.<br /><br /><br /><b><u>4. The Mud of the Monsoon:</u></b> While we're on the topic of floods, we can address Bangalore's annual battle with the monsoon. The slightest rain seems to bring the city to a halt. Streets are somehow instantly clogged with both water and traffic and the power goes out in most neighbourhoods. The latter would be taken care of by building-independent power sources. The former, by proper infrastructure.<br /><br />As of today, sanitary sewage and storm water are both dealt with using semi-covered and uncovered "drains". When a street floods, the sanitary sewers are overburdened and waste water (including human faeces) is ejected into the street, endangering citizens' health.<br /><br /><b><u>Storm sewers:</u></b> Bangalore needs a massive storm sewer system, akin to the Ninja Turtles' portrayal of the storm sewers in New York: Underground, walkable for maintenance, and completely separate from sanitary sewers. Bangalore gets plenty of rain. Rather than the present nuisance, it could wash a dusty city clean, restock water tables, and irrigate nearby farmland.<br /><br /><b><u>Sanitary sewers:</u></b>&nbsp;New sanitary sewers between now and 2030 need to be built underground and completely covered. Disposal will be to a proper waste water treatment plant or&nbsp;<span style="background-color: white; color: #222222; font-family: &quot;arial&quot; , sans-serif; font-size: 16px; line-height: 19.2px;">—</span>&nbsp;preferably&nbsp;<span style="background-color: white; color: #222222; font-family: &quot;arial&quot; , sans-serif; font-size: 16px; line-height: 19.2px;">—&nbsp;</span>to a more future-focused human waste composting plant. An image of separate storm and sanitary sewers is easy enough to imagine, though the specifics of where they go afterward is a bit more difficult to portray in a painting.<br /><br /><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-XUApzQ1FbnQ/VmO2FSef5tI/AAAAAAAARp8/q7kM0vRWEik/s1600/sewer.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="272" src="https://4.bp.blogspot.com/-XUApzQ1FbnQ/VmO2FSef5tI/AAAAAAAARp8/q7kM0vRWEik/s400/sewer.jpg" width="400" /></a></div><br /><b><u>[Edit] Public toilets:</u></b> I failed to include this originally, because for some reason it felt like an ephemeral change the city will implement and overcome. I was wrong. After a recent trip to Hyderabad, I was amazed to see the heavy usage of public toilets on most major streets. This is fantastic for a number of reasons. A government-installed public toilet is a perfect opportunity to dig an underground sewer where one might not yet exist. It's also an opportunity to raise awareness about where the local sewage is draining -- and where it <i>should</i> drain. I also traveled to Vancouver recently and was pleasantly surprised to find public toilets available in every park, where children and the elderly were making regular use of them. Public toilets are neither ephemeral, nor something we need to "overcome". In fact, I'm increasingly of the opinion that "developed" nations have far fewer public toilets than are actually required.<br /><br /><br /><b><u>5. The Useless "Army Area":</u></b> India, thankfully, is not a terribly violent nation. Bangalore has little use for the army any longer and it seems quite bizarre to use valuable inner-city land for military training exercises. Yet a substantial portion of the city can be seen on Google Maps as large, blank and grey: labelled "Army Area". The cadets can be seen early in the morning... running around in uniform or calling out strokes in a rowboat on Ulsoor lake. They seem... bored.<br /><br /><b><u>Disaster Relief:</u></b>&nbsp;Never mind the army of 2030, the army (and navy, and airforce, and whatever other antiquated units of government you can think of) of <i>today</i>&nbsp;should serve one purpose: global safety and security. At a minimum, the military and military resources, such as land, could slowly be funnelled into government departments of greater utility, such as <a href="http://www.forces.gc.ca/en/operations-abroad-recurring/dart.page" target="_blank">DART</a>, serving all of India, at a bare minimum —&nbsp;and hopefully its neighbours. I'm sure there is debate to be had as to whether starvation and poor health of one's own citizens is a "disaster." Some of us might choose stronger words. But as long as I'm fantasizing, a Bangalore of 2030 would welcome its least fortunate citizens into refurbished Army Areas to serve simple meals and provide basic healthcare services.<br /><br /><br /><b><u>6: Lost: Some Trees:</u></b> Bangalore's old tagline of "The Garden City" is less appropriate with each new building constructed. Parks remain, but Koramangala is unlikely to be returned to the earth within our lifetime. Those who knew the old Bangalore speak words of regret. Those who see infographics describing urban density wonder what can be done (other than the childish suggestion that immigrants should stop coming here).<br /><br /><b><u>Aggressive Reforestation:</u></b> Inside and outside of Bangalore, an appreciation and understanding of the necessity of plant life is coming. (For some, it's already here.) Augmenting the desire to maximize land usage, homes will one day be built smaller with space for trees and gardens. Rooftop gardens will fill the space not occupied by solar panels. Government-mandated green spaces in every neighbourhood will maintain some semblance of balance and reverse Bangalore's transformation into an urban heat island. Self-awareness of one's space consumption is unlikely to derive from the longing for parks; this change will require education and perseverance.<br /><br /><br /><b><u>7. Lost: Some Religion:</u></b> My generation is not violent and drug-addled due to its dearth of spirituality. A sagging of religious participation will not degrade our cities into dystopian hellholes. It has, however, lost some of the values and guidance religion provided our grandparents. Generosity is no longer to open one's home to any who need it but to donate a tax-refundable amount to a charity of one's liking. Forgiveness has lost a universal quality and favours a polar described by media on all scales, each running an attention deficit. Time my grandmothers dedicated to community and silence my peers dedicate to music and alcohol.<br /><br /><b><u>Space for Silence:</u></b> Meditation, prayer, uninterrupted contemplation. These wildly different activities all carry the same characteristic: absolute silence. There are few spaces these days for anyone of any background to simply escape the din of Bangalore's public space. Universally-accessible quiet spaces do not exist yet, which makes them in some ways more fantastic and futuristic than self-driving, all-electric robot cars. Despite this, I think Bangalore is capable of constructing a building where conversation and mobile phones are not permitted. 2030 will see <i>some</i> such space (even if I have to build it myself) but it is hard to say how common they will be.<br /><br /><b><u>Space for Generosity:</u></b>&nbsp;The recent outpouring of support from the general public for those in need of help in the Chennai floods is proof that the average citizen <i>wants</i> to help and will do so when required. I often wonder how to make this a daily or weekly practice for myself, rather than one I hold for unpredictable catastrophe.<br /><br />In 2030, Bangalore's neediest will find space to sleep and poop —&nbsp;and simple meals to eat —&nbsp;without this assistance attached to any particular belief system. Nearest to this are the meals provided in Gurudwaras, but in time I expect to see spaces emerge for all of us who feel our free time could be spent more meaningfully.<br /><br /><br /><b style="text-decoration: underline;">8. Wealth Gap &amp; Limited Resources:</b> Bangalore is not yet a rich city. It may never be one of the wealthiest cities on Earth. The wealth gap is widening and for many people (and many industries), resources will remain scarce. This is a wonderful constraint, thanks to its realism.<br /><br /><b><u>Focus on necessity:</u></b> Bangalore is full of clinics, hospitals, and schools. Markets for the most necessary items are walking distance from any home and India is unlikely to form <a href="https://apps.ams.usda.gov/fooddeserts/fooddeserts.aspx" target="_blank">food deserts</a> like the U.S. suffers from. A continued focus on absolute necessity for all income levels will ensure that as the Bangalore of 2030 starts to look like Olympus from <a href="http://www.imdb.com/title/tt0401233/" target="_blank">Appleseed</a>, one can still buy sitaphal from a wooden cart on the side of the road while it's in season.<br /><br />As Bangalore's citizens' access to personal transportation increases, clinics and hospitals risk suffering the centralization which has occurred in rural Canada. I don't yet see this happening and I hope it does not. A healthy Bangalore of 2030 still has walking-distance health clinics in almost every neighbourhood.<br /><br />Schools are another matter. It is possible that progress in remote learning will mean "homeschooling" can take on a different definition, schools may be more about physical space than about colocation of teachers and students, and the trucking of children from one end of the city to the other will become a goofy story about industrial-age lifestyles for the next generation to laugh at.<br /><br /><b><u>Tiny houses:</u></b> While hinting at my hippie granola upbringings and preferences, limited resources should push more and more people <i>back</i> toward sensible living accommodations&nbsp;<span style="background-color: white; color: #222222; font-family: &quot;arial&quot; , sans-serif; font-size: 16px; line-height: 19.2px;">—&nbsp;</span>even the rich. Bangalore draws its cultural inspiration from the subcontinent's long history and mixes it with ideas from around the globe. The U.S. and its predominantly overindulgent lifestyle features heavily, but that can be balanced by the sensibilities of Osaka, Sao Paulo, and Seoul. <a href="https://en.wikipedia.org/wiki/Tiny_house_movement" target="_blank">The Tiny House Movement</a> may very well fade away as an extremist fad, but some variation thereof could become the norm for a progressive Bangalore.<br /><br /><b><u>Repeatability, Repeatability, Repeatability:</u></b> More valuable than any other item on this list is the ability of the rest of the world to repeat Bangalore's actions from the coming 15 years&nbsp;<span style="background-color: white; color: #222222; font-family: &quot;arial&quot; , sans-serif; font-size: 16px; line-height: 19.2px;">—</span>&nbsp;and for Bangalore itself to repeat and refine these actions into 2045. Repeatability is hard to capture in a painting, but at its core is no doubt <i>simplicity</i>, which I think can be expressed artistically, even when describing an array of concepts. Indeed, the desire to see such artwork is a desire to witness these ideas expressed as simply as possible, so that anyone can understand and appreciate them.<br /><br />Bangalore represents the breadth of the global economy, from the untraveled and uneducated to the owners of multinational corporations. It is a meeting ground for people of all fields and it's the perfect laboratory to run experiments predicting the global society of the future.<br /><br />This is essential. The infrastructure and lifestyles of Earth's wealthiest nations are not sustainable and not repeatable. As the global economy continues to flatten itself, the behaviour of the wealthiest will need to change, from London to Los Angeles. Comparatively, the infrastructure of the Earth's poorest nations will continue to heal and mature. As every nation frees itself from conflict, it will require the tools to become a modern economy as quickly and cheaply as possible.<br /><br />Bangalore 2030 is a blueprint.</div>


<div class="author">
  <img src="http://nilenso.com/images/people/steven-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deobald">Steven Deobald</a> - check out <a href="http://blog.deobald.ca/">Hungry, horny, sleepy, curious.</a></i>
  </span>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[How to Co-op: Salaries &amp; Reviews]]></title>
    <link href="http://blog.nilenso.com/blog/2015/06/30/how-to-co-op-salaries-reviews/"/>
    
    <updated>2015-06-30T00:00:00-04:00</updated>
    <id>http://blog.nilenso.com/blog/2015/06/30/how-to-co-op-salaries-reviews</id>
    
    <content type="html"><![CDATA[<div dir="ltr" style="text-align: left;" trbidi="on"><br /><br />Today, I'm a wifi parasite in the <a href="http://www.uswitch.com/" target="_blank">uSwitch</a> office. Over lunch, <a href="http://www.thattommyhall.com/" target="_blank">Tom Hall</a> pointed out that nilenso doesn't pay bonuses, instead opting for transparent salaries, chosen on merit to the degree possible. (Read more on our original post: <a href="http://blog.deobald.ca/2014/11/huh-software-cooperative.html" target="_blank">"Huh? A Software Co-operative?"</a>) His question is one we get often: How <b>do</b> we decide salaries?<br /><br />Our first stab at this was a model we'd inherited from other companies we'd worked at: have salary bands which match up to the skill and experience of the current staff, match that to the available cash, and set salaries accordingly. At first, we actually started off with an approach that was even more naive -- rather than salary bands, we had "levels". To improve one's salary beyond the usual bump provided for inflation, it was really a huge leap from "college kid" to "junior" to "intermediate" to "senior". Under this model, we also had no real vision for future "levels" (yagni?); the most senior person on staff was the highest salary we imagined paying.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-yDjX4ZLX4p0/VZJNx-JUaQI/AAAAAAAARkY/5AYma6S2bAU/s1600/levels.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="186" src="http://2.bp.blogspot.com/-yDjX4ZLX4p0/VZJNx-JUaQI/AAAAAAAARkY/5AYma6S2bAU/s320/levels.png" width="320" /></a></div><br /><br />This system is very obviously broken when graphed this way, but there are a number of other little firms in Bangalore which still operate this way. The inevitable conclusion is the introduction of "Level 2.5" and other confused ideas which make a broken system even worse.<br /><br />Incrementing on this inherited model, we tried to smooth out the curve and divide up each "level" into ten increments. The old integer levels (now L1.0, L2.0, and so on) represented concrete, documented responsibility changes under the incremental system. The new incremental levels (L2.2, L4.3) were sort of <a href="https://en.wikipedia.org/wiki/Inbetweening" target="_blank">tweened</a> into thirds. A concrete example: L2.0 is a intermediate developer who is capable of driving design decisions (and a pair, if pair programming). L3.0 is an intermediate developer who can mentor, architect individual systems, and drive hiring decisions. L2.1 to 2.3, L2.4 to 2.6, and L2.7 to 2.9 give us three junior-to-senior tiers to play with when describing the growth of a developer from a "solid intermediate pair" to "mentor". With increments, everyone grew 0.2 or 0.3 each year, rather than jumping from L2 to L3 every three years. (In practice, the integer system usually meant redesigning the entire system every year.)<br /><br /><br /><h3 style="text-align: left;">Reviews in 2014</h3><br />Once we had the incremental model in place, we tried to iterate on our previous experience of "behind closed doors" reviews, as well. The goals were transparency, fairness, and comfort. Big all-hands referendums could be embarrassing -- and had proven inefficient for all sorts of other decisions, which caused us to elect a small "Executive" (two people), similar to an elected Board of Directors in a large corporate co-operative. The Executive drove the review process. We kept track of each review on a whiteboard, so everyone could see what was going on as it happened. Each review included the two people from the Executive, the person being reviewed, that person's "sponsor" (another vestige of another company we'd worked for - namely, ThoughtWorks), and their closest coworkers/team members. The sponsor presented a proposed salary, and the review discussion worked backward from there. The process worked reasonably well, but as we discovered this year, we were a bit too liberal with salary jumps.<br /><br />Once we'd finished the review cycle, we took a step back and tried to answer the "what does the future look like?" question. Working with <a href="http://c2.com/cgi/wiki?PythonPhilosophy" target="_blank">"explicit is better than implicit"</a> as a foundational rule, one is forced to visualize a <i>complete</i> salary framework. This implies a couple of things:<br /><br />1) "complete" inherently means "global"<br />2) "complete" inherently means "lifelong"<br /><br />Therefore, our salary bands had to map a curve from the lowest-paid, straight-out-of-college hacker to the most talented and experienced computer scientist money can hire. The former is easy enough to imagine... we've all hired dozens of those folks. But the best of the best, the world over, near the end of her career? I'm not even sure I've met such a person.<br /><br /><br /><h3 style="text-align: left;">The COMPLETE Salary Curve</h3><br />So, for the sake of argument, let's assume we're hiring Leslie Lamport, assuming he makes a high salary at Microsoft Research. Or perhaps a senior-most computer programmer from Google. A little asking around, <a href="http://www.glassdoor.com/Salary/Microsoft-Researcher-Salaries-E1651_D_KO10,20.htm" target="_blank">Glassdoor</a>, and that infamous secret.ly "salaries at Google" thread all told us that our ballpark figure of $500,000 USD wasn't too far off. Maybe a little higher or a little lower, but something so far away from nilenso's present reality need not be overly precise. It's just a helpful stake in the ground. For us, a $500,000 salary represents Developer Level 10.0 -- someone who's about to retire and has turned the industry upside down over the course of their career.<br /><br />There's huge value in imagining the highest salary you will ever pay. We humans don't like to spend a lot of time pondering the end of our productive days. We like to spend time pondering the scary last chapter of our mortality even less. But these things are real. Everything real, everything fact-based, has to be laid bare in a completely transparent organization.<br /><br />Our first pass was difficult, uncomfortable, and (of course) incorrect.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-NS0EPEeTBtw/VZJN0M9DW7I/AAAAAAAARkw/hlc5m5Pnk68/s1600/salary-curve-2014.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="142" src="http://2.bp.blogspot.com/-NS0EPEeTBtw/VZJN0M9DW7I/AAAAAAAARkw/hlc5m5Pnk68/s320/salary-curve-2014.png" width="320" /></a></div><br /><br />Fast forward one year to nilenso's 2015 review cycle, and it was apparent our 2014 curve didn't really fit. We'd made a few mistakes: high-end salaries (L4.x and L5.x) were too high, some jumps had been too big, the L1 salary band didn't fit on a smooth curve. (You can see this from the graph: the L1-L2 salary band has a steeper slope than L2-L3 and the inflection at L4-L5 is also obviously incorrect.) &nbsp;However, being completely honest about the data is only step #1. Step #2 is to be completely honest with _ourselves_: we'd made some mistakes in 2014 and we needed to correct them. We jiggled the L1 salary band a bit, some L2.x salaries didn't jump as much as expected, L4.x and L5.x salaries came way down.<br /><br />Our second pass was difficult, uncomfortable, and (will likely be) incorrect.<br /><br /><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-FKWG9vggajI/VZJnkqy8l7I/AAAAAAAARlA/kir_YV5ABpA/s1600/salary-curve-2015.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="129" src="http://1.bp.blogspot.com/-FKWG9vggajI/VZJnkqy8l7I/AAAAAAAARlA/kir_YV5ABpA/s320/salary-curve-2015.png" width="320" /></a></div><br /><br />...but it was a little less difficult, a little less uncomfortable, and (hopefully) a little less incorrect. The goal is not perfection. Next year, the benefit of hindsight will expose this year's mistakes and we can once again go through the mild discomfort of correcting them. And, with any luck, our second pass was enough of an improvement on our first that the mistakes will be smaller.<br /><br />I've jumped ahead of myself a bit, here. The 2015 salary curve starts at about 7.5 lakh rupees ($12,000 USD) for Developer Level 0.0 and curves relatively smoothly up to 317 lakh rupees ($500,000 USD) for our realistic Developer Level 10.0. Everyone at nilenso is presently L1.x - L4.x, so don't get too excited about multi-crore salaries we might lavish you with. But how did we arrive at the curve?<br /><br /><br /><h3 style="text-align: left;">Reviews in 2015: Tim &amp; Deepa to the rescue</h3><br />Our review process in our first year wasn't too bad. Everyone received meaningful feedback and was given a clear path for growth. However, it felt ad-hoc, everyone's feedback/reviews were delayed (as they are in most companies), and it felt strange to have the Executive drive the conversation -- even the most logical and robotic Executives are still human and will introduce their own bias. In 2015, we improved on this thanks to two distinct efforts from Tim and Deepa, who signed up to organize the 2015 review process. This would normally be a thankless job, consisting mostly of manually coordinating an Excel spreadsheet. But not this year.<br /><br />First, Tim (being Tim) spent a Saturday automating the review workflow. <a href="https://github.com/nilenso/reviews" target="_blank">The nilenso reviews app</a> was born. Since any annual review cycle for any company tends to be little more than swimlanes of todo lists, it was the perfect job for Rails and Heroku. Tim, and anyone else at nilenso, could modify the workflow, relationships, and privacy across the reviews process in a matter of minutes with a quick code change and redeploy. Everyone could glance at http://reviews.nilenso.com to see their feedback and to hassle people who hadn't reviewed their colleagues yet.<br /><br />The review app lets everyone ask for reviews/feedback from specific people. Reviewers are then tasked with completing a review for everyone who asked them. Each review is a free-form text entry field and a "suggested level" field, if the reviewer is comfortable suggesting the reviewee's growth in the past year. Though we'd initially planned on discussing salaries directly, the Level system addresses skill, contribution, network, and experience rather than what anyone "feels" other employees should make. This has the immeasurable advantage of keeping emotion out of the equation and keeping everyone focused on the facts at hand.<br /><br />Second, Deepa facilitated the review meetings. After scheduling and planning each meeting with Tim, she played the role of non-participating facilitator to discussions which included the reviewee, everyone who gave them a review in the app, and anyone else who wanted to listen in. Each meeting started with everyone in the room grabbing a laptop (or iPad) and quickly re-reading the reviews in question, to make sure they hadn't missed anything. Then the reviewee would summarize their self-review and the reviews they'd received from their coworkers; we did away with "sponsors" and let the person speak for themselves. At the end of the summary, s/he would explain whether the average Suggested Level (calculated by the app) seemed appropriate. The floor was then open to discuss and debate. By the end of these meetings, everyone knew what everyone else's level would be for the upcoming year.<br /><br />The meetings cost us a lot of time but everyone agreed it was time well spent. Attempts to limit participation in 2014 hadn't prevented the review meetings from cutting into everyone's work day, and in 2015 there was no question that the open forum felt totally transparent.<br /><br />A good rule of thumb for corporate transparency: You're probably doing it right when everyone finds the transparency boring.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-5DDeWmAl9Sg/VZJN0LhZ0_I/AAAAAAAARks/VHHwfCuvRiY/s1600/levels-line.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="129" src="http://4.bp.blogspot.com/-5DDeWmAl9Sg/VZJN0LhZ0_I/AAAAAAAARks/VHHwfCuvRiY/s320/levels-line.png" width="320" /></a></div><br /><br />A small consulting company has a fixed amount of money to spend on annual raises. By working through the entire review process without discussing money, we were free to be completely honest with one another with feedback^ and conversation. Certainly some conversations were harder than others but the overall process was smooth. Once everyone's reviews were complete, Deepa took away a Level Curve (really more of a straight line with dots on it, like above) which she could retrofit our earnings onto. That became the proposed Salary Curve, which we discussed one last time and then finalized.<br /><br />^ It's worth noting that we expect feedback to be a continuous, daily process. If someone is giving you new constructive criticism for the first time only in the annual review process, they've failed you miserably. Since peer-to-peer reviews take the form of "feedback" the terms are sometimes used interchangeably. Though we may muddle terminology, we try not to muddle intent.<br /><br /><br /><h3 style="text-align: left;">Unsolved Problems</h3><br />Though we have a smooth, meaningful Level/Salary Curve for developers, we are yet to figure out what this will look like for administrators, executives, project managers, designers, accountants, or operations staff. We only have one desiger, executive, and PM on-staff at the moment, so our best approach is to find some middle ground between industry averages and the developer curve. But that's vague. These roles are definitely in beta at nilenso.<br /><br />A meaningful salary curve for operations staff is even murkier. Though we have 3 people who do operations (security &amp; operations, cleaning, operations &amp; basic accounting) and their salaries are similar, the industry average for these positions is unfairly low in India. We're also less sure what the growth path for each of these folks will be in the coming 2 or 3 years. Mintu will certainly get bored of working security at some point, and we need to make sure the Salary/Level Curve for Operations makes sense in light of that.<br /><br />Though nilenso has a very liberal paid leaves policy (unlimited sick leave and plenty of vacation), we do not have sabbaticals (unpaid leave) figured out. Sabbaticals present a number of difficulties: Does a senior employee have more access to sabbaticals than a junior employee? Someone senior undoubtedly makes more money and has longer vacations in any company, but most companies don't offer sabbaticals. Is one's salary based on a 12-month working year, or 12 months less any sabbatical months? How can we plan sabbaticals far enough in advance that they're comfortable for both us and our clients? How many sabbaticals can a consulting firm support in one year? At one time?<br /><br />Nilenso has expenses. An office, non-billable staff, food, travel, books/classes/conferences, and a couple of internet connections. While everyone would love to take a sabbatical whenever they like, it is damaging to a company if the company isn't 100% remote and overhead-free.<br /><br /><br /><h3 style="text-align: left;">Other Approaches</h3><br />Discussing salaries-in-a-coop always leads to the peripheral topics: performance reviews, bonuses, reinvestment, paycheques, and sabbaticals. I was excited to find that talking with <a href="http://www.twitter.com/thattommyhall" target="_blank">Tom Hall</a> and <a href="https://github.com/hraberg" target="_blank">Hakan Raberg</a>&nbsp;the conversation was almost entirely focused on sabbaticals. <a href="http://www.juxt.pro/" target="_blank">Juxt</a>&nbsp;and <a href="http://www.mavenhive.in/" target="_blank">MavenHive</a>&nbsp; take a similar approach: you get paid for the hours you work. A company could take this idea to either extreme: either by hiring subcontractors rather than full-blown employees or by laying out basic salaries and adjusting them every month.<br /><br />Tom hasn't chosen a model yet, and I'm guessing it will evolve with his co-op. His key issue is the ability for employees to take sabbaticals (he describes the need for sabbaticals as a "founding principle"), which for a consultancy implies salaries will swell and shrink with billable hours. At nilenso, we've had varying success with mixing hourly billing rates and monthly retainers. Depending on one's billing model, the process of taking sabbaticals could shift. Once Tom's co-op Gets Huge(tm), it will require operations, admin, and accounting staff. Those folks still need to get paid even if <a href="http://www.hillhacks.in/" target="_blank">all the developers are off at HillHacks</a>&nbsp;for a month, so I'm excited to see what solution he and his team opt for.<br /><br /><br /><h3 style="text-align: left;">tl;dr</h3><br />For us, decoupling performance reviews from both feedback and salaries has worked really well. Feedback should be a daily occurrence, not a yearly ceremony. Salary structure should be a consequence of financial planning, not individual evaluation. Because we were discussing "levels", rather than salaries, emotions were (largely) kept at bay and we could discuss facts. We will definitely use <a href="https://github.com/nilenso/reviews" target="_blank">Tim's Review App</a> again next year since we found it a great tool for getting things done and for discussions. We recommend you try it too!<br /><br />We will keep publishing our experiments, failures, and learnings. And we'd love to hear from you at <a href="mailto:hello@nilenso.com">hello@nilenso.com</a> if you have a suggestion!<br /><br /><br /><br />Huge thanks to <a href="https://twitter.com/timothyandrew" target="_blank">Tim</a> and <a href="https://twitter.com/deepa_v" target="_blank">Deepa</a> for making this post happen!<br /><div><br /></div></div>


<div class="author">
  <img src="http://nilenso.com/images/people/steven-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deobald">Steven Deobald</a> - check out <a href="http://blog.deobald.ca/">Hungry, horny, sleepy, curious.</a></i>
  </span>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Patient Charts]]></title>
    <link href="http://blog.nilenso.com/blog/2015/06/23/patient-charts/"/>
    
    <updated>2015-06-23T00:00:00-04:00</updated>
    <id>http://blog.nilenso.com/blog/2015/06/23/patient-charts</id>
    
    <content type="html"><![CDATA[<div dir="ltr" style="text-align: left;" trbidi="on"><br />This is a brief idea I remembered while cleaning up some old files. It initially occurred to me while discussing the status of my eyes with the surgeon after I had a vitrectomy and scleral buckle. Our conversations were terrible. He would stare at the back of my eye with his lenses and probes, ask what I saw, I would give a lengthy description (forgetting a few things) and he would inevitably only write down one or two things I said. It seemed like the old software engineering concept of "shared understanding" wasn't really familiar to ophthalmologists.<br /><br />I would discuss the process with my Mom on the phone during my recovery from the surgeries. In one of these conversations, she mentioned she always takes notes if she's seeing a doctor with any regularity. She can then present the notes to the doctor, making the information consistent, repeatable, and persistent. Her communication with the doctor effectively begins at her identification of symptoms, and that communication is as good at time of delivery as it was at the time of her recording.<br /><br />This system made a lot of sense to me. The doctor has a chart describing my condition as the doctor sees it, on a timeline correlating to events such as surgeries. Why didn't I, as a patient, have a similar tool?<br /><br />For myself and my doctor, I came up with the following (click for a PDF):<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="https://drive.google.com/file/d/0BzODvNzjQF-vWW9SdkJIaFpTY1U/view?usp=sharing" target="_blank"><img border="0" height="320" src="http://1.bp.blogspot.com/-mLl3_Ns-v6Y/VYmB80KUCHI/AAAAAAAARjI/o4l27DjthTU/s320/patient-chart-eyeballs.png" width="247" /></a></div><br /><br />Using this, I could precisely describe what I was seeing, when I was seeing it. More importantly, I could visualize things that were difficult or impossible for him to see with external instruments, such as:<br /><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-ViqoutQ953c/VYmDDLPqrdI/AAAAAAAARjg/LGf15KzalFM/s1600/blind-spot.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/-ViqoutQ953c/VYmDDLPqrdI/AAAAAAAARjg/LGf15KzalFM/s320/blind-spot.png" width="247" /></a></div><div class="separator" style="clear: both; text-align: center;">This is how I filled out a page of my "patient chart" when I described the blind spot I was seeing after surgery. Since this is a symptom of optic nerve damage, there was no way for the doctor to see this.</div><br /><div class="separator" style="clear: both; text-align: center;"><br /></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-abgvPg9EWcA/VYmDGq0Mu8I/AAAAAAAARjs/DKiEcHx5Sag/s1600/perfluoron.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/-abgvPg9EWcA/VYmDGq0Mu8I/AAAAAAAARjs/DKiEcHx5Sag/s320/perfluoron.png" width="247" /></a></div><div class="separator" style="clear: both; text-align: center;">Another page looked like this. These were Perfluoron bubbles left in my eye by accident, during the surgery. The doctor could see the largest of these, but only after I repeatedly pointed it out.</div><br /><br />When I saw him for the last time, he commented that he should really have a stack of blank "charts" for his other patients. I doubt he ever implemented this... and I wish I'd left him some... but perhaps my Mom's general idea will be of use to someone else.<br /><div><br /></div></div>


<div class="author">
  <img src="http://nilenso.com/images/people/steven-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deobald">Steven Deobald</a> - check out <a href="http://blog.deobald.ca/">Hungry, horny, sleepy, curious.</a></i>
  </span>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Emergent-Continuous Design]]></title>
    <link href="http://blog.nilenso.com/blog/2015/06/11/emergent-continuous-design/"/>
    
    <updated>2015-06-11T00:00:00-04:00</updated>
    <id>http://blog.nilenso.com/blog/2015/06/11/emergent-continuous-design</id>
    
    <content type="html"><![CDATA[<div dir="ltr" style="text-align: left;" trbidi="on">I've recently returned to Canada for a month to visit family. While here, I've run into some old friends (and friends of friends) whom I haven't been in contact with since moving to Bangalore three years ago. "Oh! You live in India? What's that like?" is one common conversation piece. Or the frequent line of questioning which positions the entire subcontinent as though it were a chic new restaurant: "India? You must like it. Do you like it?"<br /><br />I do like it. Bangalore is vibrant, growing, and accessible. But those aren't necessary qualities for living abroad; many would be happy with seclusion, calm, and diversity as qualities around which to build a new home. As long as I'm in technology, however, a jostling city life breeds the right rate of change. Change, in Indian cities, is ubiquitous, constantly pushing me to remember humanity's global growth and interdependence.<br /><br />While home visiting my parents, I'm reminded of this as I look out across their back yard. The back yard is taking shape. It's been taking shape for twenty years. The grass was replaced by xeriscaped gardens of mini-forest. The fence was overhauled. A garage was built which would serve as my Dad's shop as he went through his own transition from educator to carpenter. A giant square hole marks the forthcoming home of a new shed. The yard has forever been under construction, under repair. The yard is a microcosm, a city of two. The shop is another, smaller microcosm for a city of one and the change is faster here: one week it's the construction site of ornate boxes, the next, of kitchen cabinetry. The workbenches and storage of the shop are single-layer, finite recursion, self-replicating organisms when the shop occasionally finds use for modifying itself or improving on its existing structure.<br /><br />My house, Bangalore, one month ago. While en route to Cooke Town's neighbourhood tree-mapping exercise, Abhinav, Nid, and Noopur were storm-stayed in my apartment while hail and rain tore apart the undocumented trees outside. Sufficiently warmed with tea, honey, and chocolate, the conversation drifted to the layout of my flat, as it was Noopur's first visit. She wasn't offended by much (which is in the neighbourhood of compliments when in the company of designers and architects) save the laundry rack. I have a metal laundry rack I drag into the living room whenever I'm drying clothes, which is almost always, and drag elsewhere when I have guests. She suggested a wooden ceiling rack on pulleys and when Nid complained that such a rack is always visible, Noopur had an observation that, like all meaningful observations, seems obvious in hindsight: It should be always visible, since I'm always doing laundry! A pulley system keeps it out of the way of foot traffic and makes a home for the drying clothes in my tiny one-bedroom apartment. We all agreed that an extra room, even if I had it, wasn't a real solution: design, it would seem, is as much about admitting the truths of our constraints as it is about shaping them and manipulating the world within them.<br /><br />My parents' house, Saskatchewan, last week. Out the back window, I watch my parents put in their garden, I notice two things. Both are answers to Alexander's question, "how does the space make you feel?" and they're both surprising. The work-in-progress garden shed feels ...productive. It feels like design is happening. As my Dad drags a hose around the yard to water plants, the hose, comparatively, feels like a burden. The design of the hose is over -- and it's a failure. Like the laundry rack, it's not a part of its environment. While in use, it's an eyesore, something to be put away, to be hidden from the view of neighbours and friends. While hidden, these items are the shame of a household: they get their own space, but not much, and that space serves no other purpose but to hide those tools to which we ascribe utility without beauty.<br /><br />Today. As luck would have it, my ponderings over the hose came just in advance of my parents installing underground sprinklers. Mechanical rain now falls in late evening, automatically, as the evaporative powers of the sun quiesce. One wonders how many technological leaps we are from harnessing the rain of the sky rather than our parabolic artifice. When we do, will we relearn the lessons nature's rhythms have taught us in our crops and dams? A universal desire to reverse our worldwide climate change seems to hint that we might overdo our first go in the driver's seat of Earth's weather system. Thankfully, our first attempts at anything are usually dramatically underpowered against their inspiration. Much of the global balancing act is done for us and humanity's most embarrassing stumbling comes on the heels of progressive haste.<br /><br />Our work in more plastic media is discovering itself. The absence of physical boundaries (save the limitations of electric current and the speeds of light and thought) give us undeniable freedom to play. Reshaping a metaphorical yard: the shop, the tools in the shop, the garden, and even ourselves... these things can and do happen on a daily basis. A tempting trap is to believe we in the software industry are regularly creating revolutionary works. No matter how quickly or effectively we work as individuals or teams, the measurable output, which one could say is measurable on a scale of global human awareness and, considered in that physical frame, only measurable for a still-fleeting period of time (though that time may span generations, if unlikely), is undeniably chaotic. Controlled chaos loops, floats, or crushes the paper gliders of human thought across an atmosphere of gas perceived as modern time. It is perceived this way, of course, at every point in time. All people of all societies in all eras have witnessed the cliff as though it were impossible to witness anything else, as this threshold can hardly unwind into another truth. Our work on the cliffs, our collective creation, is the emergence of the next technology, the next business model, the next government, the next family, the next garden.<br /><br />I often ask myself if the waves of emergence -- the climate of generational human endeavour to the storms of our yearly activity -- are so obvious and observable in the absence of our bustling, surely successful businesses built on meaningful technologies are little but the observation of our current wave or updraft and the intelligent prediction of the next obstacle against which it will crash? Surely. But such predictions are unfortunately easy to make in terms of accuracy on only relative scales of time. The trajectory of our intent is clear: we will eliminate poison and disease as we unearth solutions, we will find new systems of thought for peace on every scale, we will feed the world's hungry and stem our cancerous growth. One look no farther than one's own household, but observation at every scale tells the same story: across our cities and across global statistics.<br /><br />But what inaccurately passes for optimism to the inattentive also does not write a guidebook for the most perceptive witness of our Earth-sized paper glider competition. A rock in the nose of one glider may put it well ahead of the rest, crushing competitors along the way - at least as long as the rock-nosed glider remains in the air. The wiser glider-flyers mutter clichés about the dance, about the interplay <i>between</i> the gliders, about a glider design which will outlast not only their glider but the very memory of their glider and themselves. Every shade of the palette. Every new gadget. Every line of code folded across every abstraction in the domain across every abstraction which transcend domain across every medium of shared knowledge. Our grandchildren will not know GitHub or Oracle any more intimately than we presently experience Compuserve or Geocities. But what becomes of the ideas? As the world pulses closer, I can only guess that increased precision -- the absolute and utterly undivided attention to each crease and fold of my glider -- will dictate how long I might keep it afloat. If we observe the unbroken continuity of the universe in which we live, and dedicate ourselves to act only on the threshold of that continuity, how can we fail?<br /><br />Morris's "Have nothing in your houses that you do not know to be useful, or believe to be beautiful." implies further union. The perfect localized mechanical weather system would be one which tunes itself and is utterly undetectable as human creation. The perfect corporation is a model which outlasts its owners and employees, a design so beautiful as to barely materialize into view. The perfect network connects everything, grows, learns, and heals... but does not intrude. I endorse pursuing the inevitable confluence of these notions. Our personal spaces are easy to fill with both. Our work spaces are quickly converging with our personal spaces, and should be equally beautiful and functional. Our public spaces are little more than a network of those two. And our codebases? Well, that's where many of us spend the majority of our time. In the plastic. It only makes sense that we want to see inside what we long for out here.<br /><div><br /></div></div>


<div class="author">
  <img src="http://nilenso.com/images/people/steven-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deobald">Steven Deobald</a> - check out <a href="http://blog.deobald.ca/">Hungry, horny, sleepy, curious.</a></i>
  </span>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[How To Recycle]]></title>
    <link href="http://blog.nilenso.com/blog/2015/06/09/how-to-recycle/"/>
    
    <updated>2015-06-09T00:00:00-04:00</updated>
    <id>http://blog.nilenso.com/blog/2015/06/09/how-to-recycle</id>
    
    <content type="html"><![CDATA[<div dir="ltr" style="text-align: left;" trbidi="on"><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-VwNivLd347A/VXcvFp8GipI/AAAAAAAARhk/rrumvPkPbfw/s1600/bangalore-metro.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="256" src="http://2.bp.blogspot.com/-VwNivLd347A/VXcvFp8GipI/AAAAAAAARhk/rrumvPkPbfw/s400/bangalore-metro.jpg" width="400" /></a></div><br /><br />If we look around Bangalore, we see a city with enormous potential. Businesses thrive here. Technology, design, food, and music are all finding a cosmopolitan home in 2015 Bangalore. It is not hard to imagine the Bangalore of the future: a thriving metropolis of modernity built in the centre of the southern subcontinent. The city is already growing quickly -- in many ways, outgrowing itself.<br /><br />One such way is waste management.<br /><br />The future Bangalore is clean. Electric vehicles, bicycles, and a bustling metro will spell the end of inner-city air pollution. Modern clean-water infrastructure and waste water facilities will end water-borne disease. One can visit the world's most sophisticated cities today to witness these features. However, humanity's attitude toward garbage still limps along, across the globe. As I visit cities and towns in Canada, the approach to garbage is almost ubiquitous: landfills. There is a bit of paper, plastic, and glass recycling here and there... but it's not front-and-centre, and <a href="http://www.cbc.ca/news/canada/saskatchewan/city-of-regina-hasn-t-been-recycling-glass-food-containers-1.2761004" target="_blank">it's often not even certain that the recycling is really happening</a>. Canada is a big country, and it would take millennia at our current population density to recognize our bad habit.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-bQ0oBeQFTm4/VXcsXM5dF-I/AAAAAAAARhY/5Rid5mYDWVs/s1600/bangalore-garbage.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="300" src="http://1.bp.blogspot.com/-bQ0oBeQFTm4/VXcsXM5dF-I/AAAAAAAARhY/5Rid5mYDWVs/s400/bangalore-garbage.jpg" width="400" /></a></div><br />Bangalore is more fortunate. The consequences of poor waste management are immediate, and they frequently make the news. The landfills around Bangalore are poisoning nearby villages, and when those villages revolt garbage piles up in the city, poisoning the very people who produced it. The necessary pressure exists for Bangalore to leapfrog other major cities across Earth and tackle waste with a vision of the Long Now. The steps below are a sort of branching flowchart: each step removes more and more, in order of importance, from the waste in your home and workplace.<br /><br /><br /><br /><br /><h3 style="text-align: left;">Step 0: E-Waste</h3>Never&nbsp;throw electronics or batteries in the garbage. They are extremely poisonous. Thanks to their value, they're also incredibly easy to recycle. Bangalore has <a href="http://lmgtfy.com/?q=bangalore%20e-waste" target="_blank">many e-waste recycling options</a>.<br /><br /><br /><h3 style="text-align: left;">Step 1: Compost</h3>The clearest distinction between types of waste is compostable (organic) waste vs. Everything Else. Thus far, the <a href="http://bbmp.gov.in/web/guest/swm" target="_blank">BBMP Solid Waste Management</a> doesn't offer compost services. But it's very easy to compost in any size of home. Composting doesn't stink and doesn't attract vermin.<br /><br />Composting requires very few tools, and they are easily obtained:<br /><ul style="text-align: left;"><li>Daily Dump (outdoor): <a href="http://www.dailydump.org/">http://www.dailydump.org</a></li><li>Smartbin (indoor): <a href="http://www.greentechlife.in/smartbin">http://www.greentechlife.in/smartbin</a></li></ul><br /><br /><h3 style="text-align: left;">Step 1.1 Compost leaves!</h3>Leaf composters are even less work than food waste composters, but they do a huge service to Bangalore neighbourhoods by preventing BBMP employees from burning tree droppings within city limits. Asthma affects a lot of us, and this is a sure way to reduce its effects.<br /><br />You can buy leaf composters pre-built from organizations like Daily Dump or <a href="http://lmgtfy.com/?q=build+leaf+composter+bin" target="_blank">you can build one yourself </a>using steel or wood for a frame and chickenwire or plastic mesh for a liner. Use a liner with larger holes so the finished compost can fall through the bottom.<br /><br />Once you have your leaf composter built or purchased, you may even want to consider locking it outside at the street so your entire neighbourhood can use it! Most of the leaves at nilenso are street-side, so we keep our leaf composter outside the gate and speak to the BBMP service people frequently about using it instead of burning leaves.<br /><br /><br /><h3 style="text-align: left;">Step 2: Segregate Dirty/Clean</h3>Recycling in Bangalore is done at a variety of stages. There are BBMP waste segregation facilities all over the city, and even if you can't actively recycle yet, separating soiled waste from clean waste will keep your home and office clean and discourage pests like cockroaches.<br /><br />The rules for this are simple: Is there food waste that can't be cleaned off? That's soiled waste. If you can clean the waste, do that!<br /><br />Examples of soiled waste are dirty napkins, greasy pizza boxes, and aluminum foil with burnt food on it. Examples of garbage that can be cleaned: dahi containers, tetrapacks, plastic bottles, aluminum cans. Clean these by washing and rinsing them in your kitchen sink. Throw soiled/dirty waste out regularly, since it attracts bugs. Clean waste, even if not recycled, will never rot or stink since it's nothing but glass/plastic/metal/paper. I often go an entire month without throwing out my clean dry waste.<br /><br /><br /><h3 style="text-align: left;">Step 3: Recycle</h3>Once you have started segregating clean waste from soiled waste, full recycling is just a short jump away! Segregate paper/cardboard, plastic, glass, and metal. Those four categories comprise most non-organic material of anything you might purchase. If your neighbourhood offers recycling services for any of these materials, use them! There is <a href="http://218.248.45.169/download/engineering/Dry%20waste%20collection%20Center.pdf" target="_blank">a list of dry waste collection centres</a> available on the BBMP website, even if it's a bit difficult to read.<br /><br />If your neighbourhood doesn't offer dry waste collection and recycling yet, you can contact the BBMP's <a href="http://bbmp.gov.in/web/guest/commissioner" target="_blank">Commissioner</a> and <a href="http://bbmp.gov.in/web/guest/administrator" target="_blank">Administrator</a>.<br /><br /><br /><h3 style="text-align: left;">Step 4: Reuse!</h3>This step should probably come before Steps 1 through 3, but it's not as frequent, since the items tend to be larger. There are dry waste collection services in Bangalore which will also happily pick up large quantities of dry waste: furniture, tools, appliances, linens and clothing. They will separate reusable items from recyclable items and deal with each appropriately. In particular, Hasirudala is a non-profit which works in conjunction with the BBMP to collect large quantities of dry waste. You can contact them here:<br /><br /><ul style="text-align: left;"><li><a href="http://www.hasirudala.in/">http://www.hasirudala.in</a></li><li>+919742112362</li><li>contact@hasirudala.in or nalini@hasirudala.in directly).</li></ul><br /><br /><br />As Bangalore grows and matures, so will its services. Every aspect of this simple process will become smoother and more ubiquitous. Waste will, sooner or later, transform from Bangalore's most visible social problem into a valuable resource. The growth process will of course experience its ups and downs, so don't be discouraged. Persist. Your integrity will become the integrity of your home, your workplace, your neighbourhood, your city.<br /><br />Have fun!<br /><div><br /></div></div>


<div class="author">
  <img src="http://nilenso.com/images/people/steven-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deobald">Steven Deobald</a> - check out <a href="http://blog.deobald.ca/">Hungry, horny, sleepy, curious.</a></i>
  </span>
</div>

]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Drugs, meditation, warnings.]]></title>
    <link href="http://blog.nilenso.com/blog/2015/01/22/drugs-meditation-warnings/"/>
    
    <updated>2015-01-22T00:00:00-05:00</updated>
    <id>http://blog.nilenso.com/blog/2015/01/22/drugs-meditation-warnings</id>
    
    <content type="html"><![CDATA[<div dir="ltr" style="text-align: left;" trbidi="on"><div style="color: #222222; font-family: arial, sans-serif;">I recently returned to work from my second 10-day Vipassana course. After such a course, friends are always curious about the experience. Because Vipassana meditation courses are largely indescribable, the conversation often drifts to one's journey toward Vipassana, and the journey toward meditation in general. For me, this journey has been a mixture of friendships, literature, and drugs. Drugs can be seen as a stepping-stone to my current meditation practice because a few drugs have similar insightful (informational) qualities.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;">A colleague and I have spoken at length about drugs and meditation in the past few days -- mostly about my reckless drug experiences, since they are easy to describe and that was what he was most interested in. I felt it necessary to clarify what I was saying about my experiences and experiments -- and to colour it all with appropriate caveats. This post began as an email of warning to a group of friends, but halfway through I decided it was better structured as a blog post.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;">I certainly don't <i>recommend</i> anyone try drugs; as with anything in life, only do what seems safe to you. Carefully judge what you and the people around you are comfortable with. I strongly recommend against experimenting with non-informative drugs, and all drugs fall into this category with enough use. Before I begin, it's worth noting that I have stopped all drug use for this reason, save tea and coffee.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;">That said, I wanted to solidify my warnings to make sure no one misinterprets what I've said in person about experimenting with informative drugs (hallucinogens) or meditation. My drug experiences and descriptions are limited. I am a very new student of meditation. Take everything I'm saying here with a grain of salt and research your own experiments thoroughly.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;">I plan to write more about the two most recent meditation courses I've attended once my thoughts on them condense but that's quite another topic.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;">From safest to least-safe, here's my take:</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><div style="text-align: left;"><b><span style="font-size: x-large;">Safe</span></b></div></div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;">The "safe" category almost exclusively includes meditation/yoga, and even these comes with caveats. Again, this list is from safest to least-safe.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><b><u>Zazen at Bodhi Zendo:</u></b>&nbsp;A few friends accompanied me to Bodhi Zendo (found at Kodai Kanal in Tamil Nadu), and I would never discourage anyone from spending time there. The environment is clean, comfortable, and affordable (300 rupees per day for room, board, and meditation instruction). The people are sweet and gentle, the food is delicious, the Zendo is in a quiet valley, the meditation is light and informative.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><b><u>Yoga:</u></b>&nbsp;I've attended various yoga classes. I don't think yoga qualifies as "meditation" at all, but I always feel better afterwards. There's always a risk of physical injury when exercising, but yoga instructors seem generally conscious and proactive about students' safety.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><b><u>Zazen (generally):</u></b> Zazen, as taught at Bodhi Zendo, is quite gentle. Zazen meditation elsewhere can have quite strict rules about sitting posture and behaviour in the Zendo, which might make some people uncomfortable. I generally find Zazen practice relaxing but it can also become emotionally intense.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><b><u>Vipassana:</u></b>&nbsp;Vipassana (as taught by S.N. Goenka) is almost universally described one way: intense. Really intense. In terms of intensity, Vipassana meditation greatly eclipses any drug experience I have ever had and it can be quite emotionally taxing. I have not found it to be relaxing at all. Be honest when you fill out an application form to attend a 10-day course. If you have clinical depression/anxiety or a history of mental health issues, you will not be allowed to attend. Respect this. You could really hurt yourself.</div><div style="color: #222222; font-family: arial, sans-serif;"><div><b><u><br class="Apple-interchange-newline" />Ayurveda/Pranayama/Yoga</u></b>: Meditation with medication comes with all the risks of medicine and actively changing your body chemistry. I've been seeing an Ayurvedic doctor in Bangalore on a friend's recommendation; I'm pretty sure he will recommend yoga and pranayama at some point (he has for said friend). I'm listing Ayurveda as "least safe" due to the fact that it involves something external (herbal medicine) and the fact that you must place your trust in another person. Conversely, Zazen, Yoga, and Vipassana are all internal and entirely under my control when I try them.</div><div><br /></div></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><b><span style="font-size: x-large;">Unsafe</span></b></div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;">Leaving the realm of exploring ourselves internally, we come to drugs. I'm only listing drugs I have tried and my experiences are quite limited. If you do consider taking drugs, give yourself a lot of lead time to make sure you really want to do it (never take drugs on a whim) and read as much literature as possible so you feel comfortable with what you're getting into. <a href="http://en.wikipedia.org/wiki/Recreational_drug_use" target="_blank">Wikipedia</a> is a good resource for hard facts. <a href="https://www.erowid.org/" target="_blank">Erowid</a> is a good resource for experience reports. Again, I will try to list these drugs in order of ascending danger.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;">One general caveat: If you do choose to do drugs, <b>do not mix drugs</b> -- <i>especially </i>when trying a drug for the first time. If you are going to experiment with drugs, do so by taking a drug in isolation so you can clearly assess its effects. Mixing two drugs in relatively innocuous doses can cause you serious physical damage. Consider alcohol and Tylenol as an example; mixing any of the drugs listed below will be far worse.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div><span style="color: #222222; font-family: arial, sans-serif;"><b><u>Lysergic acid diethylamide (acid):</u></b> Being on an acid trip leaves one feeling completely lucid, capable of normal, low-impact activities: reading, speaking, walking, etc. While it did inebriate me, I've found it did not cause me to say anything I didn't mean or do anything dangerous. I've found the experience to be valuable and educational. While taking acid, I have had a strong preference to be "in nature", but I have had no aversion to the city. I have found doing acid with company (sober or otherwise) to be preferable, even if only as a reminder to drink water. Once high, one's attention is turned inward and I haven't engaged in social interactions. Acid eliminates one's appetite, so I've always eaten a full meal beforehand. The effects last 10 to 20 hours.</span></div><div><span style="color: #222222; font-family: arial, sans-serif;"><br /></span></div><div><span style="color: #222222; font-family: arial, sans-serif;"><b><u>2C Family (2ci / 2ce):</u></b> Taking 2ci is very similar to acid. Compared to acid, it was often more difficult to regulate how much I was taking -- particularly if the 2ci purchased comes in a powder which needs to be distributed into capsules myself. It does seem to cause, very consistently, an intense stomach pain as the drug becomes active in the nervous system. This effect occurs about 1 to 2 hours from taking 2ci and once this effect has occurred, there is no appetite so, as with acid, eating in advance has always been important. Again, I've remained lucid and&nbsp;cognisant&nbsp;of my own safety while intoxicated by 2ci. The industrial world (the city) becomes quite uncomfortable, while&nbsp;"nature" -- the woods, the park, or the back yard -- is vastly more enjoyable. Again, it's been useful to have someone around to check on me. The effects last 5 to 10 hours.</span></div><div><span style="color: #222222; font-family: arial, sans-serif;"><br /></span></div><div><span style="color: #222222; font-family: arial, sans-serif;"><b><u>MDMA (methylenedioxy-methamphetamine, ecstasy):</u></b> E is easily the most enjoyable drug I have ever tried. It has remained fully enjoyable every time I have taken it. Mild euphoria and the effect of uninhibited loving feelings are the consistent effects. Experiencing uninhibited loving feelings is informational, but not on a repeated basis; ecstasy quickly degrades into a non-informational drug. Ecstasy consumes serotonin, and I have seen it depress people after its use, though I have never experienced this myself. E is dehydrating. Ecstasy has caused me to behave in ways I regretted, in both sexual and platonic relationships. It has very serious long-term effects (brain lesions / brain damage) but I have never felt addictive effects in its use. Ecstasy in North America is often reported to be mixed with dangerous chemicals; I have only ever taken E independently tested for purity by a friend. The effects last 2 to 5 hours.</span></div><div><span style="color: #222222; font-family: arial, sans-serif;"><br /></span></div><div><span style="color: #222222; font-family: arial, sans-serif;"><b><u>Nitrous Oxide:</u></b> Nitrous is legal, as it is used in commercial whipping cream. For this reason, I've always been paranoid about nitrous, since accidentally purchasing Carbon Dioxide (which come in the same capsules, for the same purpose) would have&nbsp;devastating&nbsp;effects. Though not chemically addictive, because the effects of nitrous are intense but very short-lived, it is psychologically addictive. I have found myself craving the effects of nitrous after the experience has passed. It comes out of the capsule/bulb as a cold gas, which can cause frostbite of the lungs; there are other physical dangers. Taking nitrous requires extensive reading about its physical and addictive dangers. While the experience of nitrous can be informative the first few times, it quickly degrades into a pleasure (non-informative) drug. The effects last about 15 seconds.</span></div><div><span style="color: #222222; font-family: arial, sans-serif;"><br /></span></div><div><span style="color: #222222; font-family: arial, sans-serif;"><b><u>Psilocybin mushrooms:</u></b> The effects are comparable to acid, though I would say my experiences with mushrooms caused me much more mental and physical disability. I have not remained lucid or capable of doing all low-impact tasks. I have said hurtful things while intoxicated on mushrooms and I can see how it might cause a person to engage in physically dangerous activities. Mushrooms do cause variable levels of paranoia. The physical plant is similar in appearance and growing conditions to other mushrooms which are very poisonous and can kill you; I have only ever taken mushrooms grown in a closed environment for this reason. The effects last 5 to 10 hours.</span></div><div><span style="color: #222222; font-family: arial, sans-serif;"><br /></span></div><div><span style="color: #222222; font-family: arial, sans-serif;"><b><u>Salvia:</u></b> Saliva is legal in most countries and has clearly documented effects (see the <a href="http://en.wikipedia.org/wiki/Salvia_divinorum" target="_blank">wikipedia article</a>). I have only experienced the effects from this list. Aside from evoking old memories of childhood, salvia is non-informative and there is little or no "insight" to be gained from its use. One of these effects is to cause such a strong hallucination about one's current physical environment as to completely remove one (mentally) from that environment. While on salvia, it would be very possible to walk into traffic, fall off a cliff, or stab your eye out on a tree branch. I have seen Salvia cause someone to stop breathing momentarily. Salvia is never taken lightly, even by those who are accustomed to it: it has to be taken indoors with all doors locked and away from any stairs or sharp objects. It absolutely must be taken only with the supervision of a sober companion. Because salvia must be smoked, it poses a danger to the lungs. Salvia has no addictive properties whatsoever... largely due to its huge hangover; after smoking salvia, one feels exhausted and depressed for a much longer time than the salvia high lasts. In the following days and weeks, the last thing in the world I can imagine doing is to smoke more salvia. The effects last 10 to 15 minutes.</span></div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><b><span style="font-size: x-large;">Dangerous</span></b></div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><b><u>Marijuana:</u></b> Marijuana is not chemically addictive but it is very psychologically addictive. At the peak of my Marijuana use it has caused me non-trivial (though temporary) depression. It has caused me a great deal of paranoia, even once the enjoyable effects have dissipated. Marijuana deeply inhibits one's memory and mental faculties; recalling my earliest marijuana use in University, I paid close attention to the damage it was doing to my mental state: I would feel stupid after smoking marijuana for about 3 or 4 days. Because marijuana is primarily smoked (though it's also possible to ingest), it damages the lungs. Marijuana, in my initial trials, was actually informative to me, which was a great part of its appeal. However, it quickly degraded into a non-informative drug I used purely for pleasure. Smoking pot for pleasure lasted for years beyond the point where it provided me any at all, so I consider its psychologically addictive qualities much stronger than they are usually documented. I have said very hurtful things while stoned, though I don't think pot has ever caused me to do anything physically dangerous. Marijuana is more and more acceptable in society as its use increases and I think many people recognize the danger of alcohol and see marijuana as an alternative. Perhaps it is. The effects last 2 to 5 hours (or 3 to 4 days, depending on which effects one is measuring).</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><b><u>Alcohol:</u></b>&nbsp;The enjoyable effects of alcohol are well known and not worth repeating. Alcohol has a very low LD50 and has caused me to harm myself, directly and indirectly, physically and mentally, on a number of occasions. I have had alcohol poisoning. Alcohol has caused me to harm others, physically and mentally, on a number of occasions. Alcohol greatly inhibits my capacity for self-regulation and moderation, which means drinking alcohol leads to me drinking more alcohol (or it creates the desire to experience other drugs). It also inhibits thought and judgement, leading me to engage in increasingly dangerous behaviour. While drunk, I have behaved in almost every manner conceivable: extremely loving, extremely generous, extremely jealous, extremely paranoid, extremely violent. Alcohol is chemically and psychologically addictive and I have experienced both. Because alcohol is socially acceptable and widely available, it poses even more danger: I stopped drinking after seriously injuring myself (while drunk) at the tail end of two months of very heavy alcohol consumption... even after all that and <i>while I was undergoing surgery for that injury</i>, colleagues and friends lamented the fact that I wasn't drinking with them. Alcohol's ubiquitous nature leaves me to consider it the most dangerous drug I have experienced in depth; society does not consider alcohol a drug. Alcohol has nothing to teach and begins as a non-informational drug. The effects last 1 to 24 hours, depending on the quantity consumed.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><b><u>Cocaine:</u></b>&nbsp;I have only tried cocaine on a few occasions. The effects are relatively mild (consider a strong dose of Nyquil), but because they do not last long it poses the same addictive threat Nitrous Oxide poses. Additionally, cocaine is chemically addictive. While I have not been addicted to cocaine, if I had consistent access to cocaine I could imagine how I could have become irreversibly addicted to it. Cocaine has not caused me to behave in dangerous ways: I have not done anything dangerous or said anything out of character while high on cocaine. It lands in this category purely due to its chemical and psychologically addictive properties. There is absolutely nothing to be learned from cocaine -- it's a pure-pleasure, non-informative drug. The effects last about 30 minutes.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><b><span style="font-size: x-large;">Devastating</span></b></div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><b><u>Methamphetamine / Crack:</u></b> I have only tried meth and crack once, each. Both times I have acted violently, become extremely paranoid, and endangered myself and others. They are also extremely addictive. I could not say how long the effects lasted.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><b><u>Heroine:</u></b> I have never done heroine (or any other opiate) but I'm adding it to the list because I have seriously considered it and would have taken it had the opportunity ever arose. Thankfully, it did not. In the years following my casual interest in heroine, I have met recovering heroine addicts. In the words of one, "as long as I'm not doing heroine, there is not a second of that goes by where I am not wishing I was doing heroine." That sounds like more than I could handle and I'm extremely grateful I never ran this experiment.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif; font-size: small;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><b><span style="font-size: x-large;">Conclusion</span></b></div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;">As I mentioned in the beginning, I have completely halted all drug use. Most of my drug use was alcohol, which I have never fully enjoyed, and whatever informational characteristics I learned from and enjoyed in hallucinogens have long-since been eclipsed by Zazen and Vipassana. Both of these activities are not only safe but also provide tangible benefit in my daily life, which is the opposite of the drug experiences I have had.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;">Despite the initial similarities to informational hallucinogens, meditation also has a quality which is the exact opposite of even the best informational hallucination I have experienced due to drugs: The quality of the meditative experience only compounds and improves; I can't seem to consume or reduce the usefulness of meditation. Conversely, the quality of the drug experience is always diminishing; every experience or experiment I have had with a drug has made the next less enjoyable and less informative.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;">However you choose to spend your time, do as much research as possible so you feel safe! When you begin experimenting with any new experience, start slowly and carefully, keep trusted friends close at hand, and if all else fails, call your Mom.</div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;"><br /></div><div style="color: #222222; font-family: arial, sans-serif;">Love,</div><div style="color: #222222; font-family: arial, sans-serif;">Steven</div></div>


<div class="author">
  <img src="http://nilenso.com/images/people/steven-200.png" style="width: 96px; height: 96;">
  <span style="position: absolute; padding: 32px 15px;">
    <i>Original post by <a href="http://twitter.com/deobald">Steven Deobald</a> - check out <a href="http://blog.deobald.ca/">Hungry, horny, sleepy, curious.</a></i>
  </span>
</div>

]]></content>
    
  </entry>
  
</feed>